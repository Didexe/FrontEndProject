(function (Handlebars) {
'use strict';

Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;

/* global firebase */
var db = firebase.database();

var storage$1 = firebase.storage().ref();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var SlidesData = function () {
    function SlidesData() {
        classCallCheck(this, SlidesData);
    }

    createClass(SlidesData, [{
        key: 'addSlide',
        value: function addSlide(slideImage, slideTitle, slideText) {
            var uploadTask = storage$1.child('slideimages/' + slideImage.name).put(slideImage);

            return Promise.resolve(uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                console.log(error);
            }, function () {
                storage$1.child('slideimages/' + slideImage.name).getDownloadURL().then(function (imageUrl) {
                    db.ref().child('slides/').push({
                        slideTitle: slideTitle,
                        slideText: slideText,
                        imageUrl: imageUrl
                    });
                });
            }));
        }
    }, {
        key: 'getSlides',
        value: function getSlides() {
            var slides = [];
            return db.ref().child('slides').once('value', function (snapshot) {
                snapshot.forEach(function (slide) {
                    slides.push(slide.val());
                });
            }).then(function () {
                return Promise.resolve(slides);
            });
        }
    }]);
    return SlidesData;
}();

var slidesData = new SlidesData();

var ArticlesData = function () {
    function ArticlesData() {
        classCallCheck(this, ArticlesData);
    }

    createClass(ArticlesData, [{
        key: 'getArticles',
        value: function getArticles() {
            var articles = [];
            return db.ref().child('articles').once('value', function (snapshot) {
                snapshot.forEach(function (article) {
                    articles.push(article.val());
                });
            }).then(function () {
                return Promise.resolve(articles);
            });
        }
    }, {
        key: 'addArticle',
        value: function addArticle(articleImage, articleTitle, articleText) {
            var uploadTask = storage$1.child('articleimages/' + articleImage.name).put(articleImage);

            return uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                alert(error);
            }, function () {
                storage$1.child('articleimages/' + articleImage.name).getDownloadURL().then(function (imageUrl) {
                    db.ref().child('articles/').push({
                        articleTitle: articleTitle,
                        articleText: articleText,
                        imageUrl: imageUrl
                    });
                });
            });
        }
    }]);
    return ArticlesData;
}();

var articlesData = new ArticlesData();

var Multimediadata = function () {
    function Multimediadata() {
        classCallCheck(this, Multimediadata);
    }

    createClass(Multimediadata, [{
        key: 'getMultimedia',
        value: function getMultimedia() {
            var multimedia = [];
            return db.ref().child('multimedia').once('value', function (snapshot) {
                snapshot.forEach(function (multimedium) {
                    multimedia.push(multimedium.val());
                });
            }).then(function () {
                return Promise.resolve(multimedia);
            });
        }
    }, {
        key: 'addMultimedia',
        value: function addMultimedia(multimediaImage, multimediaText) {
            var uploadTask = storage$1.child('multimediaimages/' + multimediaImage.name).put(multimediaImage);

            return uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                alert(error);
            }, function () {
                storage$1.child('multimediaimages/' + multimediaImage.name).getDownloadURL().then(function (imageUrl) {
                    db.ref().child('multimedia/').push({
                        multimediaText: multimediaText,
                        imageUrl: imageUrl
                    });
                });
            });
        }
    }]);
    return Multimediadata;
}();

var multimediaData = new Multimediadata();

Handlebars.registerHelper('isSmallerThan7', function (index, options) {
    if (index < 7) {
        return options.fn(this);
    }
    return options.inverse(this);
});

var Template = function () {
    function Template() {
        classCallCheck(this, Template);

        this.cacheObj = {};
    }

    createClass(Template, [{
        key: 'compileTemplate',
        value: function compileTemplate(templateName) {
            var _this = this;

            var compiledTemplate = void 0;
            if (this.cacheObj.hasOwnProperty(templateName)) {
                return Promise.resolve(this.cacheObj[templateName]);
            }

            return fetch('../templates/' + templateName + '.handlebars').then(function (response) {
                response.text().then(function (html) {
                    compiledTemplate = Handlebars.compile(html);
                    _this.cacheObj[templateName] = compiledTemplate;
                });
            }).then(function () {
                return Promise.resolve(compiledTemplate);
            });
        }
    }]);
    return Template;
}();

var template = new Template();

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var utils = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.extend = extend;
  exports.indexOf = indexOf;
  exports.escapeExpression = escapeExpression;
  exports.isEmpty = isEmpty;
  exports.createFrame = createFrame;
  exports.blockParams = blockParams;
  exports.appendContextPath = appendContextPath;
  var escape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };

  var badChars = /[&<>"'`=]/g,
      possible = /[&<>"'`=]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  var toString = Object.prototype.toString;

  exports.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  /* eslint-disable func-style */
  var isFunction = function isFunction(value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    exports.isFunction = isFunction = function isFunction(value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  exports.isFunction = isFunction;

  /* eslint-enable func-style */

  /* istanbul ignore next */
  var isArray = Array.isArray || function (value) {
    return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? toString.call(value) === '[object Array]' : false;
  };

  exports.isArray = isArray;
  // Older IE versions do not directly support indexOf so we must implement our own, sadly.

  function indexOf(array, value) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === value) {
        return i;
      }
    }
    return -1;
  }

  function escapeExpression(string) {
    if (typeof string !== 'string') {
      // don't escape SafeStrings, since they're already safe
      if (string && string.toHTML) {
        return string.toHTML();
      } else if (string == null) {
        return '';
      } else if (!string) {
        return string + '';
      }

      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      string = '' + string;
    }

    if (!possible.test(string)) {
      return string;
    }
    return string.replace(badChars, escapeChar);
  }

  function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  function createFrame(object) {
    var frame = extend({}, object);
    frame._parent = object;
    return frame;
  }

  function blockParams(params, ids) {
    params.path = ids;
    return params;
  }

  function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }
});

var exception = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  function Exception(message, node) {
    var loc = node && node.loc,
        line = undefined,
        column = undefined;
    if (loc) {
      line = loc.start.line;
      column = loc.start.column;

      message += ' - ' + line + ':' + column;
    }

    var tmp = Error.prototype.constructor.call(this, message);

    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }

    /* istanbul ignore else */
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, Exception);
    }

    try {
      if (loc) {
        this.lineNumber = line;

        // Work around issue under safari where we can't directly set the column value
        /* istanbul ignore next */
        if (Object.defineProperty) {
          Object.defineProperty(this, 'column', {
            value: column,
            enumerable: true
          });
        } else {
          this.column = column;
        }
      }
    } catch (nop) {
      /* Ignore if the browser is very particular */
    }
  }

  Exception.prototype = new Error();

  exports['default'] = Exception;
  module.exports = exports['default'];
});

var blockHelperMissing = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('blockHelperMissing', function (context, options) {
      var inverse = options.inverse,
          fn = options.fn;

      if (context === true) {
        return fn(this);
      } else if (context === false || context == null) {
        return inverse(this);
      } else if (utils.isArray(context)) {
        if (context.length > 0) {
          if (options.ids) {
            options.ids = [options.name];
          }

          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        if (options.data && options.ids) {
          var data = utils.createFrame(options.data);
          data.contextPath = utils.appendContextPath(options.data.contextPath, options.name);
          options = { data: data };
        }

        return fn(context, options);
      }
    });
  };

  module.exports = exports['default'];
});

var each = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _exception2 = _interopRequireDefault(exception);

  exports['default'] = function (instance) {
    instance.registerHelper('each', function (context, options) {
      if (!options) {
        throw new _exception2['default']('Must pass iterator to #each');
      }

      var fn = options.fn,
          inverse = options.inverse,
          i = 0,
          ret = '',
          data = undefined,
          contextPath = undefined;

      if (options.data && options.ids) {
        contextPath = utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
      }

      if (utils.isFunction(context)) {
        context = context.call(this);
      }

      if (options.data) {
        data = utils.createFrame(options.data);
      }

      function execIteration(field, index, last) {
        if (data) {
          data.key = field;
          data.index = index;
          data.first = index === 0;
          data.last = !!last;

          if (contextPath) {
            data.contextPath = contextPath + field;
          }
        }

        ret = ret + fn(context[field], {
          data: data,
          blockParams: utils.blockParams([context[field], field], [contextPath + field, null])
        });
      }

      if (context && (typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object') {
        if (utils.isArray(context)) {
          for (var j = context.length; i < j; i++) {
            if (i in context) {
              execIteration(i, i, i === context.length - 1);
            }
          }
        } else {
          var priorKey = undefined;

          for (var key in context) {
            if (context.hasOwnProperty(key)) {
              // We're running the iterations one step out of sync so we can detect
              // the last iteration without have to scan the object twice and create
              // an itermediate keys array.
              if (priorKey !== undefined) {
                execIteration(priorKey, i - 1);
              }
              priorKey = key;
              i++;
            }
          }
          if (priorKey !== undefined) {
            execIteration(priorKey, i - 1, true);
          }
        }
      }

      if (i === 0) {
        ret = inverse(this);
      }

      return ret;
    });
  };

  module.exports = exports['default'];
});

var helperMissing = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _exception2 = _interopRequireDefault(exception);

  exports['default'] = function (instance) {
    instance.registerHelper('helperMissing', function () /* [args, ]options */{
      if (arguments.length === 1) {
        // A missing field in a {{foo}} construct.
        return undefined;
      } else {
        // Someone is actually trying to call something, blow up.
        throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
      }
    });
  };

  module.exports = exports['default'];
});

var _if = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('if', function (conditional, options) {
      if (utils.isFunction(conditional)) {
        conditional = conditional.call(this);
      }

      // Default behavior is to render the positive path if the value is truthy and not empty.
      // The `includeZero` option may be set to treat the condtional as purely not empty based on the
      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
      if (!options.hash.includeZero && !conditional || utils.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });

    instance.registerHelper('unless', function (conditional, options) {
      return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
    });
  };

  module.exports = exports['default'];
});

var log = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('log', function () /* message, options */{
      var args = [undefined],
          options = arguments[arguments.length - 1];
      for (var i = 0; i < arguments.length - 1; i++) {
        args.push(arguments[i]);
      }

      var level = 1;
      if (options.hash.level != null) {
        level = options.hash.level;
      } else if (options.data && options.data.level != null) {
        level = options.data.level;
      }
      args[0] = level;

      instance.log.apply(instance, args);
    });
  };

  module.exports = exports['default'];
});

var lookup = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('lookup', function (obj, field) {
      return obj && obj[field];
    });
  };

  module.exports = exports['default'];
});

var _with = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('with', function (context, options) {
      if (utils.isFunction(context)) {
        context = context.call(this);
      }

      var fn = options.fn;

      if (!utils.isEmpty(context)) {
        var data = options.data;
        if (options.data && options.ids) {
          data = utils.createFrame(options.data);
          data.contextPath = utils.appendContextPath(options.data.contextPath, options.ids[0]);
        }

        return fn(context, {
          data: data,
          blockParams: utils.blockParams([context], [data && data.contextPath])
        });
      } else {
        return options.inverse(this);
      }
    });
  };

  module.exports = exports['default'];
});

var helpers = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.registerDefaultHelpers = registerDefaultHelpers;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _helpersBlockHelperMissing2 = _interopRequireDefault(blockHelperMissing);

  var _helpersEach2 = _interopRequireDefault(each);

  var _helpersHelperMissing2 = _interopRequireDefault(helperMissing);

  var _helpersIf2 = _interopRequireDefault(_if);

  var _helpersLog2 = _interopRequireDefault(log);

  var _helpersLookup2 = _interopRequireDefault(lookup);

  var _helpersWith2 = _interopRequireDefault(_with);

  function registerDefaultHelpers(instance) {
    _helpersBlockHelperMissing2['default'](instance);
    _helpersEach2['default'](instance);
    _helpersHelperMissing2['default'](instance);
    _helpersIf2['default'](instance);
    _helpersLog2['default'](instance);
    _helpersLookup2['default'](instance);
    _helpersWith2['default'](instance);
  }
});

var inline = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerDecorator('inline', function (fn, props, container, options) {
      var ret = fn;
      if (!props.partials) {
        props.partials = {};
        ret = function ret(context, options) {
          // Create a new partials stack frame prior to exec.
          var original = container.partials;
          container.partials = utils.extend({}, original, props.partials);
          var ret = fn(context, options);
          container.partials = original;
          return ret;
        };
      }

      props.partials[options.args[0]] = options.fn;

      return ret;
    });
  };

  module.exports = exports['default'];
});

var decorators = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.registerDefaultDecorators = registerDefaultDecorators;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _decoratorsInline2 = _interopRequireDefault(inline);

  function registerDefaultDecorators(instance) {
    _decoratorsInline2['default'](instance);
  }
});

var logger_1 = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  var logger = {
    methodMap: ['debug', 'info', 'warn', 'error'],
    level: 'info',

    // Maps a given level value to the `methodMap` indexes above.
    lookupLevel: function lookupLevel(level) {
      if (typeof level === 'string') {
        var levelMap = utils.indexOf(logger.methodMap, level.toLowerCase());
        if (levelMap >= 0) {
          level = levelMap;
        } else {
          level = parseInt(level, 10);
        }
      }

      return level;
    },

    // Can be overridden in the host environment
    log: function log(level) {
      level = logger.lookupLevel(level);

      if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
        var method = logger.methodMap[level];
        if (!console[method]) {
          // eslint-disable-line no-console
          method = 'log';
        }

        for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          message[_key - 1] = arguments[_key];
        }

        console[method].apply(console, message); // eslint-disable-line no-console
      }
    }
  };

  exports['default'] = logger;
  module.exports = exports['default'];
});

var base = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.HandlebarsEnvironment = HandlebarsEnvironment;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _exception2 = _interopRequireDefault(exception);

  var _logger2 = _interopRequireDefault(logger_1);

  var VERSION = '4.0.10';
  exports.VERSION = VERSION;
  var COMPILER_REVISION = 7;

  exports.COMPILER_REVISION = COMPILER_REVISION;
  var REVISION_CHANGES = {
    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    2: '== 1.0.0-rc.3',
    3: '== 1.0.0-rc.4',
    4: '== 1.x.x',
    5: '== 2.0.0-alpha.x',
    6: '>= 2.0.0-beta.1',
    7: '>= 4.0.0'
  };

  exports.REVISION_CHANGES = REVISION_CHANGES;
  var objectType = '[object Object]';

  function HandlebarsEnvironment(helpers$$1, partials, decorators$$1) {
    this.helpers = helpers$$1 || {};
    this.partials = partials || {};
    this.decorators = decorators$$1 || {};

    helpers.registerDefaultHelpers(this);
    decorators.registerDefaultDecorators(this);
  }

  HandlebarsEnvironment.prototype = {
    constructor: HandlebarsEnvironment,

    logger: _logger2['default'],
    log: _logger2['default'].log,

    registerHelper: function registerHelper(name, fn) {
      if (utils.toString.call(name) === objectType) {
        if (fn) {
          throw new _exception2['default']('Arg not supported with multiple helpers');
        }
        utils.extend(this.helpers, name);
      } else {
        this.helpers[name] = fn;
      }
    },
    unregisterHelper: function unregisterHelper(name) {
      delete this.helpers[name];
    },

    registerPartial: function registerPartial(name, partial) {
      if (utils.toString.call(name) === objectType) {
        utils.extend(this.partials, name);
      } else {
        if (typeof partial === 'undefined') {
          throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
        }
        this.partials[name] = partial;
      }
    },
    unregisterPartial: function unregisterPartial(name) {
      delete this.partials[name];
    },

    registerDecorator: function registerDecorator(name, fn) {
      if (utils.toString.call(name) === objectType) {
        if (fn) {
          throw new _exception2['default']('Arg not supported with multiple decorators');
        }
        utils.extend(this.decorators, name);
      } else {
        this.decorators[name] = fn;
      }
    },
    unregisterDecorator: function unregisterDecorator(name) {
      delete this.decorators[name];
    }
  };

  var log = _logger2['default'].log;

  exports.log = log;
  exports.createFrame = utils.createFrame;
  exports.logger = _logger2['default'];
});

var safeString = createCommonjsModule(function (module, exports) {
  // Build out our basic SafeString type
  'use strict';

  exports.__esModule = true;
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
    return '' + this.string;
  };

  exports['default'] = SafeString;
  module.exports = exports['default'];
});

var runtime$1 = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.checkRevision = checkRevision;
  exports.template = template;
  exports.wrapProgram = wrapProgram;
  exports.resolvePartial = resolvePartial;
  exports.invokePartial = invokePartial;
  exports.noop = noop;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  // istanbul ignore next

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }newObj['default'] = obj;return newObj;
    }
  }

  var Utils = _interopRequireWildcard(utils);

  var _exception2 = _interopRequireDefault(exception);

  function checkRevision(compilerInfo) {
    var compilerRevision = compilerInfo && compilerInfo[0] || 1,
        currentRevision = base.COMPILER_REVISION;

    if (compilerRevision !== currentRevision) {
      if (compilerRevision < currentRevision) {
        var runtimeVersions = base.REVISION_CHANGES[currentRevision],
            compilerVersions = base.REVISION_CHANGES[compilerRevision];
        throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
      } else {
        // Use the embedded version info since the runtime doesn't know about this revision yet
        throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
      }
    }
  }

  function template(templateSpec, env) {
    /* istanbul ignore next */
    if (!env) {
      throw new _exception2['default']('No environment passed to template');
    }
    if (!templateSpec || !templateSpec.main) {
      throw new _exception2['default']('Unknown template object: ' + (typeof templateSpec === 'undefined' ? 'undefined' : _typeof(templateSpec)));
    }

    templateSpec.main.decorator = templateSpec.main_d;

    // Note: Using env.VM references rather than local var references throughout this section to allow
    // for external users to override these as psuedo-supported APIs.
    env.VM.checkRevision(templateSpec.compiler);

    function invokePartialWrapper(partial, context, options) {
      if (options.hash) {
        context = Utils.extend({}, context, options.hash);
        if (options.ids) {
          options.ids[0] = true;
        }
      }

      partial = env.VM.resolvePartial.call(this, partial, context, options);
      var result = env.VM.invokePartial.call(this, partial, context, options);

      if (result == null && env.compile) {
        options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
        result = options.partials[options.name](context, options);
      }
      if (result != null) {
        if (options.indent) {
          var lines = result.split('\n');
          for (var i = 0, l = lines.length; i < l; i++) {
            if (!lines[i] && i + 1 === l) {
              break;
            }

            lines[i] = options.indent + lines[i];
          }
          result = lines.join('\n');
        }
        return result;
      } else {
        throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
      }
    }

    // Just add water
    var container = {
      strict: function strict(obj, name) {
        if (!(name in obj)) {
          throw new _exception2['default']('"' + name + '" not defined in ' + obj);
        }
        return obj[name];
      },
      lookup: function lookup(depths, name) {
        var len = depths.length;
        for (var i = 0; i < len; i++) {
          if (depths[i] && depths[i][name] != null) {
            return depths[i][name];
          }
        }
      },
      lambda: function lambda(current, context) {
        return typeof current === 'function' ? current.call(context) : current;
      },

      escapeExpression: Utils.escapeExpression,
      invokePartial: invokePartialWrapper,

      fn: function fn(i) {
        var ret = templateSpec[i];
        ret.decorator = templateSpec[i + '_d'];
        return ret;
      },

      programs: [],
      program: function program(i, data, declaredBlockParams, blockParams, depths) {
        var programWrapper = this.programs[i],
            fn = this.fn(i);
        if (data || depths || blockParams || declaredBlockParams) {
          programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = wrapProgram(this, i, fn);
        }
        return programWrapper;
      },

      data: function data(value, depth) {
        while (value && depth--) {
          value = value._parent;
        }
        return value;
      },
      merge: function merge(param, common) {
        var obj = param || common;

        if (param && common && param !== common) {
          obj = Utils.extend({}, common, param);
        }

        return obj;
      },
      // An empty object to use as replacement for null-contexts
      nullContext: Object.seal({}),

      noop: env.VM.noop,
      compilerInfo: templateSpec.compiler
    };

    function ret(context) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var data = options.data;

      ret._setup(options);
      if (!options.partial && templateSpec.useData) {
        data = initData(context, data);
      }
      var depths = undefined,
          blockParams = templateSpec.useBlockParams ? [] : undefined;
      if (templateSpec.useDepths) {
        if (options.depths) {
          depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
        } else {
          depths = [context];
        }
      }

      function main(context /*, options*/) {
        return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
      }
      main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
      return main(context, options);
    }
    ret.isTop = true;

    ret._setup = function (options) {
      if (!options.partial) {
        container.helpers = container.merge(options.helpers, env.helpers);

        if (templateSpec.usePartial) {
          container.partials = container.merge(options.partials, env.partials);
        }
        if (templateSpec.usePartial || templateSpec.useDecorators) {
          container.decorators = container.merge(options.decorators, env.decorators);
        }
      } else {
        container.helpers = options.helpers;
        container.partials = options.partials;
        container.decorators = options.decorators;
      }
    };

    ret._child = function (i, data, blockParams, depths) {
      if (templateSpec.useBlockParams && !blockParams) {
        throw new _exception2['default']('must pass block params');
      }
      if (templateSpec.useDepths && !depths) {
        throw new _exception2['default']('must pass parent depths');
      }

      return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
    };
    return ret;
  }

  function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
    function prog(context) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var currentDepths = depths;
      if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
        currentDepths = [context].concat(depths);
      }

      return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
    }

    prog = executeDecorators(fn, prog, container, depths, data, blockParams);

    prog.program = i;
    prog.depth = depths ? depths.length : 0;
    prog.blockParams = declaredBlockParams || 0;
    return prog;
  }

  function resolvePartial(partial, context, options) {
    if (!partial) {
      if (options.name === '@partial-block') {
        partial = options.data['partial-block'];
      } else {
        partial = options.partials[options.name];
      }
    } else if (!partial.call && !options.name) {
      // This is a dynamic partial that returned a string
      options.name = partial;
      partial = options.partials[partial];
    }
    return partial;
  }

  function invokePartial(partial, context, options) {
    // Use the current closure context to save the partial-block if this partial
    var currentPartialBlock = options.data && options.data['partial-block'];
    options.partial = true;
    if (options.ids) {
      options.data.contextPath = options.ids[0] || options.data.contextPath;
    }

    var partialBlock = undefined;
    if (options.fn && options.fn !== noop) {
      (function () {
        options.data = base.createFrame(options.data);
        // Wrapper function to get access to currentPartialBlock from the closure
        var fn = options.fn;
        partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
          var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          // Restore the partial-block from the closure for the execution of the block
          // i.e. the part inside the block of the partial call.
          options.data = base.createFrame(options.data);
          options.data['partial-block'] = currentPartialBlock;
          return fn(context, options);
        };
        if (fn.partials) {
          options.partials = Utils.extend({}, options.partials, fn.partials);
        }
      })();
    }

    if (partial === undefined && partialBlock) {
      partial = partialBlock;
    }

    if (partial === undefined) {
      throw new _exception2['default']('The partial ' + options.name + ' could not be found');
    } else if (partial instanceof Function) {
      return partial(context, options);
    }
  }

  function noop() {
    return '';
  }

  function initData(context, data) {
    if (!data || !('root' in data)) {
      data = data ? base.createFrame(data) : {};
      data.root = context;
    }
    return data;
  }

  function executeDecorators(fn, prog, container, depths, data, blockParams) {
    if (fn.decorator) {
      var props = {};
      prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
      Utils.extend(prog, props);
    }
    return prog;
  }
});

var noConflict = createCommonjsModule(function (module, exports) {
  /* global window */
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (Handlebars$$1) {
    /* istanbul ignore next */
    var root = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : window,
        $Handlebars = root.Handlebars;
    /* istanbul ignore next */
    Handlebars$$1.noConflict = function () {
      if (root.Handlebars === Handlebars$$1) {
        root.Handlebars = $Handlebars;
      }
      return Handlebars$$1;
    };
  };

  module.exports = exports['default'];
});

var handlebars_runtime = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  // istanbul ignore next

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }newObj['default'] = obj;return newObj;
    }
  }

  var base$$1 = _interopRequireWildcard(base);

  // Each of these augment the Handlebars object. No need to setup here.
  // (This is done to easily share code between commonjs and browse envs)


  var _handlebarsSafeString2 = _interopRequireDefault(safeString);

  var _handlebarsException2 = _interopRequireDefault(exception);

  var Utils = _interopRequireWildcard(utils);

  var runtime = _interopRequireWildcard(runtime$1);

  var _handlebarsNoConflict2 = _interopRequireDefault(noConflict);

  // For compatibility and usage outside of module systems, make the Handlebars object a namespace
  function create() {
    var hb = new base$$1.HandlebarsEnvironment();

    Utils.extend(hb, base$$1);
    hb.SafeString = _handlebarsSafeString2['default'];
    hb.Exception = _handlebarsException2['default'];
    hb.Utils = Utils;
    hb.escapeExpression = Utils.escapeExpression;

    hb.VM = runtime;
    hb.template = function (spec) {
      return runtime.template(spec, hb);
    };

    return hb;
  }

  var inst = create();
  inst.create = create;

  _handlebarsNoConflict2['default'](inst);

  inst['default'] = inst;

  exports['default'] = inst;
  module.exports = exports['default'];
});

// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
var runtime = handlebars_runtime['default'];

var compiledTemplate = runtime.template({ "1": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, data && data.first, { "name": "if", "hash": {}, "fn": container.program(2, data, 0), "inverse": container.program(4, data, 0), "data": data })) != null ? stack1 : "";
  }, "2": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"slider-text-field-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-text-field visible\">\n            <h2 class=\"heading\">" + alias4((helper = (helper = helpers.slideTitle || (depth0 != null ? depth0.slideTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideTitle", "hash": {}, "data": data }) : helper)) + "</h2>\n            <p class=\"exerpt\">" + alias4((helper = (helper = helpers.slideText || (depth0 != null ? depth0.slideText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideText", "hash": {}, "data": data }) : helper)) + "</p>\n            <a href=\"javascript:void(0)\">Read more</a>                        \n        </div>\n        <img id=\"slider-image-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-image visible\" src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"slider image\">\n";
  }, "4": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"slider-text-field-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-text-field hidden\">\n            <h2 class=\"heading\">" + alias4((helper = (helper = helpers.slideTitle || (depth0 != null ? depth0.slideTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideTitle", "hash": {}, "data": data }) : helper)) + "</h2>\n            <p class=\"exerpt\">" + alias4((helper = (helper = helpers.slideText || (depth0 != null ? depth0.slideText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideText", "hash": {}, "data": data }) : helper)) + "</p>\n            <a href=\"javascript:void(0)\">Read more</a>                        \n        </div>\n        <img id=\"slider-image-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-image hidden\" src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"slider image\">\n";
  }, "6": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, data && data.first, { "name": "if", "hash": {}, "fn": container.program(7, data, 0), "inverse": container.program(9, data, 0), "data": data })) != null ? stack1 : "";
  }, "7": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"control-bottom-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"control-bottom active\" onclick=\"slideSliderImages(" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + ")\"></div>\n";
  }, "9": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"control-bottom-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"control-bottom\" onclick=\"slideSliderImages(" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + ")\"></div>\n";
  }, "11": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <article class=\"article-exerpt\">\n            <h2 class=\"heading\">" + alias4((helper = (helper = helpers.articleTitle || (depth0 != null ? depth0.articleTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "articleTitle", "hash": {}, "data": data }) : helper)) + "</h2>\n            <div class=\"image-wrapper\">\n                <img src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"\"/>\n            </div>\n            <p class=\"exerpt\">" + alias4((helper = (helper = helpers.articleText || (depth0 != null ? depth0.articleText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "articleText", "hash": {}, "data": data }) : helper)) + "</p>\n        </article>\n";
  }, "13": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = (helpers.isSmallerThan7 || depth0 && depth0.isSmallerThan7 || helpers.helperMissing).call(depth0 != null ? depth0 : container.nullContext || {}, data && data.index, { "name": "isSmallerThan7", "hash": {}, "fn": container.program(14, data, 0), "inverse": container.program(16, data, 0), "data": data })) != null ? stack1 : "";
  }, "14": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "                <div class=\"media-item tooltip visible\"><span class=\"tooltip-text\">\n                    " + alias4((helper = (helper = helpers.multimediaText || (depth0 != null ? depth0.multimediaText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "multimediaText", "hash": {}, "data": data }) : helper)) + "</span>\n                    <img src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"Multimedia image\"/>\n                </div>\n";
  }, "16": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "                <div class=\"media-item tooltip hidden\"><span class=\"tooltip-text\">\n                    " + alias4((helper = (helper = helpers.multimediaText || (depth0 != null ? depth0.multimediaText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "multimediaText", "hash": {}, "data": data }) : helper)) + "</span>\n                    <img src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"Multimedia image\"/>\n                </div>\n";
  }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
    var stack1,
        alias1 = depth0 != null ? depth0 : container.nullContext || {};

    return "<div id=\"slider\">\n    <div class=\"shadow-top\"></div>\n    <div id=\"slider-controls-left\" onclick=\"slideDirection(-1)\" ><i class=\"fa fa-angle-left fa-2x\" aria-hidden=\"true\"></i></div>\n    <div id=\"slider-images\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.slides : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </div>\n    <div id=\"slider-controls-right\" onclick=\"slideDirection(1)\" ><i class=\"fa fa-angle-right fa-2x\" aria-hidden=\"true\"></i></div>\n    <div class=\"shadow-bottom\"></div>\n    <div id=\"slider-controls-bottom\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.slides : depth0, { "name": "each", "hash": {}, "fn": container.program(6, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </div>\n</div>\n<div class=\"divider\"></div>\n<div id=\"quote\">\n    <h1>\"Chameleon is an extremely versatile theme with a miriad of options and styles\"</h1>\n    <p>Et anim esse elit est officia nulla culpa ex id ipsum dolore proident velit.</p>\n</div>\n<div class=\"divider\"></div>\n<main id=\"main-home\">\n    <section id=\"articles\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.articles : depth0, { "name": "each", "hash": {}, "fn": container.program(11, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </section>\n    <section id=\"media\">\n        <article class=\"links-widget\">\n            <h2 class=\"heading\">From the blog</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n        <article id=\"multi-media\">\n            <h2 class=\"heading\">Multi-media</h2>\n            <div id=\"media-wrapper\">\n                <div id=\"media-controls-left\" onclick=\"slideMultimediaImages('left')\"><i class=\"fa fa-angle-left fa-lg\" aria-hidden=\"true\"></i></div>\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.multimedia : depth0, { "name": "each", "hash": {}, "fn": container.program(13, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "                <div id=\"media-controls-right\" onclick=\"slideMultimediaImages('right')\"><i class=\"fa fa-angle-right fa-lg\" aria-hidden=\"true\"></i></div>\n            </div>\n        </article>\n    </section>\n</main>\n";
  }, "useData": true });

// console.log(compiledTemplate);
runtime.registerHelper('isSmallerThan7', function (index, options) {
    if (index < 7) {
        return options.fn(this);
    }
    return options.inverse(this);
});

var HomeControler = function () {
    function HomeControler() {
        classCallCheck(this, HomeControler);
    }

    createClass(HomeControler, [{
        key: 'showHomePage',
        value: function showHomePage() {
            Promise.all([slidesData.getSlides(), articlesData.getArticles(), multimediaData.getMultimedia()]
            // template.compileTemplate('home'),
            ).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 3),
                    slides = _ref2[0],
                    articles = _ref2[1],
                    multimedia = _ref2[2];

                var homeData = {
                    slides: slides,
                    articles: articles,
                    multimedia: multimedia
                };
                return Promise.resolve(compiledTemplate(homeData)).then(function (html) {
                    document.getElementById('container').innerHTML = html;
                    // const script = document.createElement('script');
                    // script.type = 'text/javascript';
                    // script.src = '../js/utils/mainSlider.js';
                    // document.body.appendChild(script);
                });
            });
        }
    }]);
    return HomeControler;
}();

var homeController = new HomeControler();

var CategoriesData = function () {
    function CategoriesData() {
        classCallCheck(this, CategoriesData);
    }

    createClass(CategoriesData, [{
        key: 'addCategory',
        value: function addCategory(category) {
            return db.ref().child('categories/' + category.categoryName).once('value').then(function (snapshot) {
                if (snapshot.exists()) {
                    alert('Category already exists!');
                } else {
                    db.ref('categories/').child(category.categoryName).set(category);
                }
            });
        }
    }, {
        key: 'getCategoryNames',
        value: function getCategoryNames() {
            var names = [];
            return db.ref().child('categories').once('value', function (snapshot) {
                snapshot.forEach(function (category) {
                    names.push(category.val().categoryName);
                });
            }).then(function () {
                return Promise.resolve({ categories: names });
            });
        }
    }, {
        key: 'getCategory',
        value: function getCategory(categoryName, postsPerPage) {
            var categoryPosts = void 0;
            var numberOfPages = void 0;
            var pages = [];
            db.ref('categories/').child(categoryName).child('categoryPosts').orderByKey().limitToFirst(postsPerPage).once('value').then(function (snapshot) {
                categoryPosts = snapshot.val();
            });
            db.ref('categories/' + categoryName).child('numberOfPosts').once('value').then(function (snapshot) {
                numberOfPages = Math.ceil(snapshot.val() / postsPerPage);
                for (var i = 1; i <= numberOfPages; i += 1) {
                    pages.push(i);
                }
            });

            return db.ref('categories/' + categoryName).child('categoryDescription').once('value').then(function (snapshot) {
                var category = {};
                category.categoryName = categoryName;
                category.categoryDescription = snapshot.val();
                category.categoryPosts = categoryPosts;
                category.categoryPages = pages;
                return Promise.resolve(category);
            });
        }
    }, {
        key: 'getCategoryPostsPage',
        value: function getCategoryPostsPage(currentPage, requestedPage, postsPerPage, categoryName) {
            var categoryPosts = void 0;
            if (requestedPage > currentPage) {
                var startId = document.getElementsByClassName('post')[postsPerPage - 1].id;
                return db.ref('categories/').child(categoryName).child('categoryPosts').orderByKey().startAt(startId).limitToFirst(postsPerPage + 1).once('value', function (snapshot) {
                    console.log(snapshot);
                    categoryPosts = snapshot.val();
                    delete categoryPosts[startId];
                }).then(function () {
                    return Promise.resolve({ posts: categoryPosts });
                });
            }
            var endId = document.getElementsByClassName('post')[0].id;
            return db.ref('categories/').child(categoryName).child('categoryPosts').orderByKey().endAt(endId).limitToLast(postsPerPage + 1).once('value', function (snapshot) {
                console.log(snapshot);
                categoryPosts = snapshot.val();
                delete categoryPosts[endId];
            }).then(function () {
                return Promise.resolve({ posts: categoryPosts });
            });
        }
    }]);
    return CategoriesData;
}();

var categoriesData = new CategoriesData();

var PostsData = function () {
    function PostsData() {
        classCallCheck(this, PostsData);
    }

    createClass(PostsData, [{
        key: 'getPost',
        value: function getPost(postId) {
            return db.ref('posts').child(postId).once('value').then(function (snapshot) {
                var post = snapshot.val();
                return Promise.resolve(post);
            });
        }
    }, {
        key: 'addPost',
        value: function addPost(post) {
            var uploadTask = storage$1.child('postimages/' + post.postTitle + '/' + post.postImage.name).put(post.postImage);

            uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                alert(error);
            }, function () {
                storage$1.child('postimages/' + post.postTitle + '/' + post.postImage.name).getDownloadURL().then(function (imageUrl) {
                    var newPostKey = db.ref().child('posts').push().key;
                    post.postId = newPostKey;
                    var updates = {};
                    updates['posts/' + newPostKey] = post;
                    updates['categories/' + post.postCategory + '/categoryPosts/' + newPostKey] = post;

                    return db.ref().update(updates);
                });
            });
        }
    }, {
        key: 'addComment',
        value: function addComment(categoryName, postId, comment) {
            var commentsNumber = void 0;
            var newCommentKey = db.ref().child('comments').push().key;
            var updates = {};

            db.ref('categories/' + categoryName + '/categoryPosts/' + postId).once('value').then(function (snapshot) {
                console.log(snapshot.val());
                commentsNumber = snapshot.val().numberOfComments + 1;
                updates['posts/' + postId + '/postComments/' + newCommentKey] = comment;
                updates['comments/' + newCommentKey] = comment;
                updates['posts/' + postId + '/numberOfComments'] = commentsNumber;
                updates['categories/' + categoryName + '/categoryPosts/' + postId + '/numberOfComments'] = commentsNumber;
                db.ref().update(updates);
            });
        }
    }]);
    return PostsData;
}();

var postData = new PostsData();

function clearInputs() {
    document.querySelectorAll('input, textarea').forEach(function (input) {
        if (input.value !== '') {
            input.value = '';
        }
    });
}

var postsPerPage$1 = 3;
var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var firebaseConfig = {
    apiKey: "AIzaSyCXp1GKlfoTF4eY49tx2inZSOrE3peimNQ",
    authDomain: "photo-blog-85739.firebaseapp.com",
    databaseURL: "https://photo-blog-85739.firebaseio.com",
    projectId: "photo-blog-85739",
    storageBucket: "photo-blog-85739.appspot.com",
    messagingSenderId: "735786168913"
};

var MONTHS$1 = {
    postsPerPage: postsPerPage$1,
    MONTHS: MONTHS,
    firebaseConfig: firebaseConfig
};

var compiledTemplate$1 = runtime.template({ "1": function _(container, depth0, helpers, partials, data) {
        var stack1;

        return "    <option selected disabled>select category</option>\n" + ((stack1 = helpers.each.call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? depth0.categories : depth0, { "name": "each", "hash": {}, "fn": container.program(2, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "");
    }, "2": function _(container, depth0, helpers, partials, data) {
        var alias1 = container.lambda,
            alias2 = container.escapeExpression;

        return "    <option value=\"" + alias2(alias1(depth0, depth0)) + "\">" + alias2(alias1(depth0, depth0)) + "</option>\n";
    }, "4": function _(container, depth0, helpers, partials, data) {
        return "    <option selected disabled>add category first</option>\n";
    }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
        var stack1;

        return "<section id=\"add-slide\">\n    <h2 class=\"heading\">Add new slide</h2>\n    <input type=\"text\" id=\"input-slide-title\" placeholder=\"Slide Title\" required>\n    <textarea name=\"slide_text\" id=\"input-slide-text\" cols=\"30\" rows=\"10\"  placeholder=\"Slide Text\" required></textarea>\n    <input type=\"file\" name=\"input_slide_image\" id=\"input-slide-image\" required>\n    <button id=\"slide-button\" class=\"admin-button\" type=\"submit\" onclick=\"window.location.hash='admin/addnewslide'\">Add slide</button>\n</section>\n<div class=\"divider\"></div>\n<section id=\"add-category\">\n    <h2 class=\"heading\">Add new Category</h2>\n    <input type=\"text\" name=\"categoryname\" id=\"input-category-name\" placeholder=\"Category name\" required>\n    <textarea name=\"category_description\" id=\"input-category-description\" cols=\"30\" rows=\"10\"  placeholder=\"Category dascription\" required></textarea>\n    <button id=\"category-button\" class=\"admin-button\" type=\"submit\" onclick=\"window.location.hash='admin/addnewcategory'\">Add category</button>\n</section>\n<div class=\"divider\"></div>\n<section id=\"add-post\">\n    <h2 class=\"heading\">Add new Post</h2>\n    <select type=\"text\" name=\"postcategory\" id=\"input-post-category\" placeholder=\"Post category\" required>\n" + ((stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? depth0.categories : depth0, { "name": "if", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.program(4, data, 0), "data": data })) != null ? stack1 : "") + "    </select>\n    <input type=\"text\" name=\"posttitle\" id=\"input-post-title\" placeholder=\"Post title\" required>\n    <textarea name=\"posttext\" id=\"input-post-text\" cols=\"30\" rows=\"10\" placeholder=\"Post text\" required></textarea>     \n    <input type=\"file\" name=\"input_post_image\" id=\"input-post-image\" required>\n    <button id=\"post-button\" class=\"admin-button\" type=\"submit\" onclick=\"window.location.hash='admin/addnnewpost'\">Add post</button>\n</section>\n<div class=\"divider\"></div>\n<section id=\"add-multimedia\">\n    <h2 class=\"heading\">Add new Multimedia</h2>\n    <textarea name=\"posttext\" id=\"input-multimedia-text\" cols=\"30\" rows=\"10\" placeholder=\"Multimedia text\" required></textarea> \n    <input type=\"file\" name=\"multimedia\" id=\"input-multimedia-image\" required>\n    <button id=\"multimedia-button\" class=\"admin-button\" type=\"submit\" onclick=\"window.location.hash='admin/addnewmultimedia'\">Add multimedia</button>\n</section>\n<div class=\"divider\"></div>\n<section id=\"add-slide\">\n    <h2 class=\"heading\">Add new Article</h2>\n    <input type=\"text\" id=\"input-article-title\" placeholder=\"Article Title\" required>\n    <textarea name=\"article_text\" id=\"input-article-text\" cols=\"30\" rows=\"10\"  placeholder=\"Article Text\" required></textarea>\n    <input type=\"file\" name=\"input_article_image\" id=\"input-article-image\" required>\n    <button id=\"slide-button\" class=\"admin-button\" type=\"submit\" onclick=\"window.location.hash='admin/addnewarticle'\">Add article</button>\n</section>";
    }, "useData": true });

/* global firebase,router */

var AdminController = function () {
    function AdminController() {
        classCallCheck(this, AdminController);
    }

    createClass(AdminController, [{
        key: 'showAdminPage',
        value: function showAdminPage() {
            Promise.all([categoriesData.getCategoryNames()]
            // template.compileTemplate('admin'),
            ).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 1),
                    categories = _ref2[0];

                document.getElementById('container').innerHTML = compiledTemplate$1(categories);
            });
        }
    }, {
        key: 'addNewMultimedia',
        value: function addNewMultimedia() {
            var multimediaImage = document.getElementById('input-multimedia-image').files[0];
            var multimediaText = document.getElementById('input-multimedia-text').value;

            return multimediaData.addMultimedia(multimediaImage, multimediaText).then(function () {
                clearInputs();
                alert('New multimedia added');
            });
        }
    }, {
        key: 'addNewArticle',
        value: function addNewArticle() {
            var articleImage = document.getElementById('input-article-image').files[0];
            var articleTitle = document.getElementById('input-article-title').value;
            var articleText = document.getElementById('input-article-text').value;

            return articlesData.addArticle(articleImage, articleTitle, articleText).then(function (message) {
                clearInputs();
                alert('New article added');
            });
        }
    }, {
        key: 'addNewSlide',
        value: function addNewSlide() {
            var slideImage = document.getElementById('input-slide-image').files[0];
            var slideTitle = document.getElementById('input-slide-title').value;
            var slideText = document.getElementById('input-slide-text').value;

            return slidesData.addSlide(slideImage, slideTitle, slideText).then(function () {
                clearInputs();
                // this.showAdminPage();
                alert('New slide added');
            });
        }
    }, {
        key: 'addNewCategory',
        value: function addNewCategory() {
            var _this = this;

            var category = {
                categoryName: document.getElementById('input-category-name').value,
                categoryDescription: document.getElementById('input-category-description').value,
                numberOfPosts: 0
            };

            return categoriesData.addCategory(category).then(function () {
                _this.showAdminPage();
                alert('New category added');
            });
        }
    }, {
        key: 'addNewPost',
        value: function addNewPost() {
            var today = new Date();
            var post = {
                postImage: document.getElementById('input-post-image').files[0],
                postTitle: document.getElementById('input-post-title').value,
                postText: document.getElementById('input-post-text').value,
                postCategory: document.getElementById('input-post-category').value,
                userId: firebase.auth().currentUser.uid,
                postAuthor: firebase.auth().currentUser.displayName,
                postDate: MONTHS$1.MONTHS[today.getMonth()] + ' ' + today.getDate() + ', ' + today.getFullYear(),
                numberOfComments: 0
            };

            return postData.addPost(post).then(function () {
                clearInputs();
                alert('New post added');
            });
        }
    }]);
    return AdminController;
}();

var adminController = new AdminController();

var loginTemplate = runtime.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
        return "<section id=\"login-user\">\n    <h2 class=\"heading\">Login user</h2>\n    <input type=\"email\" name=\"email\" id=\"login-email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" id=\"login-password\" placeholder=\"Password\" required>\n    <button id=\"login-button\" class=\"admin-button\" type=\"submit\" onclick=\"loginUser()\">Login</button>\n</section>";
    }, "useData": true });

var signupTemplate = runtime.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
        return "<section id=\"register-user\">\n    <h2 class=\"heading\">Register user</h2>\n    <input type=\"text\" name=\"username\" id=\"input-username\" placeholder=\"Username\" required>\n    <input type=\"email\" name=\"email\" id=\"input-email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" id=\"input-password\" placeholder=\"Password\" required>\n    <input type=\"file\" name=\"input_user_image\" id=\"input-user-image\" required>\n    <button id=\"user-button\" class=\"admin-button\" type=\"submit\" onclick=\"addNewUser()\">Register</button>\n</section>  ";
    }, "useData": true });

var AuthenticationController = function () {
    function AuthenticationController() {
        classCallCheck(this, AuthenticationController);
    }

    createClass(AuthenticationController, [{
        key: 'showLoginPage',
        value: function showLoginPage() {
            document.getElementById('container').innerHTML = loginTemplate();
        }
    }, {
        key: 'showSignupPage',
        value: function showSignupPage() {
            document.getElementById('container').innerHTML = signupTemplate();
        }
    }, {
        key: 'addNewUser',
        value: function addNewUser() {
            var userImage = document.getElementById('input-user-image').files[0];
            var username = document.getElementById('input-username').value;
            var email = document.getElementById('input-email').value;
            var password = document.getElementById('input-password').value;

            firebase.auth().createUserWithEmailAndPassword(email, password).then(function (user) {
                var uploadTask = storage.child('userimages/' + username + '/' + userImage.name).put(uaserImage);
                uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                    alert(error);
                }, function () {
                    storage.child('userimages/' + username + '/' + userImage.name).getDownloadURL().then(function (imageUrl) {
                        user.updateProfile({ displayName: username, photoURL: imageUrl });
                    });
                }).then(function () {
                    router.navigate('home');
                    alert('Registered and loged in');
                });
            }).catch(function (error) {
                alert(error.message);
            });
        }
    }, {
        key: 'loginUser',
        value: function loginUser() {
            var email = document.getElementById('login-email').value;
            var password = document.getElementById('login-password').value;

            firebase.auth().signInWithEmailAndPassword(email, password).then(function () {
                router.navigate('home');
                alert('Logged in!');
            }).catch(function (error) {
                alert(error.message);
            });
        }
    }, {
        key: 'logoutUser',
        value: function logoutUser() {
            firebase.auth().signOut().then(function () {
                alert('Signed out');
            });
        }
    }]);
    return AuthenticationController;
}();

var authenticationController = new AuthenticationController();

var categoryTemplate = runtime.template({ "1": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "            <a href=\"#categories/" + alias4((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "/" + alias4((helper = (helper = helpers.postId || (depth0 != null ? depth0.postId : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postId", "hash": {}, "data": data }) : helper)) + "\"><h2 class=\"heading\">" + alias4((helper = (helper = helpers.postTitle || (depth0 != null ? depth0.postTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postTitle", "hash": {}, "data": data }) : helper)) + "</h2></a>\n            <div class=\"divider\"></div>\n            <p class=\"post-details\">Posted by<span> " + alias4((helper = (helper = helpers.postAuthor || (depth0 != null ? depth0.postAuthor : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postAuthor", "hash": {}, "data": data }) : helper)) + "</span> on <span>" + alias4((helper = (helper = helpers.postDate || (depth0 != null ? depth0.postDate : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postDate", "hash": {}, "data": data }) : helper)) + " </span>in <span>" + alias4((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "</span> category | <span>" + alias4((helper = (helper = helpers.numberOfComments || (depth0 != null ? depth0.numberOfComments : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "numberOfComments", "hash": {}, "data": data }) : helper)) + " </span>comments</p>\n            <div class=\"divider\"></div>\n            <section id=\"" + alias4((helper = (helper = helpers.postId || (depth0 != null ? depth0.postId : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postId", "hash": {}, "data": data }) : helper)) + "\" class=\"post\">\n                <div class=\"post-image-wrapper\">\n                    <img class=\"post-image\" src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"\"/>\n                    <div class=\"post-image-shadow\"></div>\n                </div>\n                <p class=\"post-text\">" + alias4((helper = (helper = helpers.postText || (depth0 != null ? depth0.postText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postText", "hash": {}, "data": data }) : helper)) + "</p>\n            </section>\n";
  }, "3": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, data && data.first, { "name": "if", "hash": {}, "fn": container.program(4, data, 0), "inverse": container.program(6, data, 0), "data": data })) != null ? stack1 : "";
  }, "4": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = container.lambda,
        alias2 = container.escapeExpression;

    return "            <button id=\"category-page-button-" + alias2(alias1(depth0, depth0)) + "\" class=\"category-page-button active\" onclick=\"window.location.href = '#categories/" + alias2((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "/page/" + alias2(alias1(depth0, depth0)) + "'\" disabled>" + alias2(alias1(depth0, depth0)) + "</button>\n";
  }, "6": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = container.lambda,
        alias2 = container.escapeExpression;

    return "            <button id=\"category-page-button-" + alias2(alias1(depth0, depth0)) + "\" class=\"category-page-button\" onclick=\"window.location.href = '#categories/" + alias2((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(depth0 != null ? depth0 : container.nullContext || {}, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "/page/" + alias2(alias1(depth0, depth0)) + "'\">" + alias2(alias1(depth0, depth0)) + "</button>\n";
  }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
    var stack1,
        helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "<div id=\"breadcrumbs\">\n    <p><a href=\"#home\">Home </a><span class=\"category-name\">&raquo; " + alias4((helper = (helper = helpers.categoryName || (depth0 != null ? depth0.categoryName : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "categoryName", "hash": {}, "data": data }) : helper)) + "</span></span></p>\n</div>\n<div class=\"divider\"></div>\n<div id=\"quote\">\n    <h1 id=\"category-name\">" + alias4((helper = (helper = helpers.categoryName || (depth0 != null ? depth0.categoryName : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "categoryName", "hash": {}, "data": data }) : helper)) + "</h1>\n    <p>" + alias4((helper = (helper = helpers.categoryDescription || (depth0 != null ? depth0.categoryDescription : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "categoryDescription", "hash": {}, "data": data }) : helper)) + "</p>\n</div>\n<div class=\"divider\"></div>\n<div id=\"content-wrapper\">\n    <main id=\"post-wrapper\">\n        <div id=\"posts-section\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.categoryPosts : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "        </div>\n    <div id=\"pagination\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.categoryPages : depth0, { "name": "each", "hash": {}, "fn": container.program(3, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </div>\n    </main>\n    <aside id=\"right-sidebar\">\n        <article class=\"links-widget\">\n            <h2 class=\"heading\">From the blog</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n        <article class=\"links-widget\">\n            <h2 class=\"heading\">Archives</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n        <article class=\"links-widget\">\n            <h2 class=\"heading\">Recent Posts</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n    </aside>\n</div>";
  }, "useData": true });

var postsSectionTemplate = runtime.template({ "1": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "    <a href=\"#categories/" + alias4((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "/" + alias4((helper = (helper = helpers.postId || (depth0 != null ? depth0.postId : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postId", "hash": {}, "data": data }) : helper)) + "\"><h2 class=\"heading\">" + alias4((helper = (helper = helpers.postTitle || (depth0 != null ? depth0.postTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postTitle", "hash": {}, "data": data }) : helper)) + "</h2></a>\n    <div class=\"divider\"></div>\n    <p class=\"post-details\">Posted by<span> " + alias4((helper = (helper = helpers.postAuthor || (depth0 != null ? depth0.postAuthor : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postAuthor", "hash": {}, "data": data }) : helper)) + "</span> on <span>" + alias4((helper = (helper = helpers.postDate || (depth0 != null ? depth0.postDate : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postDate", "hash": {}, "data": data }) : helper)) + " </span>in <span>" + alias4((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "</span> category | <span>" + alias4((helper = (helper = helpers.numberOfComments || (depth0 != null ? depth0.numberOfComments : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "numberOfComments", "hash": {}, "data": data }) : helper)) + " </span>comments</p>\n    <div class=\"divider\"></div>\n    <section id=\"" + alias4((helper = (helper = helpers.postId || (depth0 != null ? depth0.postId : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postId", "hash": {}, "data": data }) : helper)) + "\"  class=\"post\">\n        <div class=\"post-image-wrapper\">\n            <img class=\"post-image\" src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"\"/>\n            <div class=\"post-image-shadow\"></div>\n        </div>\n        <p id=\"post-text\">" + alias4((helper = (helper = helpers.postText || (depth0 != null ? depth0.postText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postText", "hash": {}, "data": data }) : helper)) + "</p>\n    </section>\n";
  }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = helpers.each.call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? depth0.posts : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "";
  }, "useData": true });

var CategoriesController = function () {
    function CategoriesController() {
        classCallCheck(this, CategoriesController);
    }

    createClass(CategoriesController, [{
        key: 'showCategoryPage',
        value: function showCategoryPage(params) {
            var categoryName = params.category;
            Promise.all([categoriesData.getCategory(categoryName, MONTHS$1.postsPerPage)]
            // template.compileTemplate('category'),
            ).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 1),
                    category = _ref2[0];

                console.log(category);
                document.getElementById('container').innerHTML = categoryTemplate(category);
            });
        }
    }, {
        key: 'updatePostSection',
        value: function updatePostSection(requestedPage) {
            var currentPage = +document.getElementsByClassName('category-page-button active')[0].innerHTML;
            var categoryName = document.getElementById('category-name').innerHTML;
            Promise.all([categoriesData.getCategoryPostsPage(currentPage, requestedPage, postsPerPage, categoryName)]
            // template.compileTemplate('posts-page'),
            ).then(function (_ref3) {
                var _ref4 = slicedToArray(_ref3, 1),
                    posts = _ref4[0];

                document.getElementById('posts-section').innerHTML = postsSectionTemplate(posts);
                document.getElementById('category-page-button-' + currentPage).classList.remove('active');
                document.getElementById('category-page-button-' + currentPage).disabled = false;
                document.getElementById('category-page-button-' + requestedPage).classList.add('active');
                document.getElementById('category-page-button-' + requestedPage).disabled = true;
            });
        }
    }]);
    return CategoriesController;
}();

var categoryController = new CategoriesController();

/* global firebase */
var PostsController = function () {
    function PostsController() {
        classCallCheck(this, PostsController);
    }

    createClass(PostsController, [{
        key: 'showPostPage',
        value: function showPostPage(params) {
            var postId = params.post;
            Promise.all([postData.getPost(postId), template.compileTemplate('post')]).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 2),
                    post = _ref2[0],
                    compiledTemplate = _ref2[1];

                document.getElementById('container').innerHTML = compiledTemplate(post);
            });
        }
    }, {
        key: 'addNewComment',
        value: function addNewComment(partialUrl) {
            var today = new Date();
            var uris = partialUrl.split('/');
            var categoryName = uris[0];
            var postId = uris[1];
            var comment = {
                commentAuthor: document.getElementById('input-comment-user').value,
                commentAuthorEmail: document.getElementById('input-comment-email').value,
                commentText: document.getElementById('input-comment-text').value,
                commentAuthorImage: firebase.auth().currentUser.photoURL,
                commentDate: MONTHS$1[today.getMonth()] + ' ' + today.getDate() + ', ' + today.getFullYear()
            };

            postData.addComment(categoryName, postId, comment).then(function () {
                // showPostPage(postId);
                alert('New comment added');
            });
        }
    }]);
    return PostsController;
}();

var postsController = new PostsController();

/* global firebase, Navigo */
// firebase.initializeApp(settings.firebaseConfig);

console.log('app running');

var router$1 = new Navigo(null, true, '#');

router$1.updatePageLinks();

router$1.on({
  'admin': function admin() {
    return adminController.showAdminPage();
  },
  'admin/addnewslide': function adminAddnewslide() {
    return adminController.addNewSlide();
  },
  'admin/addnewpost': function adminAddnewpost() {
    return adminController.addNewPost();
  },
  'admin/addnewcategory': function adminAddnewcategory() {
    return adminController.addNewCategory();
  },
  'admin/addnewmultimedia': function adminAddnewmultimedia() {
    return adminController.addNewMultimedia();
  },
  'admin/addnewarticle': function adminAddnewarticle() {
    return adminController.addNewMultimedia();
  },
  'login': function login() {
    return authenticationController.showLoginPage();
  },
  'signup': function signup() {
    return authenticationController.showSignupPage();
  },
  'logout': function logout() {
    return authenticationController.logoutUser();
  },
  'home': function home() {
    return homeController.showHomePage();
  },
  'categories/:category': function categoriesCategory(params) {
    return categoryController.showCategoryPage(params);
  },
  // 'categories/:category/page/:page': (params) => categoriesController.updateCategoryPage(params),
  'categories/:category/:post': function categoriesCategoryPost(params) {
    return postsController.showPostPage();
  },

  '': function _() {
    return router$1.navigate('home');
  }
}).resolve();

}(Handlebars));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uL2RhdGEvZGF0YWJhc2UuanMiLCIuLi9kYXRhL3N0b3JhZ2UuanMiLCIuLi9kYXRhL3NsaWRlcy5kYXRhLmpzIiwiLi4vZGF0YS9hcnRpY2xlcy5kYXRhLmpzIiwiLi4vZGF0YS9tdWx0aW1lZGlhLmRhdGEuanMiLCIuLi9qcy90ZW1wbGF0ZXMuanMiLCJoYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvdXRpbHMuanMiLCJoYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvZXhjZXB0aW9uLmpzIiwiaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiLCJoYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9lYWNoLmpzIiwiaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIiwiaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyIsImhhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9kZWNvcmF0b3JzL2lubGluZS5qcyIsImhhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9sb2dnZXIuanMiLCJoYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvYmFzZS5qcyIsImhhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9ydW50aW1lLmpzIiwiaGFuZGxlYmFycy9ydW50aW1lLmpzIiwiLi4vdGVtcGxhdGVzL3ByZWNvbXBpbGVkL2hvbWUudGVtcGxhdGUuanMiLCIuLi9jb250cm9sbGVycy9ob21lLmNvbnRyb2xsZXIuanMiLCIuLi9kYXRhL2NhdGVnb3JpZXMuZGF0YS5qcyIsIi4uL2RhdGEvcG9zdHMuZGF0YS5qcyIsIi4uL2pzL3V0aWxzL2NsZWFySW5wdXRzLmpzIiwiLi4vanMvdXRpbHMvc2V0dGluZ3MuanMiLCIuLi90ZW1wbGF0ZXMvcHJlY29tcGlsZWQvYWRtaW4udGVtcGxhdGUuanMiLCIuLi9jb250cm9sbGVycy9hZG1pbi5jb250cm9sbGVyLmpzIiwiLi4vdGVtcGxhdGVzL3ByZWNvbXBpbGVkL2xvZ2luLnRlbXBsYXRlLmpzIiwiLi4vdGVtcGxhdGVzL3ByZWNvbXBpbGVkL3NpZ251cC50ZW1wbGF0ZS5qcyIsIi4uL2NvbnRyb2xsZXJzL2F1dGhlbnRpY2F0aW9uLmNvbnRyb2xsZXIuanMiLCIuLi90ZW1wbGF0ZXMvcHJlY29tcGlsZWQvY2F0ZWdvcnkudGVtcGxhdGUuanMiLCIuLi90ZW1wbGF0ZXMvcHJlY29tcGlsZWQvcG9zdHMtc2VjdGlvbi50ZW1wbGF0ZS5qcyIsIi4uL2NvbnRyb2xsZXJzL2NhdGVnb3JpZXMuY29udHJvbGxlci5qcyIsIi4uL2NvbnRyb2xsZXJzL3Bvc3RzLmNvbnRyb2xsZXIuanMiLCIuLi9qcy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIGZpcmViYXNlICovXG5jb25zdCBkYiA9IGZpcmViYXNlLmRhdGFiYXNlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGRiO1xuIiwiY29uc3Qgc3RvcmFnZSA9IGZpcmViYXNlLnN0b3JhZ2UoKS5yZWYoKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmFnZTsiLCJpbXBvcnQgZGIgZnJvbSAnLi9kYXRhYmFzZSc7XG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnO1xuY2xhc3MgU2xpZGVzRGF0YSB7XG4gICAgYWRkU2xpZGUoc2xpZGVJbWFnZSwgc2xpZGVUaXRsZSwgc2xpZGVUZXh0KSB7XG4gICAgICAgIGNvbnN0IHVwbG9hZFRhc2sgPSBzdG9yYWdlLmNoaWxkKGBzbGlkZWltYWdlcy8ke3NsaWRlSW1hZ2UubmFtZX1gKS5wdXQoc2xpZGVJbWFnZSk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICAgIHVwbG9hZFRhc2sub24oJ3N0YXRlX2NoYW5nZWQnLFxuICAgICAgICAgICAgICAgIChzbmFwc2hvdCkgPT4ge1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlLmNoaWxkKGBzbGlkZWltYWdlcy8ke3NsaWRlSW1hZ2UubmFtZX1gKS5nZXREb3dubG9hZFVSTCgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChpbWFnZVVybCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGIucmVmKCkuY2hpbGQoYHNsaWRlcy9gKS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZVRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRTbGlkZXMoKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlcyA9IFtdO1xuICAgICAgICByZXR1cm4gZGIucmVmKCkuY2hpbGQoJ3NsaWRlcycpLm9uY2UoJ3ZhbHVlJywgKHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICBzbmFwc2hvdC5mb3JFYWNoKChzbGlkZSkgPT4ge1xuICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHNsaWRlLnZhbCgpKTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2xpZGVzKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBzbGlkZXNEYXRhID0gbmV3IFNsaWRlc0RhdGEoKTtcbmV4cG9ydCBkZWZhdWx0IHNsaWRlc0RhdGE7XG4iLCJpbXBvcnQgZGIgZnJvbSAnLi9kYXRhYmFzZSc7XG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnO1xuY2xhc3MgQXJ0aWNsZXNEYXRhIHtcbiAgICBnZXRBcnRpY2xlcygpIHtcbiAgICAgICAgY29uc3QgYXJ0aWNsZXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIGRiLnJlZigpLmNoaWxkKCdhcnRpY2xlcycpLm9uY2UoJ3ZhbHVlJywgKHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICBzbmFwc2hvdC5mb3JFYWNoKChhcnRpY2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgYXJ0aWNsZXMucHVzaChhcnRpY2xlLnZhbCgpKTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYXJ0aWNsZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRBcnRpY2xlKGFydGljbGVJbWFnZSwgYXJ0aWNsZVRpdGxlLCBhcnRpY2xlVGV4dCkge1xuICAgICAgICBjb25zdCB1cGxvYWRUYXNrID0gc3RvcmFnZS5jaGlsZChgYXJ0aWNsZWltYWdlcy8ke2FydGljbGVJbWFnZS5uYW1lfWApLnB1dChhcnRpY2xlSW1hZ2UpO1xuXG4gICAgICAgIHJldHVybiB1cGxvYWRUYXNrLm9uKCdzdGF0ZV9jaGFuZ2VkJyxcbiAgICAgICAgICAgIChzbmFwc2hvdCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KGVycm9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBzdG9yYWdlLmNoaWxkKGBhcnRpY2xlaW1hZ2VzLyR7YXJ0aWNsZUltYWdlLm5hbWV9YCkuZ2V0RG93bmxvYWRVUkwoKVxuICAgICAgICAgICAgICAgIC50aGVuKChpbWFnZVVybCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkYi5yZWYoKS5jaGlsZChgYXJ0aWNsZXMvYCkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnRpY2xlVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnRpY2xlVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlVXJsLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhcnRpY2xlc0RhdGEgPSBuZXcgQXJ0aWNsZXNEYXRhO1xuZXhwb3J0IGRlZmF1bHQgYXJ0aWNsZXNEYXRhO1xuIiwiaW1wb3J0IGRiIGZyb20gJy4vZGF0YWJhc2UnO1xuaW1wb3J0IHN0b3JhZ2UgZnJvbSAnLi9zdG9yYWdlJztcbmNsYXNzIE11bHRpbWVkaWFkYXRhIHtcbiAgICBnZXRNdWx0aW1lZGlhKCkge1xuICAgICAgICBjb25zdCBtdWx0aW1lZGlhID0gW107XG4gICAgICAgIHJldHVybiBkYi5yZWYoKS5jaGlsZCgnbXVsdGltZWRpYScpLm9uY2UoJ3ZhbHVlJywgKHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICBzbmFwc2hvdC5mb3JFYWNoKChtdWx0aW1lZGl1bSkgPT4ge1xuICAgICAgICAgICAgICAgIG11bHRpbWVkaWEucHVzaChtdWx0aW1lZGl1bS52YWwoKSk7XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG11bHRpbWVkaWEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRNdWx0aW1lZGlhKG11bHRpbWVkaWFJbWFnZSwgbXVsdGltZWRpYVRleHQpIHtcbiAgICAgICAgY29uc3QgdXBsb2FkVGFzayA9IHN0b3JhZ2UuY2hpbGQoYG11bHRpbWVkaWFpbWFnZXMvJHttdWx0aW1lZGlhSW1hZ2UubmFtZX1gKS5wdXQobXVsdGltZWRpYUltYWdlKTtcblxuICAgICAgICByZXR1cm4gdXBsb2FkVGFzay5vbignc3RhdGVfY2hhbmdlZCcsXG4gICAgICAgICAgICAoc25hcHNob3QpID0+IHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBhbGVydChlcnJvcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgc3RvcmFnZS5jaGlsZChgbXVsdGltZWRpYWltYWdlcy8ke211bHRpbWVkaWFJbWFnZS5uYW1lfWApLmdldERvd25sb2FkVVJMKClcbiAgICAgICAgICAgICAgICAudGhlbigoaW1hZ2VVcmwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGIucmVmKCkuY2hpbGQoYG11bHRpbWVkaWEvYCkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aW1lZGlhVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlVXJsLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBtdWx0aW1lZGlhRGF0YSA9IG5ldyBNdWx0aW1lZGlhZGF0YTtcbmV4cG9ydCBkZWZhdWx0IG11bHRpbWVkaWFEYXRhO1xuIiwiaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnbGliJztcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaXNTbWFsbGVyVGhhbjcnLCBmdW5jdGlvbihpbmRleCwgb3B0aW9ucykge1xuICAgIGlmIChpbmRleCA8IDcpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gfSk7XG5jbGFzcyBUZW1wbGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FjaGVPYmogPSB7fTtcbiAgICB9XG4gICAgY29tcGlsZVRlbXBsYXRlKHRlbXBsYXRlTmFtZSkge1xuICAgICAgICBsZXQgY29tcGlsZWRUZW1wbGF0ZTtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVPYmouaGFzT3duUHJvcGVydHkodGVtcGxhdGVOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jYWNoZU9ialt0ZW1wbGF0ZU5hbWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmZXRjaChgLi4vdGVtcGxhdGVzLyR7dGVtcGxhdGVOYW1lfS5oYW5kbGViYXJzYClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICByZXNwb25zZS50ZXh0KClcbiAgICAgICAgICAgICAgICAudGhlbigoaHRtbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb21waWxlZFRlbXBsYXRlID0gSGFuZGxlYmFycy5jb21waWxlKGh0bWwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlT2JqW3RlbXBsYXRlTmFtZV0gPSBjb21waWxlZFRlbXBsYXRlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29tcGlsZWRUZW1wbGF0ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGU7XG5leHBvcnQgZGVmYXVsdCB0ZW1wbGF0ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuZXhwb3J0cy5pbmRleE9mID0gaW5kZXhPZjtcbmV4cG9ydHMuZXNjYXBlRXhwcmVzc2lvbiA9IGVzY2FwZUV4cHJlc3Npb247XG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuZXhwb3J0cy5jcmVhdGVGcmFtZSA9IGNyZWF0ZUZyYW1lO1xuZXhwb3J0cy5ibG9ja1BhcmFtcyA9IGJsb2NrUGFyYW1zO1xuZXhwb3J0cy5hcHBlbmRDb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoO1xudmFyIGVzY2FwZSA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOycsXG4gICc9JzogJyYjeDNEOydcbn07XG5cbnZhciBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgcG9zc2libGUgPSAvWyY8PlwiJ2A9XS87XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXIoY2hyKSB7XG4gIHJldHVybiBlc2NhcGVbY2hyXTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKG9iaiAvKiAsIC4uLnNvdXJjZSAqLykge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XG4gICAgICAgIG9ialtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZXhwb3J0cy50b1N0cmluZyA9IHRvU3RyaW5nO1xuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59O1xuLy8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGlzRnVuY3Rpb24oL3gvKSkge1xuICBleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbi8qIGVzbGludC1lbmFibGUgZnVuYy1zdHlsZSAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nIDogZmFsc2U7XG59O1xuXG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cblxuZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICB2YXIgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENvbnRleHRQYXRoKGNvbnRleHRQYXRoLCBpZCkge1xuICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDNWMGFXeHpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGQlFTeEpRVUZOTEUxQlFVMHNSMEZCUnp0QlFVTmlMRXRCUVVjc1JVRkJSU3hQUVVGUE8wRkJRMW9zUzBGQlJ5eEZRVUZGTEUxQlFVMDdRVUZEV0N4TFFVRkhMRVZCUVVVc1RVRkJUVHRCUVVOWUxFdEJRVWNzUlVGQlJTeFJRVUZSTzBGQlEySXNTMEZCUnl4RlFVRkZMRkZCUVZFN1FVRkRZaXhMUVVGSExFVkJRVVVzVVVGQlVUdEJRVU5pTEV0QlFVY3NSVUZCUlN4UlFVRlJPME5CUTJRc1EwRkJRenM3UVVGRlJpeEpRVUZOTEZGQlFWRXNSMEZCUnl4WlFVRlpPMGxCUTNaQ0xGRkJRVkVzUjBGQlJ5eFhRVUZYTEVOQlFVTTdPMEZCUlRkQ0xGTkJRVk1zVlVGQlZTeERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTjJRaXhUUVVGUExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0RFFVTndRanM3UVVGRlRTeFRRVUZUTEUxQlFVMHNRMEZCUXl4SFFVRkhMRzlDUVVGdFFqdEJRVU16UXl4UFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU42UXl4VFFVRkxMRWxCUVVrc1IwRkJSeXhKUVVGSkxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0QlFVTTFRaXhWUVVGSkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVN1FVRkRNMFFzVjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UFFVTTVRanRMUVVOR08wZEJRMFk3TzBGQlJVUXNVMEZCVHl4SFFVRkhMRU5CUVVNN1EwRkRXanM3UVVGRlRTeEpRVUZKTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF6czdPenM3TzBGQlMyaEVMRWxCUVVrc1ZVRkJWU3hIUVVGSExHOUNRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTXZRaXhUUVVGUExFOUJRVThzUzBGQlN5eExRVUZMTEZWQlFWVXNRMEZCUXp0RFFVTndReXhEUVVGRE96czdRVUZIUml4SlFVRkpMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU51UWl4VlFVbE5MRlZCUVZVc1IwRkthRUlzVlVGQlZTeEhRVUZITEZWQlFWTXNTMEZCU3l4RlFVRkZPMEZCUXpOQ0xGZEJRVThzVDBGQlR5eExRVUZMTEV0QlFVc3NWVUZCVlN4SlFVRkpMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NiVUpCUVcxQ0xFTkJRVU03UjBGRGNFWXNRMEZCUXp0RFFVTklPMUZCUTA4c1ZVRkJWU3hIUVVGV0xGVkJRVlU3T3pzN08wRkJTVmdzU1VGQlRTeFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1NVRkJTU3hWUVVGVExFdEJRVXNzUlVGQlJUdEJRVU4wUkN4VFFVRlBMRUZCUVVNc1MwRkJTeXhKUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNSMEZCU1N4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEdkQ1FVRm5RaXhIUVVGSExFdEJRVXNzUTBGQlF6dERRVU5xUnl4RFFVRkRPenM3T3p0QlFVZExMRk5CUVZNc1QwRkJUeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZEY0VNc1QwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOb1JDeFJRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhMUVVGTExFVkJRVVU3UVVGRGRFSXNZVUZCVHl4RFFVRkRMRU5CUVVNN1MwRkRWanRIUVVOR08wRkJRMFFzVTBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTllPenRCUVVkTkxGTkJRVk1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM1pETEUxQlFVa3NUMEZCVHl4TlFVRk5MRXRCUVVzc1VVRkJVU3hGUVVGRk96dEJRVVU1UWl4UlFVRkpMRTFCUVUwc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlF6TkNMR0ZCUVU4c1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzB0QlEzaENMRTFCUVUwc1NVRkJTU3hOUVVGTkxFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzcENMR0ZCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMWdzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTJ4Q0xHRkJRVThzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0TFFVTndRanM3T3pzN1FVRkxSQ3hWUVVGTkxFZEJRVWNzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXp0SFFVTjBRanM3UVVGRlJDeE5RVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdEJRVUZGTEZkQlFVOHNUVUZCVFN4RFFVRkRPMGRCUVVVN1FVRkRPVU1zVTBGQlR5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dERRVU0zUXpzN1FVRkZUU3hUUVVGVExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZETjBJc1RVRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeExRVUZMTEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUTNwQ0xGZEJRVThzU1VGQlNTeERRVUZETzBkQlEySXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVNdlF5eFhRVUZQTEVsQlFVa3NRMEZCUXp0SFFVTmlMRTFCUVUwN1FVRkRUQ3hYUVVGUExFdEJRVXNzUTBGQlF6dEhRVU5rTzBOQlEwWTdPMEZCUlUwc1UwRkJVeXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEyeERMRTFCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRMMElzVDBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRka0lzVTBGQlR5eExRVUZMTEVOQlFVTTdRMEZEWkRzN1FVRkZUU3hUUVVGVExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZPMEZCUTNaRExGRkJRVTBzUTBGQlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTJ4Q0xGTkJRVThzVFVGQlRTeERRVUZETzBOQlEyWTdPMEZCUlUwc1UwRkJVeXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRMnBFTEZOQlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1YwRkJWeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVRXNSMEZCU1N4RlFVRkZMRU5CUVVNN1EwRkRjRVFpTENKbWFXeGxJam9pZFhScGJITXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKamIyNXpkQ0JsYzJOaGNHVWdQU0I3WEc0Z0lDY21Kem9nSnlaaGJYQTdKeXhjYmlBZ0p6d25PaUFuSm14ME95Y3NYRzRnSUNjK0p6b2dKeVpuZERzbkxGeHVJQ0FuWENJbk9pQW5KbkYxYjNRN0p5eGNiaUFnWENJblhDSTZJQ2NtSTNneU56c25MRnh1SUNBbllDYzZJQ2NtSTNnMk1Ec25MRnh1SUNBblBTYzZJQ2NtSTNnelJEc25YRzU5TzF4dVhHNWpiMjV6ZENCaVlXUkRhR0Z5Y3lBOUlDOWJKancrWENJbllEMWRMMmNzWEc0Z0lDQWdJQ0J3YjNOemFXSnNaU0E5SUM5YkpqdytYQ0luWUQxZEx6dGNibHh1Wm5WdVkzUnBiMjRnWlhOallYQmxRMmhoY2loamFISXBJSHRjYmlBZ2NtVjBkWEp1SUdWelkyRndaVnRqYUhKZE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWlhoMFpXNWtLRzlpYWk4cUlDd2dMaTR1YzI5MWNtTmxJQ292S1NCN1hHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2EyVjVJR2x1SUdGeVozVnRaVzUwYzF0cFhTa2dlMXh1SUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoaGNtZDFiV1Z1ZEhOYmFWMHNJR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdiMkpxVzJ0bGVWMGdQU0JoY21kMWJXVnVkSE5iYVYxYmEyVjVYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdiMkpxTzF4dWZWeHVYRzVsZUhCdmNuUWdiR1YwSUhSdlUzUnlhVzVuSUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnp0Y2JseHVMeThnVTI5MWNtTmxaQ0JtY205dElHeHZaR0Z6YUZ4dUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMkpsYzNScFpXcHpMMnh2WkdGemFDOWliRzlpTDIxaGMzUmxjaTlNU1VORlRsTkZMblI0ZEZ4dUx5b2daWE5zYVc1MExXUnBjMkZpYkdVZ1puVnVZeTF6ZEhsc1pTQXFMMXh1YkdWMElHbHpSblZ1WTNScGIyNGdQU0JtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuWm5WdVkzUnBiMjRuTzF4dWZUdGNiaTh2SUdaaGJHeGlZV05ySUdadmNpQnZiR1JsY2lCMlpYSnphVzl1Y3lCdlppQkRhSEp2YldVZ1lXNWtJRk5oWm1GeWFWeHVMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNibWxtSUNocGMwWjFibU4wYVc5dUtDOTRMeWtwSUh0Y2JpQWdhWE5HZFc1amRHbHZiaUE5SUdaMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwYjFOMGNtbHVaeTVqWVd4c0tIWmhiSFZsS1NBOVBUMGdKMXR2WW1wbFkzUWdSblZ1WTNScGIyNWRKenRjYmlBZ2ZUdGNibjFjYm1WNGNHOXlkQ0I3YVhOR2RXNWpkR2x2Ym4wN1hHNHZLaUJsYzJ4cGJuUXRaVzVoWW14bElHWjFibU10YzNSNWJHVWdLaTljYmx4dUx5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYzBGeWNtRjVJRDBnUVhKeVlYa3VhWE5CY25KaGVTQjhmQ0JtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnS0haaGJIVmxJQ1ltSUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjI5aWFtVmpkQ2NwSUQ4Z2RHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa2dQVDA5SUNkYmIySnFaV04wSUVGeWNtRjVYU2NnT2lCbVlXeHpaVHRjYm4wN1hHNWNiaTh2SUU5c1pHVnlJRWxGSUhabGNuTnBiMjV6SUdSdklHNXZkQ0JrYVhKbFkzUnNlU0J6ZFhCd2IzSjBJR2x1WkdWNFQyWWdjMjhnZDJVZ2JYVnpkQ0JwYlhCc1pXMWxiblFnYjNWeUlHOTNiaXdnYzJGa2JIa3VYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzVrWlhoUFppaGhjbkpoZVN3Z2RtRnNkV1VwSUh0Y2JpQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHeGxiaUE5SUdGeWNtRjVMbXhsYm1kMGFEc2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnYVdZZ0tHRnljbUY1VzJsZElEMDlQU0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBdE1UdGNibjFjYmx4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1pYTmpZWEJsUlhod2NtVnpjMmx2YmloemRISnBibWNwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ6ZEhKcGJtY2dJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnTHk4Z1pHOXVKM1FnWlhOallYQmxJRk5oWm1WVGRISnBibWR6TENCemFXNWpaU0IwYUdWNUozSmxJR0ZzY21WaFpIa2djMkZtWlZ4dUlDQWdJR2xtSUNoemRISnBibWNnSmlZZ2MzUnlhVzVuTG5SdlNGUk5UQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSE4wY21sdVp5NTBiMGhVVFV3b0tUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tITjBjbWx1WnlBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSnljN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNnaGMzUnlhVzVuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzNSeWFXNW5JQ3NnSnljN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JtOXlZMlVnWVNCemRISnBibWNnWTI5dWRtVnljMmx2YmlCaGN5QjBhR2x6SUhkcGJHd2dZbVVnWkc5dVpTQmllU0IwYUdVZ1lYQndaVzVrSUhKbFoyRnlaR3hsYzNNZ1lXNWtYRzRnSUNBZ0x5OGdkR2hsSUhKbFoyVjRJSFJsYzNRZ2QybHNiQ0JrYnlCMGFHbHpJSFJ5WVc1emNHRnlaVzUwYkhrZ1ltVm9hVzVrSUhSb1pTQnpZMlZ1WlhNc0lHTmhkWE5wYm1jZ2FYTnpkV1Z6SUdsbVhHNGdJQ0FnTHk4Z1lXNGdiMkpxWldOMEozTWdkRzhnYzNSeWFXNW5JR2hoY3lCbGMyTmhjR1ZrSUdOb1lYSmhZM1JsY25NZ2FXNGdhWFF1WEc0Z0lDQWdjM1J5YVc1bklEMGdKeWNnS3lCemRISnBibWM3WEc0Z0lIMWNibHh1SUNCcFppQW9JWEJ2YzNOcFlteGxMblJsYzNRb2MzUnlhVzVuS1NrZ2V5QnlaWFIxY200Z2MzUnlhVzVuT3lCOVhHNGdJSEpsZEhWeWJpQnpkSEpwYm1jdWNtVndiR0ZqWlNoaVlXUkRhR0Z5Y3l3Z1pYTmpZWEJsUTJoaGNpazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMwVnRjSFI1S0haaGJIVmxLU0I3WEc0Z0lHbG1JQ2doZG1Gc2RXVWdKaVlnZG1Gc2RXVWdJVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnZlNCbGJITmxJR2xtSUNocGMwRnljbUY1S0haaGJIVmxLU0FtSmlCMllXeDFaUzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVVp5WVcxbEtHOWlhbVZqZENrZ2UxeHVJQ0JzWlhRZ1puSmhiV1VnUFNCbGVIUmxibVFvZTMwc0lHOWlhbVZqZENrN1hHNGdJR1p5WVcxbExsOXdZWEpsYm5RZ1BTQnZZbXBsWTNRN1hHNGdJSEpsZEhWeWJpQm1jbUZ0WlR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0pzYjJOclVHRnlZVzF6S0hCaGNtRnRjeXdnYVdSektTQjdYRzRnSUhCaGNtRnRjeTV3WVhSb0lEMGdhV1J6TzF4dUlDQnlaWFIxY200Z2NHRnlZVzF6TzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZWEJ3Wlc1a1EyOXVkR1Y0ZEZCaGRHZ29ZMjl1ZEdWNGRGQmhkR2dzSUdsa0tTQjdYRzRnSUhKbGRIVnliaUFvWTI5dWRHVjRkRkJoZEdnZ1B5QmpiMjUwWlhoMFVHRjBhQ0FySUNjdUp5QTZJQ2NuS1NBcklHbGtPMXh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnbWVzc2FnZScsICduYW1lJywgJ251bWJlcicsICdzdGFjayddO1xuXG5mdW5jdGlvbiBFeGNlcHRpb24obWVzc2FnZSwgbm9kZSkge1xuICB2YXIgbG9jID0gbm9kZSAmJiBub2RlLmxvYyxcbiAgICAgIGxpbmUgPSB1bmRlZmluZWQsXG4gICAgICBjb2x1bW4gPSB1bmRlZmluZWQ7XG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgY29sdW1uID0gbG9jLnN0YXJ0LmNvbHVtbjtcblxuICAgIG1lc3NhZ2UgKz0gJyAtICcgKyBsaW5lICsgJzonICsgY29sdW1uO1xuICB9XG5cbiAgdmFyIHRtcCA9IEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gIC8vIFVuZm9ydHVuYXRlbHkgZXJyb3JzIGFyZSBub3QgZW51bWVyYWJsZSBpbiBDaHJvbWUgKGF0IGxlYXN0KSwgc28gYGZvciBwcm9wIGluIHRtcGAgZG9lc24ndCB3b3JrLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzW2Vycm9yUHJvcHNbaWR4XV0gPSB0bXBbZXJyb3JQcm9wc1tpZHhdXTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEV4Y2VwdGlvbik7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChsb2MpIHtcbiAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmU7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBFeGNlcHRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJWNFkyVndkR2x2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPMEZCUTBFc1NVRkJUU3hWUVVGVkxFZEJRVWNzUTBGQlF5eGhRVUZoTEVWQlFVVXNWVUZCVlN4RlFVRkZMRmxCUVZrc1JVRkJSU3hUUVVGVExFVkJRVVVzVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenM3UVVGRmJrY3NVMEZCVXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUlVGQlJUdEJRVU5vUXl4TlFVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVYzdUVUZEZEVJc1NVRkJTU3haUVVGQk8wMUJRMG9zVFVGQlRTeFpRVUZCTEVOQlFVTTdRVUZEV0N4TlFVRkpMRWRCUVVjc1JVRkJSVHRCUVVOUUxGRkJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVOMFFpeFZRVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU03TzBGQlJURkNMRmRCUVU4c1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeEhRVUZITEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNN1IwRkRlRU03TzBGQlJVUXNUVUZCU1N4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6czdPMEZCUnpGRUxFOUJRVXNzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjc1IwRkJSeXhWUVVGVkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZPMEZCUTJoRUxGRkJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1IwRkRPVU03T3p0QlFVZEVMRTFCUVVrc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RlFVRkZPMEZCUXpOQ0xGTkJRVXNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdSMEZETVVNN08wRkJSVVFzVFVGQlNUdEJRVU5HTEZGQlFVa3NSMEZCUnl4RlFVRkZPMEZCUTFBc1ZVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdPenM3UVVGSmRrSXNWVUZCU1N4TlFVRk5MRU5CUVVNc1kwRkJZeXhGUVVGRk8wRkJRM3BDTEdOQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJUdEJRVU53UXl4bFFVRkxMRVZCUVVVc1RVRkJUVHRCUVVOaUxHOUNRVUZWTEVWQlFVVXNTVUZCU1R0VFFVTnFRaXhEUVVGRExFTkJRVU03VDBGRFNpeE5RVUZOTzBGQlEwd3NXVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03VDBGRGRFSTdTMEZEUmp0SFFVTkdMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3TzBkQlJXSTdRMEZEUmpzN1FVRkZSQ3hUUVVGVExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRU5CUVVNN08zRkNRVVZ1UWl4VFFVRlRJaXdpWm1sc1pTSTZJbVY0WTJWd2RHbHZiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklseHVZMjl1YzNRZ1pYSnliM0pRY205d2N5QTlJRnNuWkdWelkzSnBjSFJwYjI0bkxDQW5abWxzWlU1aGJXVW5MQ0FuYkdsdVpVNTFiV0psY2ljc0lDZHRaWE56WVdkbEp5d2dKMjVoYldVbkxDQW5iblZ0WW1WeUp5d2dKM04wWVdOckoxMDdYRzVjYm1aMWJtTjBhVzl1SUVWNFkyVndkR2x2YmlodFpYTnpZV2RsTENCdWIyUmxLU0I3WEc0Z0lHeGxkQ0JzYjJNZ1BTQnViMlJsSUNZbUlHNXZaR1V1Ykc5akxGeHVJQ0FnSUNBZ2JHbHVaU3hjYmlBZ0lDQWdJR052YkhWdGJqdGNiaUFnYVdZZ0tHeHZZeWtnZTF4dUlDQWdJR3hwYm1VZ1BTQnNiMk11YzNSaGNuUXViR2x1WlR0Y2JpQWdJQ0JqYjJ4MWJXNGdQU0JzYjJNdWMzUmhjblF1WTI5c2RXMXVPMXh1WEc0Z0lDQWdiV1Z6YzJGblpTQXJQU0FuSUMwZ0p5QXJJR3hwYm1VZ0t5QW5PaWNnS3lCamIyeDFiVzQ3WEc0Z0lIMWNibHh1SUNCc1pYUWdkRzF3SUQwZ1JYSnliM0l1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5d2diV1Z6YzJGblpTazdYRzVjYmlBZ0x5OGdWVzVtYjNKMGRXNWhkR1ZzZVNCbGNuSnZjbk1nWVhKbElHNXZkQ0JsYm5WdFpYSmhZbXhsSUdsdUlFTm9jbTl0WlNBb1lYUWdiR1ZoYzNRcExDQnpieUJnWm05eUlIQnliM0FnYVc0Z2RHMXdZQ0JrYjJWemJpZDBJSGR2Y21zdVhHNGdJR1p2Y2lBb2JHVjBJR2xrZUNBOUlEQTdJR2xrZUNBOElHVnljbTl5VUhKdmNITXViR1Z1WjNSb095QnBaSGdyS3lrZ2UxeHVJQ0FnSUhSb2FYTmJaWEp5YjNKUWNtOXdjMXRwWkhoZFhTQTlJSFJ0Y0Z0bGNuSnZjbEJ5YjNCelcybGtlRjFkTzF4dUlDQjlYRzVjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdhV1lnS0VWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLU0I3WEc0Z0lDQWdSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVb2RHaHBjeXdnUlhoalpYQjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lnS0d4dll5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1c2FXNWxUblZ0WW1WeUlEMGdiR2x1WlR0Y2JseHVJQ0FnSUNBZ0x5OGdWMjl5YXlCaGNtOTFibVFnYVhOemRXVWdkVzVrWlhJZ2MyRm1ZWEpwSUhkb1pYSmxJSGRsSUdOaGJpZDBJR1JwY21WamRHeDVJSE5sZENCMGFHVWdZMjlzZFcxdUlIWmhiSFZsWEc0Z0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTa2dlMXh1SUNBZ0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnSjJOdmJIVnRiaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1kyOXNkVzF1TEZ4dUlDQWdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJIVnRiaUE5SUdOdmJIVnRianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwZ1kyRjBZMmdnS0c1dmNDa2dlMXh1SUNBZ0lDOHFJRWxuYm05eVpTQnBaaUIwYUdVZ1luSnZkM05sY2lCcGN5QjJaWEo1SUhCaGNuUnBZM1ZzWVhJZ0tpOWNiaUFnZlZ4dWZWeHVYRzVGZUdObGNIUnBiMjR1Y0hKdmRHOTBlWEJsSUQwZ2JtVjNJRVZ5Y205eUtDazdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVY0WTJWd2RHbHZianRjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignYmxvY2tIZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKGNvbnRleHQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmbih0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIGlmIChfdXRpbHMuaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIHZhciBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLm5hbWUpO1xuICAgICAgICBvcHRpb25zID0geyBkYXRhOiBkYXRhIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZZbXh2WTJzdGFHVnNjR1Z5TFcxcGMzTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dHhRa0ZCYzBRc1ZVRkJWVHM3Y1VKQlJXcEVMRlZCUVZNc1VVRkJVU3hGUVVGRk8wRkJRMmhETEZWQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNWVUZCVXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRM1pGTEZGQlFVa3NUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUE8xRkJRM3BDTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVZ3UWl4UlFVRkpMRTlCUVU4c1MwRkJTeXhKUVVGSkxFVkJRVVU3UVVGRGNFSXNZVUZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGFrSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTXZReXhoUVVGUExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTjBRaXhOUVVGTkxFbEJRVWtzWlVGQlVTeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTXpRaXhWUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTNSQ0xGbEJRVWtzVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTm1MR2xDUVVGUExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRemxDT3p0QlFVVkVMR1ZCUVU4c1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wOUJRMmhFTEUxQlFVMDdRVUZEVEN4bFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFBRVU4wUWp0TFFVTkdMRTFCUVUwN1FVRkRUQ3hWUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVNdlFpeFpRVUZKTEVsQlFVa3NSMEZCUnl4dFFrRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEY2tNc1dVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eDVRa0ZCYTBJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRemRGTEdWQlFVOHNSMEZCUnl4RlFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVU1zUTBGQlF6dFBRVU40UWpzN1FVRkZSQ3hoUVVGUExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1MwRkROMEk3UjBGRFJpeERRVUZETEVOQlFVTTdRMEZEU2lJc0ltWnBiR1VpT2lKaWJHOWpheTFvWld4d1pYSXRiV2x6YzJsdVp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3WVhCd1pXNWtRMjl1ZEdWNGRGQmhkR2dzSUdOeVpXRjBaVVp5WVcxbExDQnBjMEZ5Y21GNWZTQm1jbTl0SUNjdUxpOTFkR2xzY3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUtHbHVjM1JoYm1ObEtTQjdYRzRnSUdsdWMzUmhibU5sTG5KbFoybHpkR1Z5U0dWc2NHVnlLQ2RpYkc5amEwaGxiSEJsY2sxcGMzTnBibWNuTENCbWRXNWpkR2x2YmloamIyNTBaWGgwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYkdWMElHbHVkbVZ5YzJVZ1BTQnZjSFJwYjI1ekxtbHVkbVZ5YzJVc1hHNGdJQ0FnSUNBZ0lHWnVJRDBnYjNCMGFXOXVjeTVtYmp0Y2JseHVJQ0FnSUdsbUlDaGpiMjUwWlhoMElEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNG9kR2hwY3lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamIyNTBaWGgwSUQwOVBTQm1ZV3h6WlNCOGZDQmpiMjUwWlhoMElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcGJuWmxjbk5sS0hSb2FYTXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5CY25KaGVTaGpiMjUwWlhoMEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVwWkhNcElIdGNiaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbWxrY3lBOUlGdHZjSFJwYjI1ekxtNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVjM1JoYm1ObExtaGxiSEJsY25NdVpXRmphQ2hqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBiblpsY25ObEtIUm9hWE1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWVhSaElDWW1JRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaElEMGdZM0psWVhSbFJuSmhiV1VvYjNCMGFXOXVjeTVrWVhSaEtUdGNiaUFnSUNBZ0lDQWdaR0YwWVM1amIyNTBaWGgwVUdGMGFDQTlJR0Z3Y0dWdVpFTnZiblJsZUhSUVlYUm9LRzl3ZEdsdmJuTXVaR0YwWVM1amIyNTBaWGgwVUdGMGFDd2diM0IwYVc5dWN5NXVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlIdGtZWFJoT2lCa1lYUmhmVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR1p1S0dOdmJuUmxlSFFzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5WEc0aVhYMD1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTXVzdCBwYXNzIGl0ZXJhdG9yIHRvICNlYWNoJyk7XG4gICAgfVxuXG4gICAgdmFyIGZuID0gb3B0aW9ucy5mbixcbiAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJldCA9ICcnLFxuICAgICAgICBkYXRhID0gdW5kZWZpbmVkLFxuICAgICAgICBjb250ZXh0UGF0aCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoX3V0aWxzLmlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgaW4gY29udGV4dCkge1xuICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByaW9yS2V5ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgaWYgKGNvbnRleHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgLy8gV2UncmUgcnVubmluZyB0aGUgaXRlcmF0aW9ucyBvbmUgc3RlcCBvdXQgb2Ygc3luYyBzbyB3ZSBjYW4gZGV0ZWN0XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBpdGVyYXRpb24gd2l0aG91dCBoYXZlIHRvIHNjYW4gdGhlIG9iamVjdCB0d2ljZSBhbmQgY3JlYXRlXG4gICAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJpb3JLZXkgPSBrZXk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdlpXRmphQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPM0ZDUVVFclJTeFZRVUZWT3p0NVFrRkRia1VzWTBGQll6czdPenR4UWtGRmNrSXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRhRU1zVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJVeXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlEzcEVMRkZCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRFdpeFpRVUZOTERKQ1FVRmpMRFpDUVVFMlFpeERRVUZETEVOQlFVTTdTMEZEY0VRN08wRkJSVVFzVVVGQlNTeEZRVUZGTEVkQlFVY3NUMEZCVHl4RFFVRkRMRVZCUVVVN1VVRkRaaXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVODdVVUZEZWtJc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRFRDeEhRVUZITEVkQlFVY3NSVUZCUlR0UlFVTlNMRWxCUVVrc1dVRkJRVHRSUVVOS0xGZEJRVmNzV1VGQlFTeERRVUZET3p0QlFVVm9RaXhSUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVNdlFpeHBRa0ZCVnl4SFFVRkhMSGxDUVVGclFpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRE8wdEJRMnBHT3p0QlFVVkVMRkZCUVVrc2EwSkJRVmNzVDBGQlR5eERRVUZETEVWQlFVVTdRVUZCUlN4aFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVRkZPenRCUVVVeFJDeFJRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRhRUlzVlVGQlNTeEhRVUZITEcxQ1FVRlpMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU5zUXpzN1FVRkZSQ3hoUVVGVExHRkJRV0VzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVONlF5eFZRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTlNMRmxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEycENMRmxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEyNUNMRmxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTjZRaXhaUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNN08wRkJSVzVDTEZsQlFVa3NWMEZCVnl4RlFVRkZPMEZCUTJZc1kwRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFhRVUZYTEVkQlFVY3NTMEZCU3l4RFFVRkRPMU5CUTNoRE8wOUJRMFk3TzBGQlJVUXNVMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUXpkQ0xGbEJRVWtzUlVGQlJTeEpRVUZKTzBGQlExWXNiVUpCUVZjc1JVRkJSU3h0UWtGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEZkQlFWY3NSMEZCUnl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03VDBGREwwVXNRMEZCUXl4RFFVRkRPMHRCUTBvN08wRkJSVVFzVVVGQlNTeFBRVUZQTEVsQlFVa3NUMEZCVHl4UFFVRlBMRXRCUVVzc1VVRkJVU3hGUVVGRk8wRkJRekZETEZWQlFVa3NaVUZCVVN4UFFVRlBMRU5CUVVNc1JVRkJSVHRCUVVOd1FpeGhRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOMlF5eGpRVUZKTEVOQlFVTXNTVUZCU1N4UFFVRlBMRVZCUVVVN1FVRkRhRUlzZVVKQlFXRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eFBRVUZQTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xZEJReTlETzFOQlEwWTdUMEZEUml4TlFVRk5PMEZCUTB3c1dVRkJTU3hSUVVGUkxGbEJRVUVzUTBGQlF6czdRVUZGWWl4aFFVRkxMRWxCUVVrc1IwRkJSeXhKUVVGSkxFOUJRVThzUlVGQlJUdEJRVU4yUWl4alFVRkpMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdPenM3UVVGSkwwSXNaMEpCUVVrc1VVRkJVU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU14UWl3eVFrRkJZU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkRhRU03UVVGRFJDeHZRa0ZCVVN4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVObUxHRkJRVU1zUlVGQlJTeERRVUZETzFkQlEwdzdVMEZEUmp0QlFVTkVMRmxCUVVrc1VVRkJVU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU14UWl4MVFrRkJZU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRM1JETzA5QlEwWTdTMEZEUmpzN1FVRkZSQ3hSUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEV0N4VFFVRkhMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlEzSkNPenRCUVVWRUxGZEJRVThzUjBGQlJ5eERRVUZETzBkQlExb3NRMEZCUXl4RFFVRkRPME5CUTBvaUxDSm1hV3hsSWpvaVpXRmphQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN1lYQndaVzVrUTI5dWRHVjRkRkJoZEdnc0lHSnNiMk5yVUdGeVlXMXpMQ0JqY21WaGRHVkdjbUZ0WlN3Z2FYTkJjbkpoZVN3Z2FYTkdkVzVqZEdsdmJuMGdabkp2YlNBbkxpNHZkWFJwYkhNbk8xeHVhVzF3YjNKMElFVjRZMlZ3ZEdsdmJpQm1jbTl0SUNjdUxpOWxlR05sY0hScGIyNG5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaWhwYm5OMFlXNWpaU2tnZTF4dUlDQnBibk4wWVc1alpTNXlaV2RwYzNSbGNraGxiSEJsY2lnblpXRmphQ2NzSUdaMWJtTjBhVzl1S0dOdmJuUmxlSFFzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KMDExYzNRZ2NHRnpjeUJwZEdWeVlYUnZjaUIwYnlBalpXRmphQ2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCbWJpQTlJRzl3ZEdsdmJuTXVabTRzWEc0Z0lDQWdJQ0FnSUdsdWRtVnljMlVnUFNCdmNIUnBiMjV6TG1sdWRtVnljMlVzWEc0Z0lDQWdJQ0FnSUdrZ1BTQXdMRnh1SUNBZ0lDQWdJQ0J5WlhRZ1BTQW5KeXhjYmlBZ0lDQWdJQ0FnWkdGMFlTeGNiaUFnSUNBZ0lDQWdZMjl1ZEdWNGRGQmhkR2c3WEc1Y2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1a1lYUmhJQ1ltSUc5d2RHbHZibk11YVdSektTQjdYRzRnSUNBZ0lDQmpiMjUwWlhoMFVHRjBhQ0E5SUdGd2NHVnVaRU52Ym5SbGVIUlFZWFJvS0c5d2RHbHZibk11WkdGMFlTNWpiMjUwWlhoMFVHRjBhQ3dnYjNCMGFXOXVjeTVwWkhOYk1GMHBJQ3NnSnk0bk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHBjMFoxYm1OMGFXOXVLR052Ym5SbGVIUXBLU0I3SUdOdmJuUmxlSFFnUFNCamIyNTBaWGgwTG1OaGJHd29kR2hwY3lrN0lIMWNibHh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbVJoZEdFcElIdGNiaUFnSUNBZ0lHUmhkR0VnUFNCamNtVmhkR1ZHY21GdFpTaHZjSFJwYjI1ekxtUmhkR0VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR1Y0WldOSmRHVnlZWFJwYjI0b1ptbGxiR1FzSUdsdVpHVjRMQ0JzWVhOMEtTQjdYRzRnSUNBZ0lDQnBaaUFvWkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0JrWVhSaExtdGxlU0E5SUdacFpXeGtPMXh1SUNBZ0lDQWdJQ0JrWVhSaExtbHVaR1Y0SUQwZ2FXNWtaWGc3WEc0Z0lDQWdJQ0FnSUdSaGRHRXVabWx5YzNRZ1BTQnBibVJsZUNBOVBUMGdNRHRjYmlBZ0lDQWdJQ0FnWkdGMFlTNXNZWE4wSUQwZ0lTRnNZWE4wTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjI1MFpYaDBVR0YwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1JoZEdFdVkyOXVkR1Y0ZEZCaGRHZ2dQU0JqYjI1MFpYaDBVR0YwYUNBcklHWnBaV3hrTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkQ0E5SUhKbGRDQXJJR1p1S0dOdmJuUmxlSFJiWm1sbGJHUmRMQ0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRTZJR1JoZEdFc1hHNGdJQ0FnSUNBZ0lHSnNiMk5yVUdGeVlXMXpPaUJpYkc5amExQmhjbUZ0Y3loYlkyOXVkR1Y0ZEZ0bWFXVnNaRjBzSUdacFpXeGtYU3dnVzJOdmJuUmxlSFJRWVhSb0lDc2dabWxsYkdRc0lHNTFiR3hkS1Z4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTnZiblJsZUhRZ0ppWWdkSGx3Wlc5bUlHTnZiblJsZUhRZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0JwWmlBb2FYTkJjbkpoZVNoamIyNTBaWGgwS1NrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnFJRDBnWTI5dWRHVjRkQzVzWlc1bmRHZzdJR2tnUENCcU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYVNCcGJpQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVHVmpTWFJsY21GMGFXOXVLR2tzSUdrc0lHa2dQVDA5SUdOdmJuUmxlSFF1YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2NISnBiM0pMWlhrN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhMlY1SUdsdUlHTnZiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1kyOXVkR1Y0ZEM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU2R5WlNCeWRXNXVhVzVuSUhSb1pTQnBkR1Z5WVhScGIyNXpJRzl1WlNCemRHVndJRzkxZENCdlppQnplVzVqSUhOdklIZGxJR05oYmlCa1pYUmxZM1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWlNCc1lYTjBJR2wwWlhKaGRHbHZiaUIzYVhSb2IzVjBJR2hoZG1VZ2RHOGdjMk5oYmlCMGFHVWdiMkpxWldOMElIUjNhV05sSUdGdVpDQmpjbVZoZEdWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGdUlHbDBaWEp0WldScFlYUmxJR3RsZVhNZ1lYSnlZWGt1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKcGIzSkxaWGtnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxlR1ZqU1hSbGNtRjBhVzl1S0hCeWFXOXlTMlY1TENCcElDMGdNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtbHZja3RsZVNBOUlHdGxlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHa3JLenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hCeWFXOXlTMlY1SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCbGVHVmpTWFJsY21GMGFXOXVLSEJ5YVc5eVMyVjVMQ0JwSUMwZ01Td2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwSUQwZ2FXNTJaWEp6WlNoMGFHbHpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNCOUtUdGNibjFjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbiAoKSAvKiBtZXNzYWdlLCBvcHRpb25zICove1xuICAgIHZhciBhcmdzID0gW3VuZGVmaW5lZF0sXG4gICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmJHOW5MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN2NVSkJRV1VzVlVGQlV5eFJRVUZSTEVWQlFVVTdRVUZEYUVNc1ZVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNhME5CUVdsRE8wRkJRemxFTEZGQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJRMnhDTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTVReXhUUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkROME1zVlVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU42UWpzN1FVRkZSQ3hSUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEWkN4UlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTTVRaXhYUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1MwRkROVUlzVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRWxCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNKRUxGZEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVNMVFqdEJRVU5FTEZGQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03TzBGQlJXaENMRmxCUVZFc1EwRkJReXhIUVVGSExFMUJRVUVzUTBGQldpeFJRVUZSTEVWQlFWTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRlRUlzUTBGQlF5eERRVUZETzBOQlEwb2lMQ0ptYVd4bElqb2liRzluTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMnh2Wnljc0lHWjFibU4wYVc5dUtDOHFJRzFsYzNOaFoyVXNJRzl3ZEdsdmJuTWdLaThwSUh0Y2JpQWdJQ0JzWlhRZ1lYSm5jeUE5SUZ0MWJtUmxabWx1WldSZExGeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdZWEpuZFcxbGJuUnpXMkZ5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4WFR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnTFNBeE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUdGeVozTXVjSFZ6YUNoaGNtZDFiV1Z1ZEhOYmFWMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JzWlhabGJDQTlJREU3WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk11YUdGemFDNXNaWFpsYkNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCc1pYWmxiQ0E5SUc5d2RHbHZibk11YUdGemFDNXNaWFpsYkR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c5d2RHbHZibk11WkdGMFlTQW1KaUJ2Y0hScGIyNXpMbVJoZEdFdWJHVjJaV3dnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnYkdWMlpXd2dQU0J2Y0hScGIyNXpMbVJoZEdFdWJHVjJaV3c3WEc0Z0lDQWdmVnh1SUNBZ0lHRnlaM05iTUYwZ1BTQnNaWFpsYkR0Y2JseHVJQ0FnSUdsdWMzUmhibU5sTG14dlp5Z3VMaTRnWVhKbmN5azdYRzRnSUgwcE8xeHVmVnh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoX3V0aWxzLmlzRnVuY3Rpb24oY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmICghX3V0aWxzLmlzRW1wdHkoY29udGV4dCkpIHtcbiAgICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGJsb2NrUGFyYW1zOiBfdXRpbHMuYmxvY2tQYXJhbXMoW2NvbnRleHRdLCBbZGF0YSAmJiBkYXRhLmNvbnRleHRQYXRoXSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmQybDBhQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08zRkNRVUVyUlN4VlFVRlZPenR4UWtGRk1VVXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRhRU1zVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJVeXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlEzcEVMRkZCUVVrc2EwSkJRVmNzVDBGQlR5eERRVUZETEVWQlFVVTdRVUZCUlN4aFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVRkZPenRCUVVVeFJDeFJRVUZKTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVZ3UWl4UlFVRkpMRU5CUVVNc1pVRkJVU3hQUVVGUExFTkJRVU1zUlVGQlJUdEJRVU55UWl4VlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEzaENMRlZCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzU1VGQlNTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUXk5Q0xGbEJRVWtzUjBGQlJ5eHRRa0ZCV1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGFrTXNXVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXg1UWtGQmEwSXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wOUJRMmhHT3p0QlFVVkVMR0ZCUVU4c1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJUdEJRVU5xUWl4WlFVRkpMRVZCUVVVc1NVRkJTVHRCUVVOV0xHMUNRVUZYTEVWQlFVVXNiVUpCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VDBGRGFFVXNRMEZCUXl4RFFVRkRPMHRCUTBvc1RVRkJUVHRCUVVOTUxHRkJRVThzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVNNVFqdEhRVU5HTEVOQlFVTXNRMEZCUXp0RFFVTktJaXdpWm1sc1pTSTZJbmRwZEdndWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdlMkZ3Y0dWdVpFTnZiblJsZUhSUVlYUm9MQ0JpYkc5amExQmhjbUZ0Y3l3Z1kzSmxZWFJsUm5KaGJXVXNJR2x6Ulcxd2RIa3NJR2x6Um5WdVkzUnBiMjU5SUdaeWIyMGdKeTR1TDNWMGFXeHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRvYVc1emRHRnVZMlVwSUh0Y2JpQWdhVzV6ZEdGdVkyVXVjbVZuYVhOMFpYSklaV3h3WlhJb0ozZHBkR2duTENCbWRXNWpkR2x2YmloamIyNTBaWGgwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tHbHpSblZ1WTNScGIyNG9ZMjl1ZEdWNGRDa3BJSHNnWTI5dWRHVjRkQ0E5SUdOdmJuUmxlSFF1WTJGc2JDaDBhR2x6S1RzZ2ZWeHVYRzRnSUNBZ2JHVjBJR1p1SUQwZ2IzQjBhVzl1Y3k1bWJqdGNibHh1SUNBZ0lHbG1JQ2doYVhORmJYQjBlU2hqYjI1MFpYaDBLU2tnZTF4dUlDQWdJQ0FnYkdWMElHUmhkR0VnUFNCdmNIUnBiMjV6TG1SaGRHRTdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWVhSaElDWW1JRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0VnUFNCamNtVmhkR1ZHY21GdFpTaHZjSFJwYjI1ekxtUmhkR0VwTzF4dUlDQWdJQ0FnSUNCa1lYUmhMbU52Ym5SbGVIUlFZWFJvSUQwZ1lYQndaVzVrUTI5dWRHVjRkRkJoZEdnb2IzQjBhVzl1Y3k1a1lYUmhMbU52Ym5SbGVIUlFZWFJvTENCdmNIUnBiMjV6TG1sa2Mxc3dYU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmloamIyNTBaWGgwTENCN1hHNGdJQ0FnSUNBZ0lHUmhkR0U2SUdSaGRHRXNYRzRnSUNBZ0lDQWdJR0pzYjJOclVHRnlZVzF6T2lCaWJHOWphMUJoY21GdGN5aGJZMjl1ZEdWNGRGMHNJRnRrWVhSaElDWW1JR1JoZEdFdVkyOXVkR1Y0ZEZCaGRHaGRLVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdmNIUnBiMjV6TG1sdWRtVnljMlVvZEdocGN5azdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbiAoZm4sIHByb3BzLCBjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgcmV0ID0gZm47XG4gICAgaWYgKCFwcm9wcy5wYXJ0aWFscykge1xuICAgICAgcHJvcHMucGFydGlhbHMgPSB7fTtcbiAgICAgIHJldCA9IGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYXJ0aWFscyBzdGFjayBmcmFtZSBwcmlvciB0byBleGVjLlxuICAgICAgICB2YXIgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IF91dGlscy5leHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIHZhciByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyUmxZMjl5WVhSdmNuTXZhVzVzYVc1bExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3Y1VKQlFYRkNMRlZCUVZVN08zRkNRVVZvUWl4VlFVRlRMRkZCUVZFc1JVRkJSVHRCUVVOb1F5eFZRVUZSTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFWTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlF6TkZMRkZCUVVrc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5pTEZGQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRMjVDTEZkQlFVc3NRMEZCUXl4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM0JDTEZOQlFVY3NSMEZCUnl4VlFVRlRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVU3TzBGQlJTOUNMRmxCUVVrc1VVRkJVU3hIUVVGSExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTTdRVUZEYkVNc2FVSkJRVk1zUTBGQlF5eFJRVUZSTEVkQlFVY3NZMEZCVHl4RlFVRkZMRVZCUVVVc1VVRkJVU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3haUVVGSkxFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJReTlDTEdsQ1FVRlRMRU5CUVVNc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF6dEJRVU01UWl4bFFVRlBMRWRCUVVjc1EwRkJRenRQUVVOYUxFTkJRVU03UzBGRFNEczdRVUZGUkN4VFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVUZET3p0QlFVVTNReXhYUVVGUExFZEJRVWNzUTBGQlF6dEhRVU5hTEVOQlFVTXNRMEZCUXp0RFFVTktJaXdpWm1sc1pTSTZJbWx1YkdsdVpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3WlhoMFpXNWtmU0JtY205dElDY3VMaTkxZEdsc2N5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVLR2x1YzNSaGJtTmxLU0I3WEc0Z0lHbHVjM1JoYm1ObExuSmxaMmx6ZEdWeVJHVmpiM0poZEc5eUtDZHBibXhwYm1VbkxDQm1kVzVqZEdsdmJpaG1iaXdnY0hKdmNITXNJR052Ym5SaGFXNWxjaXdnYjNCMGFXOXVjeWtnZTF4dUlDQWdJR3hsZENCeVpYUWdQU0JtYmp0Y2JpQWdJQ0JwWmlBb0lYQnliM0J6TG5CaGNuUnBZV3h6S1NCN1hHNGdJQ0FnSUNCd2NtOXdjeTV3WVhKMGFXRnNjeUE5SUh0OU8xeHVJQ0FnSUNBZ2NtVjBJRDBnWm5WdVkzUnBiMjRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkRjbVZoZEdVZ1lTQnVaWGNnY0dGeWRHbGhiSE1nYzNSaFkyc2dabkpoYldVZ2NISnBiM0lnZEc4Z1pYaGxZeTVjYmlBZ0lDQWdJQ0FnYkdWMElHOXlhV2RwYm1Gc0lEMGdZMjl1ZEdGcGJtVnlMbkJoY25ScFlXeHpPMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1nUFNCbGVIUmxibVFvZTMwc0lHOXlhV2RwYm1Gc0xDQndjbTl3Y3k1d1lYSjBhV0ZzY3lrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5WlhRZ1BTQm1iaWhqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TG5CaGNuUnBZV3h6SUQwZ2IzSnBaMmx1WVd3N1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIQnliM0J6TG5CaGNuUnBZV3h6VzI5d2RHbHZibk11WVhKbmMxc3dYVjBnUFNCdmNIUnBiMjV6TG1adU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnZlNrN1hHNTlYRzRpWFgwPVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgbG9nZ2VyID0ge1xuICBtZXRob2RNYXA6IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ10sXG4gIGxldmVsOiAnaW5mbycsXG5cbiAgLy8gTWFwcyBhIGdpdmVuIGxldmVsIHZhbHVlIHRvIHRoZSBgbWV0aG9kTWFwYCBpbmRleGVzIGFib3ZlLlxuICBsb29rdXBMZXZlbDogZnVuY3Rpb24gbG9va3VwTGV2ZWwobGV2ZWwpIHtcbiAgICBpZiAodHlwZW9mIGxldmVsID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGxldmVsTWFwID0gX3V0aWxzLmluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAobGV2ZWxNYXAgPj0gMCkge1xuICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWwgPSBwYXJzZUludChsZXZlbCwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfSxcblxuICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudFxuICBsb2c6IGZ1bmN0aW9uIGxvZyhsZXZlbCkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcbiAgICAgIHZhciBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lc3NhZ2UgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIG1lc3NhZ2VbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlW21ldGhvZF0uYXBwbHkoY29uc29sZSwgbWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gbG9nZ2VyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyeHZaMmRsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPM0ZDUVVGelFpeFRRVUZUT3p0QlFVVXZRaXhKUVVGSkxFMUJRVTBzUjBGQlJ6dEJRVU5ZTEZkQlFWTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXp0QlFVTTNReXhQUVVGTExFVkJRVVVzVFVGQlRUczdPMEZCUjJJc1lVRkJWeXhGUVVGRkxIRkNRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTXpRaXhSUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNSVUZCUlR0QlFVTTNRaXhWUVVGSkxGRkJRVkVzUjBGQlJ5eGxRVUZSTEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1MwRkJTeXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZET1VRc1ZVRkJTU3hSUVVGUkxFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlEycENMR0ZCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU03VDBGRGJFSXNUVUZCVFR0QlFVTk1MR0ZCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMDlCUXpkQ08wdEJRMFk3TzBGQlJVUXNWMEZCVHl4TFFVRkxMRU5CUVVNN1IwRkRaRHM3TzBGQlIwUXNTMEZCUnl4RlFVRkZMR0ZCUVZNc1MwRkJTeXhGUVVGak8wRkJReTlDTEZOQlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVnNReXhSUVVGSkxFOUJRVThzVDBGQlR5eExRVUZMTEZkQlFWY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMRVZCUVVVN1FVRkRMMFVzVlVGQlNTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU55UXl4VlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGT3p0QlFVTndRaXhqUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzA5QlEyaENPenQzUTBGUWJVSXNUMEZCVHp0QlFVRlFMR1ZCUVU4N096dEJRVkV6UWl4aFFVRlBMRU5CUVVNc1RVRkJUU3hQUVVGRExFTkJRV1lzVDBGQlR5eEZRVUZaTEU5QlFVOHNRMEZCUXl4RFFVRkRPMHRCUXpkQ08wZEJRMFk3UTBGRFJpeERRVUZET3p0eFFrRkZZU3hOUVVGTklpd2labWxzWlNJNklteHZaMmRsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdhVzVrWlhoUFpuMGdabkp2YlNBbkxpOTFkR2xzY3ljN1hHNWNibXhsZENCc2IyZG5aWElnUFNCN1hHNGdJRzFsZEdodlpFMWhjRG9nV3lka1pXSjFaeWNzSUNkcGJtWnZKeXdnSjNkaGNtNG5MQ0FuWlhKeWIzSW5YU3hjYmlBZ2JHVjJaV3c2SUNkcGJtWnZKeXhjYmx4dUlDQXZMeUJOWVhCeklHRWdaMmwyWlc0Z2JHVjJaV3dnZG1Gc2RXVWdkRzhnZEdobElHQnRaWFJvYjJSTllYQmdJR2x1WkdWNFpYTWdZV0p2ZG1VdVhHNGdJR3h2YjJ0MWNFeGxkbVZzT2lCbWRXNWpkR2x2Ymloc1pYWmxiQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYkdWMlpXd2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCc1pYUWdiR1YyWld4TllYQWdQU0JwYm1SbGVFOW1LR3h2WjJkbGNpNXRaWFJvYjJSTllYQXNJR3hsZG1Wc0xuUnZURzkzWlhKRFlYTmxLQ2twTzF4dUlDQWdJQ0FnYVdZZ0tHeGxkbVZzVFdGd0lENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjJaV3dnUFNCc1pYWmxiRTFoY0R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUd4bGRtVnNJRDBnY0dGeWMyVkpiblFvYkdWMlpXd3NJREV3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiR1YyWld3N1hHNGdJSDBzWEc1Y2JpQWdMeThnUTJGdUlHSmxJRzkyWlhKeWFXUmtaVzRnYVc0Z2RHaGxJR2h2YzNRZ1pXNTJhWEp2Ym0xbGJuUmNiaUFnYkc5bk9pQm1kVzVqZEdsdmJpaHNaWFpsYkN3Z0xpNHViV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkbVZzSUQwZ2JHOW5aMlZ5TG14dmIydDFjRXhsZG1Wc0tHeGxkbVZzS1R0Y2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyOXVjMjlzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2JHOW5aMlZ5TG14dmIydDFjRXhsZG1Wc0tHeHZaMmRsY2k1c1pYWmxiQ2tnUEQwZ2JHVjJaV3dwSUh0Y2JpQWdJQ0FnSUd4bGRDQnRaWFJvYjJRZ1BTQnNiMmRuWlhJdWJXVjBhRzlrVFdGd1cyeGxkbVZzWFR0Y2JpQWdJQ0FnSUdsbUlDZ2hZMjl1YzI5c1pWdHRaWFJvYjJSZEtTQjdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ0lDQWdJRzFsZEdodlpDQTlJQ2RzYjJjbk8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyOXVjMjlzWlZ0dFpYUm9iMlJkS0M0dUxtMWxjM05oWjJVcE95QWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMV052Ym5OdmJHVmNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHeHZaMmRsY2p0Y2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLkhhbmRsZWJhcnNFbnZpcm9ubWVudCA9IEhhbmRsZWJhcnNFbnZpcm9ubWVudDtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxudmFyIF9kZWNvcmF0b3JzID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzJyk7XG5cbnZhciBfbG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxudmFyIFZFUlNJT04gPSAnNC4wLjEwJztcbmV4cG9ydHMuVkVSU0lPTiA9IFZFUlNJT047XG52YXIgQ09NUElMRVJfUkVWSVNJT04gPSA3O1xuXG5leHBvcnRzLkNPTVBJTEVSX1JFVklTSU9OID0gQ09NUElMRVJfUkVWSVNJT047XG52YXIgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcbiAgMjogJz09IDEuMC4wLXJjLjMnLFxuICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gIDQ6ICc9PSAxLngueCcsXG4gIDU6ICc9PSAyLjAuMC1hbHBoYS54JyxcbiAgNjogJz49IDIuMC4wLWJldGEuMScsXG4gIDc6ICc+PSA0LjAuMCdcbn07XG5cbmV4cG9ydHMuUkVWSVNJT05fQ0hBTkdFUyA9IFJFVklTSU9OX0NIQU5HRVM7XG52YXIgb2JqZWN0VHlwZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5mdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIF9oZWxwZXJzLnJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIF9kZWNvcmF0b3JzLnJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBfbG9nZ2VyMlsnZGVmYXVsdCddLFxuICBsb2c6IF9sb2dnZXIyWydkZWZhdWx0J10ubG9nLFxuXG4gIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiByZWdpc3RlckhlbHBlcihuYW1lLCBmbikge1xuICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTtcbiAgICAgIH1cbiAgICAgIF91dGlscy5leHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVySGVscGVyKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gcmVnaXN0ZXJQYXJ0aWFsKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIF91dGlscy5leHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0F0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIicgKyBuYW1lICsgJ1wiIGFzIHVuZGVmaW5lZCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJ0aWFsc1tuYW1lXSA9IHBhcnRpYWw7XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gdW5yZWdpc3RlclBhcnRpYWwobmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLnBhcnRpYWxzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiByZWdpc3RlckRlY29yYXRvcihuYW1lLCBmbikge1xuICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTtcbiAgICAgIH1cbiAgICAgIF91dGlscy5leHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiB1bnJlZ2lzdGVyRGVjb3JhdG9yKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuICB9XG59O1xuXG52YXIgbG9nID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXS5sb2c7XG5cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5jcmVhdGVGcmFtZSA9IF91dGlscy5jcmVhdGVGcmFtZTtcbmV4cG9ydHMubG9nZ2VyID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJKaGMyVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdjVUpCUVRSRExGTkJRVk03TzNsQ1FVTXZRaXhoUVVGaE96czdPM1ZDUVVORkxGZEJRVmM3T3pCQ1FVTlNMR05CUVdNN08zTkNRVU51UXl4VlFVRlZPenM3TzBGQlJYUkNMRWxCUVUwc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF6czdRVUZEZWtJc1NVRkJUU3hwUWtGQmFVSXNSMEZCUnl4RFFVRkRMRU5CUVVNN096dEJRVVUxUWl4SlFVRk5MR2RDUVVGblFpeEhRVUZITzBGQlF6bENMRWRCUVVNc1JVRkJSU3hoUVVGaE8wRkJRMmhDTEVkQlFVTXNSVUZCUlN4bFFVRmxPMEZCUTJ4Q0xFZEJRVU1zUlVGQlJTeGxRVUZsTzBGQlEyeENMRWRCUVVNc1JVRkJSU3hWUVVGVk8wRkJRMklzUjBGQlF5eEZRVUZGTEd0Q1FVRnJRanRCUVVOeVFpeEhRVUZETEVWQlFVVXNhVUpCUVdsQ08wRkJRM0JDTEVkQlFVTXNSVUZCUlN4VlFVRlZPME5CUTJRc1EwRkJRenM3TzBGQlJVWXNTVUZCVFN4VlFVRlZMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdPMEZCUlRsQ0xGTkJRVk1zY1VKQlFYRkNMRU5CUVVNc1QwRkJUeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFZRVUZWTEVWQlFVVTdRVUZEYmtVc1RVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVsQlFVa3NSVUZCUlN4RFFVRkRPMEZCUXpkQ0xFMUJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NVVUZCVVN4SlFVRkpMRVZCUVVVc1EwRkJRenRCUVVNdlFpeE5RVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRlZCUVZVc1NVRkJTU3hGUVVGRkxFTkJRVU03TzBGQlJXNURMR3REUVVGMVFpeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTTNRaXgzUTBGQk1FSXNTVUZCU1N4RFFVRkRMRU5CUVVNN1EwRkRha003TzBGQlJVUXNjVUpCUVhGQ0xFTkJRVU1zVTBGQlV5eEhRVUZITzBGQlEyaERMR0ZCUVZjc1JVRkJSU3h4UWtGQmNVSTdPMEZCUld4RExGRkJRVTBzY1VKQlFWRTdRVUZEWkN4TFFVRkhMRVZCUVVVc2IwSkJRVThzUjBGQlJ6czdRVUZGWml4blFrRkJZeXhGUVVGRkxIZENRVUZUTEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVN1FVRkRha01zVVVGQlNTeG5Ra0ZCVXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzVlVGQlZTeEZRVUZGTzBGQlEzUkRMRlZCUVVrc1JVRkJSU3hGUVVGRk8wRkJRVVVzWTBGQlRTd3lRa0ZCWXl4NVEwRkJlVU1zUTBGQlF5eERRVUZETzA5QlFVVTdRVUZETTBVc2IwSkJRVThzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVNMVFpeE5RVUZOTzBGQlEwd3NWVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdTMEZEZWtJN1IwRkRSanRCUVVORUxHdENRVUZuUWl4RlFVRkZMREJDUVVGVExFbEJRVWtzUlVGQlJUdEJRVU12UWl4WFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdSMEZETTBJN08wRkJSVVFzYVVKQlFXVXNSVUZCUlN4NVFrRkJVeXhKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlEzWkRMRkZCUVVrc1owSkJRVk1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRlZCUVZVc1JVRkJSVHRCUVVOMFF5eHZRa0ZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzB0QlF6ZENMRTFCUVUwN1FVRkRUQ3hWUVVGSkxFOUJRVThzVDBGQlR5eExRVUZMTEZkQlFWY3NSVUZCUlR0QlFVTnNReXhqUVVGTkxIbEZRVUV3UkN4SlFVRkpMRzlDUVVGcFFpeERRVUZETzA5QlEzWkdPMEZCUTBRc1ZVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNN1MwRkRMMEk3UjBGRFJqdEJRVU5FTEcxQ1FVRnBRaXhGUVVGRkxESkNRVUZUTEVsQlFVa3NSVUZCUlR0QlFVTm9ReXhYUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkROVUk3TzBGQlJVUXNiVUpCUVdsQ0xFVkJRVVVzTWtKQlFWTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVOd1F5eFJRVUZKTEdkQ1FVRlRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eFZRVUZWTEVWQlFVVTdRVUZEZEVNc1ZVRkJTU3hGUVVGRkxFVkJRVVU3UVVGQlJTeGpRVUZOTERKQ1FVRmpMRFJEUVVFMFF5eERRVUZETEVOQlFVTTdUMEZCUlR0QlFVTTVSU3h2UWtGQlR5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJReTlDTEUxQlFVMDdRVUZEVEN4VlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0TFFVTTFRanRIUVVOR08wRkJRMFFzY1VKQlFXMUNMRVZCUVVVc05rSkJRVk1zU1VGQlNTeEZRVUZGTzBGQlEyeERMRmRCUVU4c1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SFFVTTVRanREUVVOR0xFTkJRVU03TzBGQlJVc3NTVUZCU1N4SFFVRkhMRWRCUVVjc2IwSkJRVThzUjBGQlJ5eERRVUZET3pzN1VVRkZjRUlzVjBGQlZ6dFJRVUZGTEUxQlFVMGlMQ0ptYVd4bElqb2lZbUZ6WlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdZM0psWVhSbFJuSmhiV1VzSUdWNGRHVnVaQ3dnZEc5VGRISnBibWQ5SUdaeWIyMGdKeTR2ZFhScGJITW5PMXh1YVcxd2IzSjBJRVY0WTJWd2RHbHZiaUJtY205dElDY3VMMlY0WTJWd2RHbHZiaWM3WEc1cGJYQnZjblFnZTNKbFoybHpkR1Z5UkdWbVlYVnNkRWhsYkhCbGNuTjlJR1p5YjIwZ0p5NHZhR1ZzY0dWeWN5YzdYRzVwYlhCdmNuUWdlM0psWjJsemRHVnlSR1ZtWVhWc2RFUmxZMjl5WVhSdmNuTjlJR1p5YjIwZ0p5NHZaR1ZqYjNKaGRHOXljeWM3WEc1cGJYQnZjblFnYkc5bloyVnlJR1p5YjIwZ0p5NHZiRzluWjJWeUp6dGNibHh1Wlhod2IzSjBJR052Ym5OMElGWkZVbE5KVDA0Z1BTQW5OQzR3TGpFd0p6dGNibVY0Y0c5eWRDQmpiMjV6ZENCRFQwMVFTVXhGVWw5U1JWWkpVMGxQVGlBOUlEYzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlNSVlpKVTBsUFRsOURTRUZPUjBWVElEMGdlMXh1SUNBeE9pQW5QRDBnTVM0d0xuSmpMakluTENBdkx5QXhMakF1Y21NdU1pQnBjeUJoWTNSMVlXeHNlU0J5WlhZeUlHSjFkQ0JrYjJWemJpZDBJSEpsY0c5eWRDQnBkRnh1SUNBeU9pQW5QVDBnTVM0d0xqQXRjbU11TXljc1hHNGdJRE02SUNjOVBTQXhMakF1TUMxeVl5NDBKeXhjYmlBZ05Eb2dKejA5SURFdWVDNTRKeXhjYmlBZ05Ub2dKejA5SURJdU1DNHdMV0ZzY0doaExuZ25MRnh1SUNBMk9pQW5QajBnTWk0d0xqQXRZbVYwWVM0eEp5eGNiaUFnTnpvZ0p6NDlJRFF1TUM0d0oxeHVmVHRjYmx4dVkyOXVjM1FnYjJKcVpXTjBWSGx3WlNBOUlDZGJiMkpxWldOMElFOWlhbVZqZEYwbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdTR0Z1Wkd4bFltRnljMFZ1ZG1seWIyNXRaVzUwS0dobGJIQmxjbk1zSUhCaGNuUnBZV3h6TENCa1pXTnZjbUYwYjNKektTQjdYRzRnSUhSb2FYTXVhR1ZzY0dWeWN5QTlJR2hsYkhCbGNuTWdmSHdnZTMwN1hHNGdJSFJvYVhNdWNHRnlkR2xoYkhNZ1BTQndZWEowYVdGc2N5QjhmQ0I3ZlR0Y2JpQWdkR2hwY3k1a1pXTnZjbUYwYjNKeklEMGdaR1ZqYjNKaGRHOXljeUI4ZkNCN2ZUdGNibHh1SUNCeVpXZHBjM1JsY2tSbFptRjFiSFJJWld4d1pYSnpLSFJvYVhNcE8xeHVJQ0J5WldkcGMzUmxja1JsWm1GMWJIUkVaV052Y21GMGIzSnpLSFJvYVhNcE8xeHVmVnh1WEc1SVlXNWtiR1ZpWVhKelJXNTJhWEp2Ym0xbGJuUXVjSEp2ZEc5MGVYQmxJRDBnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjam9nU0dGdVpHeGxZbUZ5YzBWdWRtbHliMjV0Wlc1MExGeHVYRzRnSUd4dloyZGxjam9nYkc5bloyVnlMRnh1SUNCc2IyYzZJR3h2WjJkbGNpNXNiMmNzWEc1Y2JpQWdjbVZuYVhOMFpYSklaV3h3WlhJNklHWjFibU4wYVc5dUtHNWhiV1VzSUdadUtTQjdYRzRnSUNBZ2FXWWdLSFJ2VTNSeWFXNW5MbU5oYkd3b2JtRnRaU2tnUFQwOUlHOWlhbVZqZEZSNWNHVXBJSHRjYmlBZ0lDQWdJR2xtSUNobWJpa2dleUIwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkQmNtY2dibTkwSUhOMWNIQnZjblJsWkNCM2FYUm9JRzExYkhScGNHeGxJR2hsYkhCbGNuTW5LVHNnZlZ4dUlDQWdJQ0FnWlhoMFpXNWtLSFJvYVhNdWFHVnNjR1Z5Y3l3Z2JtRnRaU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11YUdWc2NHVnljMXR1WVcxbFhTQTlJR1p1TzF4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnZFc1eVpXZHBjM1JsY2tobGJIQmxjam9nWm5WdVkzUnBiMjRvYm1GdFpTa2dlMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbWhsYkhCbGNuTmJibUZ0WlYwN1hHNGdJSDBzWEc1Y2JpQWdjbVZuYVhOMFpYSlFZWEowYVdGc09pQm1kVzVqZEdsdmJpaHVZVzFsTENCd1lYSjBhV0ZzS1NCN1hHNGdJQ0FnYVdZZ0tIUnZVM1J5YVc1bkxtTmhiR3dvYm1GdFpTa2dQVDA5SUc5aWFtVmpkRlI1Y0dVcElIdGNiaUFnSUNBZ0lHVjRkR1Z1WkNoMGFHbHpMbkJoY25ScFlXeHpMQ0J1WVcxbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd1lYSjBhV0ZzSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtHQkJkSFJsYlhCMGFXNW5JSFJ2SUhKbFoybHpkR1Z5SUdFZ2NHRnlkR2xoYkNCallXeHNaV1FnWENJa2UyNWhiV1Y5WENJZ1lYTWdkVzVrWldacGJtVmtZQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxuQmhjblJwWVd4elcyNWhiV1ZkSUQwZ2NHRnlkR2xoYkR0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhWdWNtVm5hWE4wWlhKUVlYSjBhV0ZzT2lCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11Y0dGeWRHbGhiSE5iYm1GdFpWMDdYRzRnSUgwc1hHNWNiaUFnY21WbmFYTjBaWEpFWldOdmNtRjBiM0k2SUdaMWJtTjBhVzl1S0c1aGJXVXNJR1p1S1NCN1hHNGdJQ0FnYVdZZ0tIUnZVM1J5YVc1bkxtTmhiR3dvYm1GdFpTa2dQVDA5SUc5aWFtVmpkRlI1Y0dVcElIdGNiaUFnSUNBZ0lHbG1JQ2htYmlrZ2V5QjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2RCY21jZ2JtOTBJSE4xY0hCdmNuUmxaQ0IzYVhSb0lHMTFiSFJwY0d4bElHUmxZMjl5WVhSdmNuTW5LVHNnZlZ4dUlDQWdJQ0FnWlhoMFpXNWtLSFJvYVhNdVpHVmpiM0poZEc5eWN5d2dibUZ0WlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVpHVmpiM0poZEc5eWMxdHVZVzFsWFNBOUlHWnVPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdkVzV5WldkcGMzUmxja1JsWTI5eVlYUnZjam9nWm5WdVkzUnBiMjRvYm1GdFpTa2dlMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbVJsWTI5eVlYUnZjbk5iYm1GdFpWMDdYRzRnSUgxY2JuMDdYRzVjYm1WNGNHOXlkQ0JzWlhRZ2JHOW5JRDBnYkc5bloyVnlMbXh2Wnp0Y2JseHVaWGh3YjNKMElIdGpjbVZoZEdWR2NtRnRaU3dnYkc5bloyVnlmVHRjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY2hlY2tSZXZpc2lvbiA9IGNoZWNrUmV2aXNpb247XG5leHBvcnRzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG5leHBvcnRzLndyYXBQcm9ncmFtID0gd3JhcFByb2dyYW07XG5leHBvcnRzLnJlc29sdmVQYXJ0aWFsID0gcmVzb2x2ZVBhcnRpYWw7XG5leHBvcnRzLmludm9rZVBhcnRpYWwgPSBpbnZva2VQYXJ0aWFsO1xuZXhwb3J0cy5ub29wID0gbm9vcDtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIFV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3V0aWxzKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG52YXIgX2Jhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxuZnVuY3Rpb24gY2hlY2tSZXZpc2lvbihjb21waWxlckluZm8pIHtcbiAgdmFyIGNvbXBpbGVyUmV2aXNpb24gPSBjb21waWxlckluZm8gJiYgY29tcGlsZXJJbmZvWzBdIHx8IDEsXG4gICAgICBjdXJyZW50UmV2aXNpb24gPSBfYmFzZS5DT01QSUxFUl9SRVZJU0lPTjtcblxuICBpZiAoY29tcGlsZXJSZXZpc2lvbiAhPT0gY3VycmVudFJldmlzaW9uKSB7XG4gICAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBjdXJyZW50UmV2aXNpb24pIHtcbiAgICAgIHZhciBydW50aW1lVmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW2N1cnJlbnRSZXZpc2lvbl0sXG4gICAgICAgICAgY29tcGlsZXJWZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbY29tcGlsZXJSZXZpc2lvbl07XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRlbXBsYXRlKHRlbXBsYXRlU3BlYywgZW52KSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICghZW52KSB7XG4gICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ05vIGVudmlyb25tZW50IHBhc3NlZCB0byB0ZW1wbGF0ZScpO1xuICB9XG4gIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmtub3duIHRlbXBsYXRlIG9iamVjdDogJyArIHR5cGVvZiB0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgdGVtcGxhdGVTcGVjLm1haW4uZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjLm1haW5fZDtcblxuICAvLyBOb3RlOiBVc2luZyBlbnYuVk0gcmVmZXJlbmNlcyByYXRoZXIgdGhhbiBsb2NhbCB2YXIgcmVmZXJlbmNlcyB0aHJvdWdob3V0IHRoaXMgc2VjdGlvbiB0byBhbGxvd1xuICAvLyBmb3IgZXh0ZXJuYWwgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlc2UgYXMgcHN1ZWRvLXN1cHBvcnRlZCBBUElzLlxuICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXG4gIGZ1bmN0aW9uIGludm9rZVBhcnRpYWxXcmFwcGVyKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xuICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIG9wdGlvbnMuaWRzWzBdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJ0aWFsID0gZW52LlZNLnJlc29sdmVQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG4gICAgdmFyIHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG5cbiAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgZW52LmNvbXBpbGUpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXSA9IGVudi5jb21waWxlKHBhcnRpYWwsIHRlbXBsYXRlU3BlYy5jb21waWxlck9wdGlvbnMsIGVudik7XG4gICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XG4gICAgICAgIHZhciBsaW5lcyA9IHJlc3VsdC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFsaW5lc1tpXSAmJiBpICsgMSA9PT0gbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnKTtcbiAgICB9XG4gIH1cblxuICAvLyBKdXN0IGFkZCB3YXRlclxuICB2YXIgY29udGFpbmVyID0ge1xuICAgIHN0cmljdDogZnVuY3Rpb24gc3RyaWN0KG9iaiwgbmFtZSkge1xuICAgICAgaWYgKCEobmFtZSBpbiBvYmopKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdcIicgKyBuYW1lICsgJ1wiIG5vdCBkZWZpbmVkIGluICcgKyBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialtuYW1lXTtcbiAgICB9LFxuICAgIGxvb2t1cDogZnVuY3Rpb24gbG9va3VwKGRlcHRocywgbmFtZSkge1xuICAgICAgdmFyIGxlbiA9IGRlcHRocy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChkZXB0aHNbaV0gJiYgZGVwdGhzW2ldW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsYW1iZGE6IGZ1bmN0aW9uIGxhbWJkYShjdXJyZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuICAgIH0sXG5cbiAgICBlc2NhcGVFeHByZXNzaW9uOiBVdGlscy5lc2NhcGVFeHByZXNzaW9uLFxuICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxuXG4gICAgZm46IGZ1bmN0aW9uIGZuKGkpIHtcbiAgICAgIHZhciByZXQgPSB0ZW1wbGF0ZVNwZWNbaV07XG4gICAgICByZXQuZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjW2kgKyAnX2QnXTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIHByb2dyYW1zOiBbXSxcbiAgICBwcm9ncmFtOiBmdW5jdGlvbiBwcm9ncmFtKGksIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICAgIHZhciBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXG4gICAgICAgICAgZm4gPSB0aGlzLmZuKGkpO1xuICAgICAgaWYgKGRhdGEgfHwgZGVwdGhzIHx8IGJsb2NrUGFyYW1zIHx8IGRlY2xhcmVkQmxvY2tQYXJhbXMpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgICB9IGVsc2UgaWYgKCFwcm9ncmFtV3JhcHBlcikge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG4gICAgfSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEodmFsdWUsIGRlcHRoKSB7XG4gICAgICB3aGlsZSAodmFsdWUgJiYgZGVwdGgtLSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLl9wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBtZXJnZTogZnVuY3Rpb24gbWVyZ2UocGFyYW0sIGNvbW1vbikge1xuICAgICAgdmFyIG9iaiA9IHBhcmFtIHx8IGNvbW1vbjtcblxuICAgICAgaWYgKHBhcmFtICYmIGNvbW1vbiAmJiBwYXJhbSAhPT0gY29tbW9uKSB7XG4gICAgICAgIG9iaiA9IFV0aWxzLmV4dGVuZCh7fSwgY29tbW9uLCBwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICAvLyBBbiBlbXB0eSBvYmplY3QgdG8gdXNlIGFzIHJlcGxhY2VtZW50IGZvciBudWxsLWNvbnRleHRzXG4gICAgbnVsbENvbnRleHQ6IE9iamVjdC5zZWFsKHt9KSxcblxuICAgIG5vb3A6IGVudi5WTS5ub29wLFxuICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG4gIH07XG5cbiAgZnVuY3Rpb24gcmV0KGNvbnRleHQpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xuXG4gICAgdmFyIGRhdGEgPSBvcHRpb25zLmRhdGE7XG5cbiAgICByZXQuX3NldHVwKG9wdGlvbnMpO1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsICYmIHRlbXBsYXRlU3BlYy51c2VEYXRhKSB7XG4gICAgICBkYXRhID0gaW5pdERhdGEoY29udGV4dCwgZGF0YSk7XG4gICAgfVxuICAgIHZhciBkZXB0aHMgPSB1bmRlZmluZWQsXG4gICAgICAgIGJsb2NrUGFyYW1zID0gdGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zID8gW10gOiB1bmRlZmluZWQ7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMpIHtcbiAgICAgIGlmIChvcHRpb25zLmRlcHRocykge1xuICAgICAgICBkZXB0aHMgPSBjb250ZXh0ICE9IG9wdGlvbnMuZGVwdGhzWzBdID8gW2NvbnRleHRdLmNvbmNhdChvcHRpb25zLmRlcHRocykgOiBvcHRpb25zLmRlcHRocztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlcHRocyA9IFtjb250ZXh0XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWluKGNvbnRleHQgLyosIG9wdGlvbnMqLykge1xuICAgICAgcmV0dXJuICcnICsgdGVtcGxhdGVTcGVjLm1haW4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICB9XG4gICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XG4gICAgcmV0dXJuIG1haW4oY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0LmlzVG9wID0gdHJ1ZTtcblxuICByZXQuX3NldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCkge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5oZWxwZXJzLCBlbnYuaGVscGVycyk7XG5cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCkge1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmRlY29yYXRvcnMsIGVudi5kZWNvcmF0b3JzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBvcHRpb25zLmhlbHBlcnM7XG4gICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcHRpb25zLnBhcnRpYWxzO1xuICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBvcHRpb25zLmRlY29yYXRvcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbiAoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgJiYgIWJsb2NrUGFyYW1zKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCB0ZW1wbGF0ZVNwZWNbaV0sIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gIGZ1bmN0aW9uIHByb2coY29udGV4dCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICB2YXIgY3VycmVudERlcHRocyA9IGRlcHRocztcbiAgICBpZiAoZGVwdGhzICYmIGNvbnRleHQgIT0gZGVwdGhzWzBdICYmICEoY29udGV4dCA9PT0gY29udGFpbmVyLm51bGxDb250ZXh0ICYmIGRlcHRoc1swXSA9PT0gbnVsbCkpIHtcbiAgICAgIGN1cnJlbnREZXB0aHMgPSBbY29udGV4dF0uY29uY2F0KGRlcHRocyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgb3B0aW9ucy5kYXRhIHx8IGRhdGEsIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLCBjdXJyZW50RGVwdGhzKTtcbiAgfVxuXG4gIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblxuICBwcm9nLnByb2dyYW0gPSBpO1xuICBwcm9nLmRlcHRoID0gZGVwdGhzID8gZGVwdGhzLmxlbmd0aCA6IDA7XG4gIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XG4gIHJldHVybiBwcm9nO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmICghcGFydGlhbCkge1xuICAgIGlmIChvcHRpb25zLm5hbWUgPT09ICdAcGFydGlhbC1ibG9jaycpIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIXBhcnRpYWwuY2FsbCAmJiAhb3B0aW9ucy5uYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBhIGR5bmFtaWMgcGFydGlhbCB0aGF0IHJldHVybmVkIGEgc3RyaW5nXG4gICAgb3B0aW9ucy5uYW1lID0gcGFydGlhbDtcbiAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1twYXJ0aWFsXTtcbiAgfVxuICByZXR1cm4gcGFydGlhbDtcbn1cblxuZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIC8vIFVzZSB0aGUgY3VycmVudCBjbG9zdXJlIGNvbnRleHQgdG8gc2F2ZSB0aGUgcGFydGlhbC1ibG9jayBpZiB0aGlzIHBhcnRpYWxcbiAgdmFyIGN1cnJlbnRQYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XG4gIGlmIChvcHRpb25zLmlkcykge1xuICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCA9IG9wdGlvbnMuaWRzWzBdIHx8IG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aDtcbiAgfVxuXG4gIHZhciBwYXJ0aWFsQmxvY2sgPSB1bmRlZmluZWQ7XG4gIGlmIChvcHRpb25zLmZuICYmIG9wdGlvbnMuZm4gIT09IG5vb3ApIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgb3B0aW9ucy5kYXRhID0gX2Jhc2UuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgIC8vIFdyYXBwZXIgZnVuY3Rpb24gdG8gZ2V0IGFjY2VzcyB0byBjdXJyZW50UGFydGlhbEJsb2NrIGZyb20gdGhlIGNsb3N1cmVcbiAgICAgIHZhciBmbiA9IG9wdGlvbnMuZm47XG4gICAgICBwYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGZ1bmN0aW9uIHBhcnRpYWxCbG9ja1dyYXBwZXIoY29udGV4dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xuXG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIHBhcnRpYWwtYmxvY2sgZnJvbSB0aGUgY2xvc3VyZSBmb3IgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgYmxvY2tcbiAgICAgICAgLy8gaS5lLiB0aGUgcGFydCBpbnNpZGUgdGhlIGJsb2NrIG9mIHRoZSBwYXJ0aWFsIGNhbGwuXG4gICAgICAgIG9wdGlvbnMuZGF0YSA9IF9iYXNlLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gY3VycmVudFBhcnRpYWxCbG9jaztcbiAgICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIGlmIChmbi5wYXJ0aWFscykge1xuICAgICAgICBvcHRpb25zLnBhcnRpYWxzID0gVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLnBhcnRpYWxzLCBmbi5wYXJ0aWFscyk7XG4gICAgICB9XG4gICAgfSkoKTtcbiAgfVxuXG4gIGlmIChwYXJ0aWFsID09PSB1bmRlZmluZWQgJiYgcGFydGlhbEJsb2NrKSB7XG4gICAgcGFydGlhbCA9IHBhcnRpYWxCbG9jaztcbiAgfVxuXG4gIGlmIChwYXJ0aWFsID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGZvdW5kJyk7XG4gIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHBhcnRpYWwoY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHtcbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YShjb250ZXh0LCBkYXRhKSB7XG4gIGlmICghZGF0YSB8fCAhKCdyb290JyBpbiBkYXRhKSkge1xuICAgIGRhdGEgPSBkYXRhID8gX2Jhc2UuY3JlYXRlRnJhbWUoZGF0YSkgOiB7fTtcbiAgICBkYXRhLnJvb3QgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKSB7XG4gIGlmIChmbi5kZWNvcmF0b3IpIHtcbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICBwcm9nID0gZm4uZGVjb3JhdG9yKHByb2csIHByb3BzLCBjb250YWluZXIsIGRlcHRocyAmJiBkZXB0aHNbMF0sIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHByb2c7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwzSjFiblJwYldVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN2NVSkJRWFZDTEZOQlFWTTdPMGxCUVhCQ0xFdEJRVXM3TzNsQ1FVTkxMR0ZCUVdFN096czdiMEpCUXpoQ0xGRkJRVkU3TzBGQlJXeEZMRk5CUVZNc1lVRkJZU3hEUVVGRExGbEJRVmtzUlVGQlJUdEJRVU14UXl4TlFVRk5MR2RDUVVGblFpeEhRVUZITEZsQlFWa3NTVUZCU1N4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dE5RVU4yUkN4bFFVRmxMREJDUVVGdlFpeERRVUZET3p0QlFVVXhReXhOUVVGSkxHZENRVUZuUWl4TFFVRkxMR1ZCUVdVc1JVRkJSVHRCUVVONFF5eFJRVUZKTEdkQ1FVRm5RaXhIUVVGSExHVkJRV1VzUlVGQlJUdEJRVU4wUXl4VlFVRk5MR1ZCUVdVc1IwRkJSeXgxUWtGQmFVSXNaVUZCWlN4RFFVRkRPMVZCUTI1RUxHZENRVUZuUWl4SFFVRkhMSFZDUVVGcFFpeG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8wRkJRelZFTEZsQlFVMHNNa0pCUVdNc2VVWkJRWGxHTEVkQlEzWkhMSEZFUVVGeFJDeEhRVUZITEdWQlFXVXNSMEZCUnl4dFJFRkJiVVFzUjBGQlJ5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU5vU3l4TlFVRk5PenRCUVVWTUxGbEJRVTBzTWtKQlFXTXNkMFpCUVhkR0xFZEJRM1JITEdsRVFVRnBSQ3hIUVVGSExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVOdVJqdEhRVU5HTzBOQlEwWTdPMEZCUlUwc1UwRkJVeXhSUVVGUkxFTkJRVU1zV1VGQldTeEZRVUZGTEVkQlFVY3NSVUZCUlRzN1FVRkZNVU1zVFVGQlNTeERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTlNMRlZCUVUwc01rSkJRV01zYlVOQlFXMURMRU5CUVVNc1EwRkJRenRIUVVNeFJEdEJRVU5FTEUxQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEzWkRMRlZCUVUwc01rSkJRV01zTWtKQlFUSkNMRWRCUVVjc1QwRkJUeXhaUVVGWkxFTkJRVU1zUTBGQlF6dEhRVU40UlRzN1FVRkZSQ3hqUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRE96czdPMEZCU1d4RUxFdEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6czdRVUZGTlVNc1YwRkJVeXh2UWtGQmIwSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU4yUkN4UlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVU3UVVGRGFFSXNZVUZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGJFUXNWVUZCU1N4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJRMllzWlVGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03VDBGRGRrSTdTMEZEUmpzN1FVRkZSQ3hYUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRM1JGTEZGQlFVa3NUVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXpzN1FVRkZlRVVzVVVGQlNTeE5RVUZOTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRGFrTXNZVUZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVVzV1VGQldTeERRVUZETEdWQlFXVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVONlJpeFpRVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wdEJRek5FTzBGQlEwUXNVVUZCU1N4TlFVRk5MRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRMnhDTEZWQlFVa3NUMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVOc1FpeFpRVUZKTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF5OUNMR0ZCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkROVU1zWTBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTTFRaXhyUWtGQlRUdFhRVU5RT3p0QlFVVkVMR1ZCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU4wUXp0QlFVTkVMR05CUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMDlCUXpOQ08wRkJRMFFzWVVGQlR5eE5RVUZOTEVOQlFVTTdTMEZEWml4TlFVRk5PMEZCUTB3c1dVRkJUU3d5UWtGQll5eGpRVUZqTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXd3UkVGQk1FUXNRMEZCUXl4RFFVRkRPMHRCUTJwSU8wZEJRMFk3T3p0QlFVZEVMRTFCUVVrc1UwRkJVeXhIUVVGSE8wRkJRMlFzVlVGQlRTeEZRVUZGTEdkQ1FVRlRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVU3UVVGRE1VSXNWVUZCU1N4RlFVRkZMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVUVzUVVGQlF5eEZRVUZGTzBGQlEyeENMR05CUVUwc01rSkJRV01zUjBGQlJ5eEhRVUZITEVsQlFVa3NSMEZCUnl4dFFrRkJiVUlzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXp0UFFVTTNSRHRCUVVORUxHRkJRVThzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTJ4Q08wRkJRMFFzVlVGQlRTeEZRVUZGTEdkQ1FVRlRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVU3UVVGRE4wSXNWVUZCVFN4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU14UWl4WFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRelZDTEZsQlFVa3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGVFTXNhVUpCUVU4c1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUTNoQ08wOUJRMFk3UzBGRFJqdEJRVU5FTEZWQlFVMHNSVUZCUlN4blFrRkJVeXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlEycERMR0ZCUVU4c1QwRkJUeXhQUVVGUExFdEJRVXNzVlVGQlZTeEhRVUZITEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETzB0QlEzaEZPenRCUVVWRUxHOUNRVUZuUWl4RlFVRkZMRXRCUVVzc1EwRkJReXhuUWtGQlowSTdRVUZEZUVNc2FVSkJRV0VzUlVGQlJTeHZRa0ZCYjBJN08wRkJSVzVETEUxQlFVVXNSVUZCUlN4WlFVRlRMRU5CUVVNc1JVRkJSVHRCUVVOa0xGVkJRVWtzUjBGQlJ5eEhRVUZITEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNeFFpeFRRVUZITEVOQlFVTXNVMEZCVXl4SFFVRkhMRmxCUVZrc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEZGtNc1lVRkJUeXhIUVVGSExFTkJRVU03UzBGRFdqczdRVUZGUkN4WlFVRlJMRVZCUVVVc1JVRkJSVHRCUVVOYUxGZEJRVThzUlVGQlJTeHBRa0ZCVXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGRkxHMUNRVUZ0UWl4RlFVRkZMRmRCUVZjc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGRGJrVXNWVUZCU1N4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdWVUZEYWtNc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRjRUlzVlVGQlNTeEpRVUZKTEVsQlFVa3NUVUZCVFN4SlFVRkpMRmRCUVZjc1NVRkJTU3h0UWtGQmJVSXNSVUZCUlR0QlFVTjRSQ3h6UWtGQll5eEhRVUZITEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZKTEVWQlFVVXNiVUpCUVcxQ0xFVkJRVVVzVjBGQlZ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMDlCUXpOR0xFMUJRVTBzU1VGQlNTeERRVUZETEdOQlFXTXNSVUZCUlR0QlFVTXhRaXh6UWtGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VDBGRE9VUTdRVUZEUkN4aFFVRlBMR05CUVdNc1EwRkJRenRMUVVOMlFqczdRVUZGUkN4UlFVRkpMRVZCUVVVc1kwRkJVeXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlF6TkNMR0ZCUVU4c1MwRkJTeXhKUVVGSkxFdEJRVXNzUlVGQlJTeEZRVUZGTzBGQlEzWkNMR0ZCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETzA5QlEzWkNPMEZCUTBRc1lVRkJUeXhMUVVGTExFTkJRVU03UzBGRFpEdEJRVU5FTEZOQlFVc3NSVUZCUlN4bFFVRlRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGRE4wSXNWVUZCU1N4SFFVRkhMRWRCUVVjc1MwRkJTeXhKUVVGSkxFMUJRVTBzUTBGQlF6czdRVUZGTVVJc1ZVRkJTU3hMUVVGTExFbEJRVWtzVFVGQlRTeEpRVUZMTEV0QlFVc3NTMEZCU3l4TlFVRk5MRUZCUVVNc1JVRkJSVHRCUVVONlF5eFhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMDlCUTNaRE96dEJRVVZFTEdGQlFVOHNSMEZCUnl4RFFVRkRPMHRCUTFvN08wRkJSVVFzWlVGQlZ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVUxUWl4UlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTzBGQlEycENMR2RDUVVGWkxFVkJRVVVzV1VGQldTeERRVUZETEZGQlFWRTdSMEZEY0VNc1EwRkJRenM3UVVGRlJpeFhRVUZUTEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVdkQ08xRkJRV1FzVDBGQlR5eDVSRUZCUnl4RlFVRkZPenRCUVVOb1F5eFJRVUZKTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRE96dEJRVVY0UWl4UFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlEzQkNMRkZCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEpRVUZKTEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVN1FVRkROVU1zVlVGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGFFTTdRVUZEUkN4UlFVRkpMRTFCUVUwc1dVRkJRVHRSUVVOT0xGZEJRVmNzUjBGQlJ5eFpRVUZaTEVOQlFVTXNZMEZCWXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhUUVVGVExFTkJRVU03UVVGREwwUXNVVUZCU1N4WlFVRlpMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRekZDTEZWQlFVa3NUMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVOc1FpeGpRVUZOTEVkQlFVY3NUMEZCVHl4SlFVRkpMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU03VDBGRE0wWXNUVUZCVFR0QlFVTk1MR05CUVUwc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzA5QlEzQkNPMHRCUTBZN08wRkJSVVFzWVVGQlV5eEpRVUZKTEVOQlFVTXNUMEZCVHl4blFrRkJaVHRCUVVOc1F5eGhRVUZQTEVWQlFVVXNSMEZCUnl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeFBRVUZQTEVWQlFVVXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hUUVVGVExFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NSVUZCUlN4WFFVRlhMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UzBGRGNrZzdRVUZEUkN4UlFVRkpMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEU5QlFVOHNRMEZCUXl4TlFVRk5MRWxCUVVrc1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0QlFVTjBSeXhYUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1IwRkRMMEk3UVVGRFJDeExRVUZITEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenM3UVVGRmFrSXNTMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVExFOUJRVThzUlVGQlJUdEJRVU0zUWl4UlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJUdEJRVU53UWl4bFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUld4RkxGVkJRVWtzV1VGQldTeERRVUZETEZWQlFWVXNSVUZCUlR0QlFVTXpRaXhwUWtGQlV5eERRVUZETEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wOUJRM1JGTzBGQlEwUXNWVUZCU1N4WlFVRlpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxGbEJRVmtzUTBGQlF5eGhRVUZoTEVWQlFVVTdRVUZEZWtRc2FVSkJRVk1zUTBGQlF5eFZRVUZWTEVkQlFVY3NVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeEZRVUZGTEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRQUVVNMVJUdExRVU5HTEUxQlFVMDdRVUZEVEN4bFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTTdRVUZEY0VNc1pVRkJVeXhEUVVGRExGRkJRVkVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRPMEZCUTNSRExHVkJRVk1zUTBGQlF5eFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJRenRMUVVNelF6dEhRVU5HTEVOQlFVTTdPMEZCUlVZc1MwRkJSeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFZRVUZUTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU5zUkN4UlFVRkpMRmxCUVZrc1EwRkJReXhqUVVGakxFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVTdRVUZETDBNc1dVRkJUU3d5UWtGQll5eDNRa0ZCZDBJc1EwRkJReXhEUVVGRE8wdEJReTlETzBGQlEwUXNVVUZCU1N4WlFVRlpMRU5CUVVNc1UwRkJVeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEzSkRMRmxCUVUwc01rSkJRV01zZVVKQlFYbENMRU5CUVVNc1EwRkJRenRMUVVOb1JEczdRVUZGUkN4WFFVRlBMRmRCUVZjc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZGTEZkQlFWY3NSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRIUVVOcVJpeERRVUZETzBGQlEwWXNVMEZCVHl4SFFVRkhMRU5CUVVNN1EwRkRXanM3UVVGRlRTeFRRVUZUTEZkQlFWY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZKTEVWQlFVVXNiVUpCUVcxQ0xFVkJRVVVzVjBGQlZ5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTTFSaXhYUVVGVExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFXZENPMUZCUVdRc1QwRkJUeXg1UkVGQlJ5eEZRVUZGT3p0QlFVTnFReXhSUVVGSkxHRkJRV0VzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZETTBJc1VVRkJTU3hOUVVGTkxFbEJRVWtzVDBGQlR5eEpRVUZKTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUzBGQlN5eFRRVUZUTEVOQlFVTXNWMEZCVnl4SlFVRkpMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVRXNRVUZCUXl4RlFVRkZPMEZCUTJoSExHMUNRVUZoTEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdTMEZETVVNN08wRkJSVVFzVjBGQlR5eEZRVUZGTEVOQlFVTXNVMEZCVXl4RlFVTm1MRTlCUVU4c1JVRkRVQ3hUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZGTEZOQlFWTXNRMEZCUXl4UlFVRlJMRVZCUTNKRExFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVTndRaXhYUVVGWExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVU40UkN4aFFVRmhMRU5CUVVNc1EwRkJRenRIUVVOd1FqczdRVUZGUkN4TlFVRkpMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVVzVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenM3UVVGRmVrVXNUVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFrSXNUVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRlRU1zVFVGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4dFFrRkJiVUlzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETlVNc1UwRkJUeXhKUVVGSkxFTkJRVU03UTBGRFlqczdRVUZGVFN4VFFVRlRMR05CUVdNc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlR0QlFVTjRSQ3hOUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlExb3NVVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hMUVVGTExHZENRVUZuUWl4RlFVRkZPMEZCUTNKRExHRkJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wdEJRM3BETEUxQlFVMDdRVUZEVEN4aFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRNVU03UjBGRFJpeE5RVUZOTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlRzN1FVRkZla01zVjBGQlR5eERRVUZETEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkRka0lzVjBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UjBGRGNrTTdRVUZEUkN4VFFVRlBMRTlCUVU4c1EwRkJRenREUVVOb1FqczdRVUZGVFN4VFFVRlRMR0ZCUVdFc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlRzN1FVRkZka1FzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeEpRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03UVVGRE1VVXNVMEZCVHl4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRrSXNUVUZCU1N4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJRMllzVjBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF6dEhRVU4yUlRzN1FVRkZSQ3hOUVVGSkxGbEJRVmtzV1VGQlFTeERRVUZETzBGQlEycENMRTFCUVVrc1QwRkJUeXhEUVVGRExFVkJRVVVzU1VGQlNTeFBRVUZQTEVOQlFVTXNSVUZCUlN4TFFVRkxMRWxCUVVrc1JVRkJSVHM3UVVGRGNrTXNZVUZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXhyUWtGQldTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSWHBETEZWQlFVa3NSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRGNFSXNhMEpCUVZrc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRk5CUVZNc2JVSkJRVzFDTEVOQlFVTXNUMEZCVHl4RlFVRm5RanRaUVVGa0xFOUJRVThzZVVSQlFVY3NSVUZCUlRzN096dEJRVWt2Uml4bFFVRlBMRU5CUVVNc1NVRkJTU3hIUVVGSExHdENRVUZaTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVONlF5eGxRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRPMEZCUTNCRUxHVkJRVThzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRQUVVNM1FpeERRVUZETzBGQlEwWXNWVUZCU1N4RlFVRkZMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRMllzWlVGQlR5eERRVUZETEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeFBRVUZQTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFBRVU53UlRzN1IwRkRSanM3UVVGRlJDeE5RVUZKTEU5QlFVOHNTMEZCU3l4VFFVRlRMRWxCUVVrc1dVRkJXU3hGUVVGRk8wRkJRM3BETEZkQlFVOHNSMEZCUnl4WlFVRlpMRU5CUVVNN1IwRkRlRUk3TzBGQlJVUXNUVUZCU1N4UFFVRlBMRXRCUVVzc1UwRkJVeXhGUVVGRk8wRkJRM3BDTEZWQlFVMHNNa0pCUVdNc1kwRkJZeXhIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEVkQlFVY3NjVUpCUVhGQ0xFTkJRVU1zUTBGQlF6dEhRVU0xUlN4TlFVRk5MRWxCUVVrc1QwRkJUeXhaUVVGWkxGRkJRVkVzUlVGQlJUdEJRVU4wUXl4WFFVRlBMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdSMEZEYkVNN1EwRkRSanM3UVVGRlRTeFRRVUZUTEVsQlFVa3NSMEZCUnp0QlFVRkZMRk5CUVU4c1JVRkJSU3hEUVVGRE8wTkJRVVU3TzBGQlJYSkRMRk5CUVZNc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVWQlFVVTdRVUZETDBJc1RVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeEZRVUZGTEUxQlFVMHNTVUZCU1N4SlFVRkpMRU5CUVVFc1FVRkJReXhGUVVGRk8wRkJRemxDTEZGQlFVa3NSMEZCUnl4SlFVRkpMRWRCUVVjc2EwSkJRVmtzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNKRExGRkJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRPMGRCUTNKQ08wRkJRMFFzVTBGQlR5eEpRVUZKTEVOQlFVTTdRMEZEWWpzN1FVRkZSQ3hUUVVGVExHbENRVUZwUWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRk8wRkJRM3BGTEUxQlFVa3NSVUZCUlN4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVOb1FpeFJRVUZKTEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRaaXhSUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxGTkJRVk1zUlVGQlJTeE5RVUZOTEVsQlFVa3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkROVVlzVTBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UjBGRE0wSTdRVUZEUkN4VFFVRlBMRWxCUVVrc1EwRkJRenREUVVOaUlpd2labWxzWlNJNkluSjFiblJwYldVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdLaUJoY3lCVmRHbHNjeUJtY205dElDY3VMM1YwYVd4ekp6dGNibWx0Y0c5eWRDQkZlR05sY0hScGIyNGdabkp2YlNBbkxpOWxlR05sY0hScGIyNG5PMXh1YVcxd2IzSjBJSHNnUTA5TlVFbE1SVkpmVWtWV1NWTkpUMDRzSUZKRlZrbFRTVTlPWDBOSVFVNUhSVk1zSUdOeVpXRjBaVVp5WVcxbElIMGdabkp2YlNBbkxpOWlZWE5sSnp0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTm9aV05yVW1WMmFYTnBiMjRvWTI5dGNHbHNaWEpKYm1adktTQjdYRzRnSUdOdmJuTjBJR052YlhCcGJHVnlVbVYyYVhOcGIyNGdQU0JqYjIxd2FXeGxja2x1Wm04Z0ppWWdZMjl0Y0dsc1pYSkpibVp2V3pCZElIeDhJREVzWEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJTWlhacGMybHZiaUE5SUVOUFRWQkpURVZTWDFKRlZrbFRTVTlPTzF4dVhHNGdJR2xtSUNoamIyMXdhV3hsY2xKbGRtbHphVzl1SUNFOVBTQmpkWEp5Wlc1MFVtVjJhWE5wYjI0cElIdGNiaUFnSUNCcFppQW9ZMjl0Y0dsc1pYSlNaWFpwYzJsdmJpQThJR04xY25KbGJuUlNaWFpwYzJsdmJpa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2NuVnVkR2x0WlZabGNuTnBiMjV6SUQwZ1VrVldTVk5KVDA1ZlEwaEJUa2RGVTF0amRYSnlaVzUwVW1WMmFYTnBiMjVkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl0Y0dsc1pYSldaWEp6YVc5dWN5QTlJRkpGVmtsVFNVOU9YME5JUVU1SFJWTmJZMjl0Y0dsc1pYSlNaWFpwYzJsdmJsMDdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2RVWlcxd2JHRjBaU0IzWVhNZ2NISmxZMjl0Y0dsc1pXUWdkMmwwYUNCaGJpQnZiR1JsY2lCMlpYSnphVzl1SUc5bUlFaGhibVJzWldKaGNuTWdkR2hoYmlCMGFHVWdZM1Z5Y21WdWRDQnlkVzUwYVcxbExpQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFFiR1ZoYzJVZ2RYQmtZWFJsSUhsdmRYSWdjSEpsWTI5dGNHbHNaWElnZEc4Z1lTQnVaWGRsY2lCMlpYSnphVzl1SUNnbklDc2djblZ1ZEdsdFpWWmxjbk5wYjI1eklDc2dKeWtnYjNJZ1pHOTNibWR5WVdSbElIbHZkWElnY25WdWRHbHRaU0IwYnlCaGJpQnZiR1JsY2lCMlpYSnphVzl1SUNnbklDc2dZMjl0Y0dsc1pYSldaWEp6YVc5dWN5QXJJQ2NwTGljcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCVmMyVWdkR2hsSUdWdFltVmtaR1ZrSUhabGNuTnBiMjRnYVc1bWJ5QnphVzVqWlNCMGFHVWdjblZ1ZEdsdFpTQmtiMlZ6YmlkMElHdHViM2NnWVdKdmRYUWdkR2hwY3lCeVpYWnBjMmx2YmlCNVpYUmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KMVJsYlhCc1lYUmxJSGRoY3lCd2NtVmpiMjF3YVd4bFpDQjNhWFJvSUdFZ2JtVjNaWElnZG1WeWMybHZiaUJ2WmlCSVlXNWtiR1ZpWVhKeklIUm9ZVzRnZEdobElHTjFjbkpsYm5RZ2NuVnVkR2x0WlM0Z0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBblVHeGxZWE5sSUhWd1pHRjBaU0I1YjNWeUlISjFiblJwYldVZ2RHOGdZU0J1WlhkbGNpQjJaWEp6YVc5dUlDZ25JQ3NnWTI5dGNHbHNaWEpKYm1adld6RmRJQ3NnSnlrdUp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQjBaVzF3YkdGMFpTaDBaVzF3YkdGMFpWTndaV01zSUdWdWRpa2dlMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQnBaaUFvSVdWdWRpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KMDV2SUdWdWRtbHliMjV0Wlc1MElIQmhjM05sWkNCMGJ5QjBaVzF3YkdGMFpTY3BPMXh1SUNCOVhHNGdJR2xtSUNnaGRHVnRjR3hoZEdWVGNHVmpJSHg4SUNGMFpXMXdiR0YwWlZOd1pXTXViV0ZwYmlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0oxVnVhMjV2ZDI0Z2RHVnRjR3hoZEdVZ2IySnFaV04wT2lBbklDc2dkSGx3Wlc5bUlIUmxiWEJzWVhSbFUzQmxZeWs3WEc0Z0lIMWNibHh1SUNCMFpXMXdiR0YwWlZOd1pXTXViV0ZwYmk1a1pXTnZjbUYwYjNJZ1BTQjBaVzF3YkdGMFpWTndaV011YldGcGJsOWtPMXh1WEc0Z0lDOHZJRTV2ZEdVNklGVnphVzVuSUdWdWRpNVdUU0J5WldabGNtVnVZMlZ6SUhKaGRHaGxjaUIwYUdGdUlHeHZZMkZzSUhaaGNpQnlaV1psY21WdVkyVnpJSFJvY205MVoyaHZkWFFnZEdocGN5QnpaV04wYVc5dUlIUnZJR0ZzYkc5M1hHNGdJQzh2SUdadmNpQmxlSFJsY201aGJDQjFjMlZ5Y3lCMGJ5QnZkbVZ5Y21sa1pTQjBhR1Z6WlNCaGN5QndjM1ZsWkc4dGMzVndjRzl5ZEdWa0lFRlFTWE11WEc0Z0lHVnVkaTVXVFM1amFHVmphMUpsZG1semFXOXVLSFJsYlhCc1lYUmxVM0JsWXk1amIyMXdhV3hsY2lrN1hHNWNiaUFnWm5WdVkzUnBiMjRnYVc1MmIydGxVR0Z5ZEdsaGJGZHlZWEJ3WlhJb2NHRnlkR2xoYkN3Z1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtaGhjMmdwSUh0Y2JpQWdJQ0FnSUdOdmJuUmxlSFFnUFNCVmRHbHNjeTVsZUhSbGJtUW9lMzBzSUdOdmJuUmxlSFFzSUc5d2RHbHZibk11YUdGemFDazdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVwWkhNcElIdGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NXBaSE5iTUYwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEJoY25ScFlXd2dQU0JsYm5ZdVZrMHVjbVZ6YjJ4MlpWQmhjblJwWVd3dVkyRnNiQ2gwYUdsekxDQndZWEowYVdGc0xDQmpiMjUwWlhoMExDQnZjSFJwYjI1ektUdGNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdaVzUyTGxaTkxtbHVkbTlyWlZCaGNuUnBZV3d1WTJGc2JDaDBhR2x6TENCd1lYSjBhV0ZzTENCamIyNTBaWGgwTENCdmNIUnBiMjV6S1R0Y2JseHVJQ0FnSUdsbUlDaHlaWE4xYkhRZ1BUMGdiblZzYkNBbUppQmxibll1WTI5dGNHbHNaU2tnZTF4dUlDQWdJQ0FnYjNCMGFXOXVjeTV3WVhKMGFXRnNjMXR2Y0hScGIyNXpMbTVoYldWZElEMGdaVzUyTG1OdmJYQnBiR1VvY0dGeWRHbGhiQ3dnZEdWdGNHeGhkR1ZUY0dWakxtTnZiWEJwYkdWeVQzQjBhVzl1Y3l3Z1pXNTJLVHRjYmlBZ0lDQWdJSEpsYzNWc2RDQTlJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITmJiM0IwYVc5dWN5NXVZVzFsWFNoamIyNTBaWGgwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hKbGMzVnNkQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1cGJtUmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR3hwYm1WeklEMGdjbVZ6ZFd4MExuTndiR2wwS0NkY1hHNG5LVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQXNJR3dnUFNCc2FXNWxjeTVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVd4cGJtVnpXMmxkSUNZbUlHa2dLeUF4SUQwOVBTQnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCc2FXNWxjMXRwWFNBOUlHOXdkR2x2Ym5NdWFXNWtaVzUwSUNzZ2JHbHVaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdiR2x1WlhNdWFtOXBiaWduWEZ4dUp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2RVYUdVZ2NHRnlkR2xoYkNBbklDc2diM0IwYVc5dWN5NXVZVzFsSUNzZ0p5QmpiM1ZzWkNCdWIzUWdZbVVnWTI5dGNHbHNaV1FnZDJobGJpQnlkVzV1YVc1bklHbHVJSEoxYm5ScGJXVXRiMjVzZVNCdGIyUmxKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk4Z1NuVnpkQ0JoWkdRZ2QyRjBaWEpjYmlBZ2JHVjBJR052Ym5SaGFXNWxjaUE5SUh0Y2JpQWdJQ0J6ZEhKcFkzUTZJR1oxYm1OMGFXOXVLRzlpYWl3Z2JtRnRaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRW9ibUZ0WlNCcGJpQnZZbW9wS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KMXdpSnlBcklHNWhiV1VnS3lBblhDSWdibTkwSUdSbFptbHVaV1FnYVc0Z0p5QXJJRzlpYWlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYjJKcVcyNWhiV1ZkTzF4dUlDQWdJSDBzWEc0Z0lDQWdiRzl2YTNWd09pQm1kVzVqZEdsdmJpaGtaWEIwYUhNc0lHNWhiV1VwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR3hsYmlBOUlHUmxjSFJvY3k1c1pXNW5kR2c3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrWlhCMGFITmJhVjBnSmlZZ1pHVndkR2h6VzJsZFcyNWhiV1ZkSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHVndkR2h6VzJsZFcyNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0JzWVcxaVpHRTZJR1oxYm1OMGFXOXVLR04xY25KbGJuUXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ1kzVnljbVZ1ZENBOVBUMGdKMloxYm1OMGFXOXVKeUEvSUdOMWNuSmxiblF1WTJGc2JDaGpiMjUwWlhoMEtTQTZJR04xY25KbGJuUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHVnpZMkZ3WlVWNGNISmxjM05wYjI0NklGVjBhV3h6TG1WelkyRndaVVY0Y0hKbGMzTnBiMjRzWEc0Z0lDQWdhVzUyYjJ0bFVHRnlkR2xoYkRvZ2FXNTJiMnRsVUdGeWRHbGhiRmR5WVhCd1pYSXNYRzVjYmlBZ0lDQm1iam9nWm5WdVkzUnBiMjRvYVNrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEpsZENBOUlIUmxiWEJzWVhSbFUzQmxZMXRwWFR0Y2JpQWdJQ0FnSUhKbGRDNWtaV052Y21GMGIzSWdQU0IwWlcxd2JHRjBaVk53WldOYmFTQXJJQ2RmWkNkZE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NISnZaM0poYlhNNklGdGRMRnh1SUNBZ0lIQnliMmR5WVcwNklHWjFibU4wYVc5dUtHa3NJR1JoZEdFc0lHUmxZMnhoY21Wa1FteHZZMnRRWVhKaGJYTXNJR0pzYjJOclVHRnlZVzF6TENCa1pYQjBhSE1wSUh0Y2JpQWdJQ0FnSUd4bGRDQndjbTluY21GdFYzSmhjSEJsY2lBOUlIUm9hWE11Y0hKdlozSmhiWE5iYVYwc1hHNGdJQ0FnSUNBZ0lDQWdabTRnUFNCMGFHbHpMbVp1S0drcE8xeHVJQ0FnSUNBZ2FXWWdLR1JoZEdFZ2ZId2daR1Z3ZEdoeklIeDhJR0pzYjJOclVHRnlZVzF6SUh4OElHUmxZMnhoY21Wa1FteHZZMnRRWVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnY0hKdlozSmhiVmR5WVhCd1pYSWdQU0IzY21Gd1VISnZaM0poYlNoMGFHbHpMQ0JwTENCbWJpd2daR0YwWVN3Z1pHVmpiR0Z5WldSQ2JHOWphMUJoY21GdGN5d2dZbXh2WTJ0UVlYSmhiWE1zSUdSbGNIUm9jeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGd2NtOW5jbUZ0VjNKaGNIQmxjaWtnZTF4dUlDQWdJQ0FnSUNCd2NtOW5jbUZ0VjNKaGNIQmxjaUE5SUhSb2FYTXVjSEp2WjNKaGJYTmJhVjBnUFNCM2NtRndVSEp2WjNKaGJTaDBhR2x6TENCcExDQm1iaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjSEp2WjNKaGJWZHlZWEJ3WlhJN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdSaGRHRTZJR1oxYm1OMGFXOXVLSFpoYkhWbExDQmtaWEIwYUNrZ2UxeHVJQ0FnSUNBZ2QyaHBiR1VnS0haaGJIVmxJQ1ltSUdSbGNIUm9MUzBwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaUzVmY0dGeVpXNTBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQWdJSDBzWEc0Z0lDQWdiV1Z5WjJVNklHWjFibU4wYVc5dUtIQmhjbUZ0TENCamIyMXRiMjRwSUh0Y2JpQWdJQ0FnSUd4bGRDQnZZbW9nUFNCd1lYSmhiU0I4ZkNCamIyMXRiMjQ3WEc1Y2JpQWdJQ0FnSUdsbUlDaHdZWEpoYlNBbUppQmpiMjF0YjI0Z0ppWWdLSEJoY21GdElDRTlQU0JqYjIxdGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUc5aWFpQTlJRlYwYVd4ekxtVjRkR1Z1WkNoN2ZTd2dZMjl0Ylc5dUxDQndZWEpoYlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ2ZTeGNiaUFnSUNBdkx5QkJiaUJsYlhCMGVTQnZZbXBsWTNRZ2RHOGdkWE5sSUdGeklISmxjR3hoWTJWdFpXNTBJR1p2Y2lCdWRXeHNMV052Ym5SbGVIUnpYRzRnSUNBZ2JuVnNiRU52Ym5SbGVIUTZJRTlpYW1WamRDNXpaV0ZzS0h0OUtTeGNibHh1SUNBZ0lHNXZiM0E2SUdWdWRpNVdUUzV1YjI5d0xGeHVJQ0FnSUdOdmJYQnBiR1Z5U1c1bWJ6b2dkR1Z0Y0d4aGRHVlRjR1ZqTG1OdmJYQnBiR1Z5WEc0Z0lIMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z2NtVjBLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTWdQU0I3ZlNrZ2UxeHVJQ0FnSUd4bGRDQmtZWFJoSUQwZ2IzQjBhVzl1Y3k1a1lYUmhPMXh1WEc0Z0lDQWdjbVYwTGw5elpYUjFjQ2h2Y0hScGIyNXpLVHRjYmlBZ0lDQnBaaUFvSVc5d2RHbHZibk11Y0dGeWRHbGhiQ0FtSmlCMFpXMXdiR0YwWlZOd1pXTXVkWE5sUkdGMFlTa2dlMXh1SUNBZ0lDQWdaR0YwWVNBOUlHbHVhWFJFWVhSaEtHTnZiblJsZUhRc0lHUmhkR0VwTzF4dUlDQWdJSDFjYmlBZ0lDQnNaWFFnWkdWd2RHaHpMRnh1SUNBZ0lDQWdJQ0JpYkc5amExQmhjbUZ0Y3lBOUlIUmxiWEJzWVhSbFUzQmxZeTUxYzJWQ2JHOWphMUJoY21GdGN5QS9JRnRkSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdsbUlDaDBaVzF3YkdGMFpWTndaV011ZFhObFJHVndkR2h6S1NCN1hHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NWtaWEIwYUhNcElIdGNiaUFnSUNBZ0lDQWdaR1Z3ZEdoeklEMGdZMjl1ZEdWNGRDQWhQU0J2Y0hScGIyNXpMbVJsY0hSb2Mxc3dYU0EvSUZ0amIyNTBaWGgwWFM1amIyNWpZWFFvYjNCMGFXOXVjeTVrWlhCMGFITXBJRG9nYjNCMGFXOXVjeTVrWlhCMGFITTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmtaWEIwYUhNZ1BTQmJZMjl1ZEdWNGRGMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2JXRnBiaWhqYjI1MFpYaDBMeW9zSUc5d2RHbHZibk1xTHlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNjbklDc2dkR1Z0Y0d4aGRHVlRjR1ZqTG0xaGFXNG9ZMjl1ZEdGcGJtVnlMQ0JqYjI1MFpYaDBMQ0JqYjI1MFlXbHVaWEl1YUdWc2NHVnljeXdnWTI5dWRHRnBibVZ5TG5CaGNuUnBZV3h6TENCa1lYUmhMQ0JpYkc5amExQmhjbUZ0Y3l3Z1pHVndkR2h6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdiV0ZwYmlBOUlHVjRaV04xZEdWRVpXTnZjbUYwYjNKektIUmxiWEJzWVhSbFUzQmxZeTV0WVdsdUxDQnRZV2x1TENCamIyNTBZV2x1WlhJc0lHOXdkR2x2Ym5NdVpHVndkR2h6SUh4OElGdGRMQ0JrWVhSaExDQmliRzlqYTFCaGNtRnRjeWs3WEc0Z0lDQWdjbVYwZFhKdUlHMWhhVzRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWs3WEc0Z0lIMWNiaUFnY21WMExtbHpWRzl3SUQwZ2RISjFaVHRjYmx4dUlDQnlaWFF1WDNObGRIVndJRDBnWm5WdVkzUnBiMjRvYjNCMGFXOXVjeWtnZTF4dUlDQWdJR2xtSUNnaGIzQjBhVzl1Y3k1d1lYSjBhV0ZzS1NCN1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJdWFHVnNjR1Z5Y3lBOUlHTnZiblJoYVc1bGNpNXRaWEpuWlNodmNIUnBiMjV6TG1obGJIQmxjbk1zSUdWdWRpNW9aV3h3WlhKektUdGNibHh1SUNBZ0lDQWdhV1lnS0hSbGJYQnNZWFJsVTNCbFl5NTFjMlZRWVhKMGFXRnNLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUmhhVzVsY2k1d1lYSjBhV0ZzY3lBOUlHTnZiblJoYVc1bGNpNXRaWEpuWlNodmNIUnBiMjV6TG5CaGNuUnBZV3h6TENCbGJuWXVjR0Z5ZEdsaGJITXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hSbGJYQnNZWFJsVTNCbFl5NTFjMlZRWVhKMGFXRnNJSHg4SUhSbGJYQnNZWFJsVTNCbFl5NTFjMlZFWldOdmNtRjBiM0p6S1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNpNWtaV052Y21GMGIzSnpJRDBnWTI5dWRHRnBibVZ5TG0xbGNtZGxLRzl3ZEdsdmJuTXVaR1ZqYjNKaGRHOXljeXdnWlc1MkxtUmxZMjl5WVhSdmNuTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJdWFHVnNjR1Z5Y3lBOUlHOXdkR2x2Ym5NdWFHVnNjR1Z5Y3p0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2k1d1lYSjBhV0ZzY3lBOUlHOXdkR2x2Ym5NdWNHRnlkR2xoYkhNN1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJdVpHVmpiM0poZEc5eWN5QTlJRzl3ZEdsdmJuTXVaR1ZqYjNKaGRHOXljenRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnY21WMExsOWphR2xzWkNBOUlHWjFibU4wYVc5dUtHa3NJR1JoZEdFc0lHSnNiMk5yVUdGeVlXMXpMQ0JrWlhCMGFITXBJSHRjYmlBZ0lDQnBaaUFvZEdWdGNHeGhkR1ZUY0dWakxuVnpaVUpzYjJOclVHRnlZVzF6SUNZbUlDRmliRzlqYTFCaGNtRnRjeWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWNFkyVndkR2x2YmlnbmJYVnpkQ0J3WVhOeklHSnNiMk5ySUhCaGNtRnRjeWNwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEdWdGNHeGhkR1ZUY0dWakxuVnpaVVJsY0hSb2N5QW1KaUFoWkdWd2RHaHpLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkdGRYTjBJSEJoYzNNZ2NHRnlaVzUwSUdSbGNIUm9jeWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjNjbUZ3VUhKdlozSmhiU2hqYjI1MFlXbHVaWElzSUdrc0lIUmxiWEJzWVhSbFUzQmxZMXRwWFN3Z1pHRjBZU3dnTUN3Z1lteHZZMnRRWVhKaGJYTXNJR1JsY0hSb2N5azdYRzRnSUgwN1hHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQjNjbUZ3VUhKdlozSmhiU2hqYjI1MFlXbHVaWElzSUdrc0lHWnVMQ0JrWVhSaExDQmtaV05zWVhKbFpFSnNiMk5yVUdGeVlXMXpMQ0JpYkc5amExQmhjbUZ0Y3l3Z1pHVndkR2h6S1NCN1hHNGdJR1oxYm1OMGFXOXVJSEJ5YjJjb1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEc0Z0lDQWdiR1YwSUdOMWNuSmxiblJFWlhCMGFITWdQU0JrWlhCMGFITTdYRzRnSUNBZ2FXWWdLR1JsY0hSb2N5QW1KaUJqYjI1MFpYaDBJQ0U5SUdSbGNIUm9jMXN3WFNBbUppQWhLR052Ym5SbGVIUWdQVDA5SUdOdmJuUmhhVzVsY2k1dWRXeHNRMjl1ZEdWNGRDQW1KaUJrWlhCMGFITmJNRjBnUFQwOUlHNTFiR3dwS1NCN1hHNGdJQ0FnSUNCamRYSnlaVzUwUkdWd2RHaHpJRDBnVzJOdmJuUmxlSFJkTG1OdmJtTmhkQ2hrWlhCMGFITXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCbWJpaGpiMjUwWVdsdVpYSXNYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXNYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTVvWld4d1pYSnpMQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1zWEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk11WkdGMFlTQjhmQ0JrWVhSaExGeHVJQ0FnSUNBZ0lDQmliRzlqYTFCaGNtRnRjeUFtSmlCYmIzQjBhVzl1Y3k1aWJHOWphMUJoY21GdGMxMHVZMjl1WTJGMEtHSnNiMk5yVUdGeVlXMXpLU3hjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkRVJsY0hSb2N5azdYRzRnSUgxY2JseHVJQ0J3Y205bklEMGdaWGhsWTNWMFpVUmxZMjl5WVhSdmNuTW9abTRzSUhCeWIyY3NJR052Ym5SaGFXNWxjaXdnWkdWd2RHaHpMQ0JrWVhSaExDQmliRzlqYTFCaGNtRnRjeWs3WEc1Y2JpQWdjSEp2Wnk1d2NtOW5jbUZ0SUQwZ2FUdGNiaUFnY0hKdlp5NWtaWEIwYUNBOUlHUmxjSFJvY3lBL0lHUmxjSFJvY3k1c1pXNW5kR2dnT2lBd08xeHVJQ0J3Y205bkxtSnNiMk5yVUdGeVlXMXpJRDBnWkdWamJHRnlaV1JDYkc5amExQmhjbUZ0Y3lCOGZDQXdPMXh1SUNCeVpYUjFjbTRnY0hKdlp6dGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhKbGMyOXNkbVZRWVhKMGFXRnNLSEJoY25ScFlXd3NJR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ2FXWWdLQ0Z3WVhKMGFXRnNLU0I3WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk11Ym1GdFpTQTlQVDBnSjBCd1lYSjBhV0ZzTFdKc2IyTnJKeWtnZTF4dUlDQWdJQ0FnY0dGeWRHbGhiQ0E5SUc5d2RHbHZibk11WkdGMFlWc25jR0Z5ZEdsaGJDMWliRzlqYXlkZE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J3WVhKMGFXRnNJRDBnYjNCMGFXOXVjeTV3WVhKMGFXRnNjMXR2Y0hScGIyNXpMbTVoYldWZE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2doY0dGeWRHbGhiQzVqWVd4c0lDWW1JQ0Z2Y0hScGIyNXpMbTVoYldVcElIdGNiaUFnSUNBdkx5QlVhR2x6SUdseklHRWdaSGx1WVcxcFl5QndZWEowYVdGc0lIUm9ZWFFnY21WMGRYSnVaV1FnWVNCemRISnBibWRjYmlBZ0lDQnZjSFJwYjI1ekxtNWhiV1VnUFNCd1lYSjBhV0ZzTzF4dUlDQWdJSEJoY25ScFlXd2dQU0J2Y0hScGIyNXpMbkJoY25ScFlXeHpXM0JoY25ScFlXeGRPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQndZWEowYVdGc08xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVc1MmIydGxVR0Z5ZEdsaGJDaHdZWEowYVdGc0xDQmpiMjUwWlhoMExDQnZjSFJwYjI1ektTQjdYRzRnSUM4dklGVnpaU0IwYUdVZ1kzVnljbVZ1ZENCamJHOXpkWEpsSUdOdmJuUmxlSFFnZEc4Z2MyRjJaU0IwYUdVZ2NHRnlkR2xoYkMxaWJHOWpheUJwWmlCMGFHbHpJSEJoY25ScFlXeGNiaUFnWTI5dWMzUWdZM1Z5Y21WdWRGQmhjblJwWVd4Q2JHOWpheUE5SUc5d2RHbHZibk11WkdGMFlTQW1KaUJ2Y0hScGIyNXpMbVJoZEdGYkozQmhjblJwWVd3dFlteHZZMnNuWFR0Y2JpQWdiM0IwYVc5dWN5NXdZWEowYVdGc0lEMGdkSEoxWlR0Y2JpQWdhV1lnS0c5d2RHbHZibk11YVdSektTQjdYRzRnSUNBZ2IzQjBhVzl1Y3k1a1lYUmhMbU52Ym5SbGVIUlFZWFJvSUQwZ2IzQjBhVzl1Y3k1cFpITmJNRjBnZkh3Z2IzQjBhVzl1Y3k1a1lYUmhMbU52Ym5SbGVIUlFZWFJvTzF4dUlDQjlYRzVjYmlBZ2JHVjBJSEJoY25ScFlXeENiRzlqYXp0Y2JpQWdhV1lnS0c5d2RHbHZibk11Wm00Z0ppWWdiM0IwYVc5dWN5NW1iaUFoUFQwZ2JtOXZjQ2tnZTF4dUlDQWdJRzl3ZEdsdmJuTXVaR0YwWVNBOUlHTnlaV0YwWlVaeVlXMWxLRzl3ZEdsdmJuTXVaR0YwWVNrN1hHNGdJQ0FnTHk4Z1YzSmhjSEJsY2lCbWRXNWpkR2x2YmlCMGJ5Qm5aWFFnWVdOalpYTnpJSFJ2SUdOMWNuSmxiblJRWVhKMGFXRnNRbXh2WTJzZ1puSnZiU0IwYUdVZ1kyeHZjM1Z5WlZ4dUlDQWdJR3hsZENCbWJpQTlJRzl3ZEdsdmJuTXVabTQ3WEc0Z0lDQWdjR0Z5ZEdsaGJFSnNiMk5ySUQwZ2IzQjBhVzl1Y3k1a1lYUmhXeWR3WVhKMGFXRnNMV0pzYjJOckoxMGdQU0JtZFc1amRHbHZiaUJ3WVhKMGFXRnNRbXh2WTJ0WGNtRndjR1Z5S0dOdmJuUmxlSFFzSUc5d2RHbHZibk1nUFNCN2ZTa2dlMXh1WEc0Z0lDQWdJQ0F2THlCU1pYTjBiM0psSUhSb1pTQndZWEowYVdGc0xXSnNiMk5ySUdaeWIyMGdkR2hsSUdOc2IzTjFjbVVnWm05eUlIUm9aU0JsZUdWamRYUnBiMjRnYjJZZ2RHaGxJR0pzYjJOclhHNGdJQ0FnSUNBdkx5QnBMbVV1SUhSb1pTQndZWEowSUdsdWMybGtaU0IwYUdVZ1lteHZZMnNnYjJZZ2RHaGxJSEJoY25ScFlXd2dZMkZzYkM1Y2JpQWdJQ0FnSUc5d2RHbHZibk11WkdGMFlTQTlJR055WldGMFpVWnlZVzFsS0c5d2RHbHZibk11WkdGMFlTazdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxtUmhkR0ZiSjNCaGNuUnBZV3d0WW14dlkyc25YU0E5SUdOMWNuSmxiblJRWVhKMGFXRnNRbXh2WTJzN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00b1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JwWmlBb1ptNHVjR0Z5ZEdsaGJITXBJSHRjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITWdQU0JWZEdsc2N5NWxlSFJsYm1Rb2UzMHNJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITXNJR1p1TG5CaGNuUnBZV3h6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcFppQW9jR0Z5ZEdsaGJDQTlQVDBnZFc1a1pXWnBibVZrSUNZbUlIQmhjblJwWVd4Q2JHOWpheWtnZTF4dUlDQWdJSEJoY25ScFlXd2dQU0J3WVhKMGFXRnNRbXh2WTJzN1hHNGdJSDFjYmx4dUlDQnBaaUFvY0dGeWRHbGhiQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVjRZMlZ3ZEdsdmJpZ25WR2hsSUhCaGNuUnBZV3dnSnlBcklHOXdkR2x2Ym5NdWJtRnRaU0FySUNjZ1kyOTFiR1FnYm05MElHSmxJR1p2ZFc1a0p5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2NHRnlkR2xoYkNCcGJuTjBZVzVqWlc5bUlFWjFibU4wYVc5dUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCaGNuUnBZV3dvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWs3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUc1dmIzQW9LU0I3SUhKbGRIVnliaUFuSnpzZ2ZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMFJHRjBZU2hqYjI1MFpYaDBMQ0JrWVhSaEtTQjdYRzRnSUdsbUlDZ2haR0YwWVNCOGZDQWhLQ2R5YjI5MEp5QnBiaUJrWVhSaEtTa2dlMXh1SUNBZ0lHUmhkR0VnUFNCa1lYUmhJRDhnWTNKbFlYUmxSbkpoYldVb1pHRjBZU2tnT2lCN2ZUdGNiaUFnSUNCa1lYUmhMbkp2YjNRZ1BTQmpiMjUwWlhoME8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCa1lYUmhPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxlR1ZqZFhSbFJHVmpiM0poZEc5eWN5aG1iaXdnY0hKdlp5d2dZMjl1ZEdGcGJtVnlMQ0JrWlhCMGFITXNJR1JoZEdFc0lHSnNiMk5yVUdGeVlXMXpLU0I3WEc0Z0lHbG1JQ2htYmk1a1pXTnZjbUYwYjNJcElIdGNiaUFnSUNCc1pYUWdjSEp2Y0hNZ1BTQjdmVHRjYmlBZ0lDQndjbTluSUQwZ1ptNHVaR1ZqYjNKaGRHOXlLSEJ5YjJjc0lIQnliM0J6TENCamIyNTBZV2x1WlhJc0lHUmxjSFJvY3lBbUppQmtaWEIwYUhOYk1GMHNJR1JoZEdFc0lHSnNiMk5yVUdGeVlXMXpMQ0JrWlhCMGFITXBPMXh1SUNBZ0lGVjBhV3h6TG1WNGRHVnVaQ2h3Y205bkxDQndjbTl3Y3lrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhCeWIyYzdYRzU5WEc0aVhYMD1cbiIsIi8vIENyZWF0ZSBhIHNpbXBsZSBwYXRoIGFsaWFzIHRvIGFsbG93IGJyb3dzZXJpZnkgdG8gcmVzb2x2ZVxuLy8gdGhlIHJ1bnRpbWUgb24gYSBzdXBwb3J0ZWQgcGF0aC5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2Nqcy9oYW5kbGViYXJzLnJ1bnRpbWUnKVsnZGVmYXVsdCddO1xuIiwiaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnLi4vLi4vbGliL2hhbmRsZWJhcnMvcnVudGltZSc7IGV4cG9ydCBkZWZhdWx0XG5IYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGF0YSAmJiBkYXRhLmZpcnN0KSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg0LCBkYXRhLCAwKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCIyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgPGRpdiBpZD1cXFwic2xpZGVyLXRleHQtZmllbGQtXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmluZGV4IHx8IChkYXRhICYmIGRhdGEuaW5kZXgpKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImluZGV4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcInNsaWRlci10ZXh0LWZpZWxkIHZpc2libGVcXFwiPlxcbiAgICAgICAgICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnNsaWRlVGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNsaWRlVGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInNsaWRlVGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9oMj5cXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwiZXhlcnB0XFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuc2xpZGVUZXh0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zbGlkZVRleHQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInNsaWRlVGV4dFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3A+XFxuICAgICAgICAgICAgPGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5SZWFkIG1vcmU8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxpbWcgaWQ9XFxcInNsaWRlci1pbWFnZS1cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaW5kZXggfHwgKGRhdGEgJiYgZGF0YS5pbmRleCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaW5kZXhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwic2xpZGVyLWltYWdlIHZpc2libGVcXFwiIHNyYz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmltYWdlVXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pbWFnZVVybCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaW1hZ2VVcmxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBhbHQ9XFxcInNsaWRlciBpbWFnZVxcXCI+XFxuXCI7XG59LFwiNFwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgIDxkaXYgaWQ9XFxcInNsaWRlci10ZXh0LWZpZWxkLVwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbmRleCB8fCAoZGF0YSAmJiBkYXRhLmluZGV4KSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpbmRleFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJzbGlkZXItdGV4dC1maWVsZCBoaWRkZW5cXFwiPlxcbiAgICAgICAgICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnNsaWRlVGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNsaWRlVGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInNsaWRlVGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9oMj5cXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwiZXhlcnB0XFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuc2xpZGVUZXh0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zbGlkZVRleHQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInNsaWRlVGV4dFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3A+XFxuICAgICAgICAgICAgPGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5SZWFkIG1vcmU8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxpbWcgaWQ9XFxcInNsaWRlci1pbWFnZS1cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaW5kZXggfHwgKGRhdGEgJiYgZGF0YS5pbmRleCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaW5kZXhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwic2xpZGVyLWltYWdlIGhpZGRlblxcXCIgc3JjPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaW1hZ2VVcmwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltYWdlVXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpbWFnZVVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGFsdD1cXFwic2xpZGVyIGltYWdlXFxcIj5cXG5cIjtcbn0sXCI2XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRhdGEgJiYgZGF0YS5maXJzdCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oOSwgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwiN1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgIDxkaXYgaWQ9XFxcImNvbnRyb2wtYm90dG9tLVwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbmRleCB8fCAoZGF0YSAmJiBkYXRhLmluZGV4KSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpbmRleFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJjb250cm9sLWJvdHRvbSBhY3RpdmVcXFwiIG9uY2xpY2s9XFxcInNsaWRlU2xpZGVySW1hZ2VzKFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbmRleCB8fCAoZGF0YSAmJiBkYXRhLmluZGV4KSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpbmRleFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCIpXFxcIj48L2Rpdj5cXG5cIjtcbn0sXCI5XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgPGRpdiBpZD1cXFwiY29udHJvbC1ib3R0b20tXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmluZGV4IHx8IChkYXRhICYmIGRhdGEuaW5kZXgpKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImluZGV4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImNvbnRyb2wtYm90dG9tXFxcIiBvbmNsaWNrPVxcXCJzbGlkZVNsaWRlckltYWdlcyhcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaW5kZXggfHwgKGRhdGEgJiYgZGF0YS5pbmRleCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaW5kZXhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiKVxcXCI+PC9kaXY+XFxuXCI7XG59LFwiMTFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cXFwiYXJ0aWNsZS1leGVycHRcXFwiPlxcbiAgICAgICAgICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmFydGljbGVUaXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYXJ0aWNsZVRpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJhcnRpY2xlVGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9oMj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbWFnZS13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbWFnZVVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1hZ2VVcmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImltYWdlVXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgYWx0PVxcXCJcXFwiLz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwiZXhlcnB0XFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuYXJ0aWNsZVRleHQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFydGljbGVUZXh0IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJhcnRpY2xlVGV4dFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3A+XFxuICAgICAgICA8L2FydGljbGU+XFxuXCI7XG59LFwiMTNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuICgoc3RhY2sxID0gKGhlbHBlcnMuaXNTbWFsbGVyVGhhbjcgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaXNTbWFsbGVyVGhhbjcpIHx8IGhlbHBlcnMuaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkYXRhICYmIGRhdGEuaW5kZXgpLHtcIm5hbWVcIjpcImlzU21hbGxlclRoYW43XCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDE0LCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSgxNiwgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwiMTRcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1lZGlhLWl0ZW0gdG9vbHRpcCB2aXNpYmxlXFxcIj48c3BhbiBjbGFzcz1cXFwidG9vbHRpcC10ZXh0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5tdWx0aW1lZGlhVGV4dCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubXVsdGltZWRpYVRleHQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm11bHRpbWVkaWFUZXh0XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaW1hZ2VVcmwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltYWdlVXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpbWFnZVVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGFsdD1cXFwiTXVsdGltZWRpYSBpbWFnZVxcXCIvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cIjtcbn0sXCIxNlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibWVkaWEtaXRlbSB0b29sdGlwIGhpZGRlblxcXCI+PHNwYW4gY2xhc3M9XFxcInRvb2x0aXAtdGV4dFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubXVsdGltZWRpYVRleHQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm11bHRpbWVkaWFUZXh0IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJtdWx0aW1lZGlhVGV4dFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmltYWdlVXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pbWFnZVVybCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaW1hZ2VVcmxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBhbHQ9XFxcIk11bHRpbWVkaWEgaW1hZ2VcXFwiLz5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiPGRpdiBpZD1cXFwic2xpZGVyXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2hhZG93LXRvcFxcXCI+PC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcInNsaWRlci1jb250cm9scy1sZWZ0XFxcIiBvbmNsaWNrPVxcXCJzbGlkZURpcmVjdGlvbigtMSlcXFwiID48aSBjbGFzcz1cXFwiZmEgZmEtYW5nbGUtbGVmdCBmYS0yeFxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvaT48L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwic2xpZGVyLWltYWdlc1xcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zbGlkZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJzbGlkZXItY29udHJvbHMtcmlnaHRcXFwiIG9uY2xpY2s9XFxcInNsaWRlRGlyZWN0aW9uKDEpXFxcIiA+PGkgY2xhc3M9XFxcImZhIGZhLWFuZ2xlLXJpZ2h0IGZhLTJ4XFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzaGFkb3ctYm90dG9tXFxcIj48L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwic2xpZGVyLWNvbnRyb2xzLWJvdHRvbVxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zbGlkZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNiwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvZGl2PlxcbjxkaXYgaWQ9XFxcInF1b3RlXFxcIj5cXG4gICAgPGgxPlxcXCJDaGFtZWxlb24gaXMgYW4gZXh0cmVtZWx5IHZlcnNhdGlsZSB0aGVtZSB3aXRoIGEgbWlyaWFkIG9mIG9wdGlvbnMgYW5kIHN0eWxlc1xcXCI8L2gxPlxcbiAgICA8cD5FdCBhbmltIGVzc2UgZWxpdCBlc3Qgb2ZmaWNpYSBudWxsYSBjdWxwYSBleCBpZCBpcHN1bSBkb2xvcmUgcHJvaWRlbnQgdmVsaXQuPC9wPlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvZGl2PlxcbjxtYWluIGlkPVxcXCJtYWluLWhvbWVcXFwiPlxcbiAgICA8c2VjdGlvbiBpZD1cXFwiYXJ0aWNsZXNcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYXJ0aWNsZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMTEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L3NlY3Rpb24+XFxuICAgIDxzZWN0aW9uIGlkPVxcXCJtZWRpYVxcXCI+XFxuICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cXFwibGlua3Mtd2lkZ2V0XFxcIj5cXG4gICAgICAgICAgICA8aDIgY2xhc3M9XFxcImhlYWRpbmdcXFwiPkZyb20gdGhlIGJsb2c8L2gyPlxcbiAgICAgICAgICAgIDx1bD5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+Q29uc2VxdWF0IGlkIGFuaW0gc3VudDwvYT48L2xpPlxcbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5BdXRlIHByb2lkZW50IGRvbG9yZTwvYT48L2xpPlxcbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5FeGVyY2l0YXRpb24gYW1ldDwvYT48L2xpPlxcbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5UZW1wb3IgbWFnbmEgbnVsbGE8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+VGVtcG9yIHN1bnQgZXhjZXB0ZXVyPC9hPjwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPk5vbiBhbGlxdWlwIG51bGxhIHV0cjwvYT48L2xpPlxcbiAgICAgICAgICAgIDwvdWw+XFxuICAgICAgICA8L2FydGljbGU+XFxuICAgICAgICA8YXJ0aWNsZSBpZD1cXFwibXVsdGktbWVkaWFcXFwiPlxcbiAgICAgICAgICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+TXVsdGktbWVkaWE8L2gyPlxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcIm1lZGlhLXdyYXBwZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJtZWRpYS1jb250cm9scy1sZWZ0XFxcIiBvbmNsaWNrPVxcXCJzbGlkZU11bHRpbWVkaWFJbWFnZXMoJ2xlZnQnKVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLWFuZ2xlLWxlZnQgZmEtbGdcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48L2k+PC9kaXY+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tdWx0aW1lZGlhIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEzLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwibWVkaWEtY29udHJvbHMtcmlnaHRcXFwiIG9uY2xpY2s9XFxcInNsaWRlTXVsdGltZWRpYUltYWdlcygncmlnaHQnKVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLWFuZ2xlLXJpZ2h0IGZhLWxnXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9hcnRpY2xlPlxcbiAgICA8L3NlY3Rpb24+XFxuPC9tYWluPlxcblwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkiLCJpbXBvcnQgc2xpZGVzRGF0YSBmcm9tICcuLi9kYXRhL3NsaWRlcy5kYXRhJztcbmltcG9ydCBhcnRpY2xlc0RhdGEgZnJvbSAnLi4vZGF0YS9hcnRpY2xlcy5kYXRhJztcbmltcG9ydCBtdWx0aW1lZGlhRGF0YSBmcm9tICcuLi9kYXRhL211bHRpbWVkaWEuZGF0YSc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vanMvdGVtcGxhdGVzJztcbmltcG9ydCBjb21waWxlZFRlbXBsYXRlIGZyb20gJy4uL3RlbXBsYXRlcy9wcmVjb21waWxlZC9ob21lLnRlbXBsYXRlJztcbmltcG9ydCBIYW5kbGViYXJzIGZyb20gJy4uL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUnXG5cbi8vIGNvbnNvbGUubG9nKGNvbXBpbGVkVGVtcGxhdGUpO1xuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaXNTbWFsbGVyVGhhbjcnLCBmdW5jdGlvbihpbmRleCwgb3B0aW9ucykge1xuICAgIGlmIChpbmRleCA8IDcpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gfSk7XG5jbGFzcyBIb21lQ29udHJvbGVyIHtcbiAgICBzaG93SG9tZVBhZ2UoKSB7XG4gICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHNsaWRlc0RhdGEuZ2V0U2xpZGVzKCksXG4gICAgICAgICAgICBhcnRpY2xlc0RhdGEuZ2V0QXJ0aWNsZXMoKSxcbiAgICAgICAgICAgIG11bHRpbWVkaWFEYXRhLmdldE11bHRpbWVkaWEoKSxcbiAgICAgICAgICAgIC8vIHRlbXBsYXRlLmNvbXBpbGVUZW1wbGF0ZSgnaG9tZScpLFxuICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIC50aGVuKChbc2xpZGVzLCBhcnRpY2xlcywgbXVsdGltZWRpYV0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBob21lRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzOiBzbGlkZXMsXG4gICAgICAgICAgICAgICAgICAgIGFydGljbGVzOiBhcnRpY2xlcyxcbiAgICAgICAgICAgICAgICAgICAgbXVsdGltZWRpYTogbXVsdGltZWRpYSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29tcGlsZWRUZW1wbGF0ZShob21lRGF0YSkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChodG1sKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgICAgICAgICAgICAgLy8gc2NyaXB0LnNyYyA9ICcuLi9qcy91dGlscy9tYWluU2xpZGVyLmpzJztcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5jb25zdCBob21lQ29udHJvbGxlciA9IG5ldyBIb21lQ29udHJvbGVyO1xuZXhwb3J0IGRlZmF1bHQgaG9tZUNvbnRyb2xsZXI7XG5cbiIsImltcG9ydCBkYiBmcm9tICcuL2RhdGFiYXNlJztcbmNsYXNzIENhdGVnb3JpZXNEYXRhIHtcbiAgICBhZGRDYXRlZ29yeShjYXRlZ29yeSkge1xuICAgICAgICByZXR1cm4gZGIucmVmKCkuY2hpbGQoYGNhdGVnb3JpZXMvJHtjYXRlZ29yeS5jYXRlZ29yeU5hbWV9YClcbiAgICAgICAgICAgIC5vbmNlKCd2YWx1ZScpXG4gICAgICAgICAgICAudGhlbigoc25hcHNob3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0NhdGVnb3J5IGFscmVhZHkgZXhpc3RzIScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRiLnJlZihgY2F0ZWdvcmllcy9gKS5jaGlsZChjYXRlZ29yeS5jYXRlZ29yeU5hbWUpLnNldChjYXRlZ29yeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldENhdGVnb3J5TmFtZXMoKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gW107XG4gICAgICAgIHJldHVybiBkYi5yZWYoKS5jaGlsZCgnY2F0ZWdvcmllcycpLm9uY2UoJ3ZhbHVlJywgKHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICBzbmFwc2hvdC5mb3JFYWNoKChjYXRlZ29yeSkgPT4ge1xuICAgICAgICAgICAgICAgbmFtZXMucHVzaChjYXRlZ29yeS52YWwoKS5jYXRlZ29yeU5hbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGNhdGVnb3JpZXM6IG5hbWVzIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0Q2F0ZWdvcnkoY2F0ZWdvcnlOYW1lLCBwb3N0c1BlclBhZ2UpIHtcbiAgICAgICAgbGV0IGNhdGVnb3J5UG9zdHM7XG4gICAgICAgIGxldCBudW1iZXJPZlBhZ2VzO1xuICAgICAgICBjb25zdCBwYWdlcyA9IFtdO1xuICAgICAgICBkYi5yZWYoJ2NhdGVnb3JpZXMvJykuY2hpbGQoY2F0ZWdvcnlOYW1lKS5jaGlsZCgnY2F0ZWdvcnlQb3N0cycpLm9yZGVyQnlLZXkoKS5saW1pdFRvRmlyc3QocG9zdHNQZXJQYWdlKVxuICAgICAgICAgICAgLm9uY2UoJ3ZhbHVlJylcbiAgICAgICAgICAgIC50aGVuKChzbmFwc2hvdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5UG9zdHMgPSBzbmFwc2hvdC52YWwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBkYi5yZWYoYGNhdGVnb3JpZXMvJHtjYXRlZ29yeU5hbWV9YCkuY2hpbGQoJ251bWJlck9mUG9zdHMnKS5vbmNlKCd2YWx1ZScpXG4gICAgICAgIC50aGVuKChzbmFwc2hvdCkgPT4ge1xuICAgICAgICAgICAgbnVtYmVyT2ZQYWdlcyA9IE1hdGguY2VpbChzbmFwc2hvdC52YWwoKSAvIHBvc3RzUGVyUGFnZSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBudW1iZXJPZlBhZ2VzOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGIucmVmKGBjYXRlZ29yaWVzLyR7Y2F0ZWdvcnlOYW1lfWApLmNoaWxkKCdjYXRlZ29yeURlc2NyaXB0aW9uJykub25jZSgndmFsdWUnKVxuICAgICAgICAgICAgLnRoZW4oKHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB7fTtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeS5jYXRlZ29yeU5hbWUgPSBjYXRlZ29yeU5hbWU7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnkuY2F0ZWdvcnlEZXNjcmlwdGlvbiA9IHNuYXBzaG90LnZhbCgpO1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5LmNhdGVnb3J5UG9zdHMgPSBjYXRlZ29yeVBvc3RzO1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5LmNhdGVnb3J5UGFnZXMgPSBwYWdlcztcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhdGVnb3J5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Q2F0ZWdvcnlQb3N0c1BhZ2UoY3VycmVudFBhZ2UsIHJlcXVlc3RlZFBhZ2UsIHBvc3RzUGVyUGFnZSwgY2F0ZWdvcnlOYW1lKSB7XG4gICAgICAgIGxldCBjYXRlZ29yeVBvc3RzO1xuICAgICAgICBpZiAocmVxdWVzdGVkUGFnZSA+IGN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncG9zdCcpW3Bvc3RzUGVyUGFnZS0xXS5pZDtcbiAgICAgICAgICAgIHJldHVybiBkYi5yZWYoJ2NhdGVnb3JpZXMvJykuY2hpbGQoY2F0ZWdvcnlOYW1lKS5jaGlsZCgnY2F0ZWdvcnlQb3N0cycpLm9yZGVyQnlLZXkoKS5zdGFydEF0KHN0YXJ0SWQpLmxpbWl0VG9GaXJzdChwb3N0c1BlclBhZ2UgKyAxKVxuICAgICAgICAgICAgICAgIC5vbmNlKCd2YWx1ZScsIChzbmFwc2hvdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5UG9zdHMgPSBzbmFwc2hvdC52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNhdGVnb3J5UG9zdHNbc3RhcnRJZF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBwb3N0czogY2F0ZWdvcnlQb3N0cyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW5kSWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwb3N0JylbMF0uaWQ7XG4gICAgICAgICAgICByZXR1cm4gZGIucmVmKCdjYXRlZ29yaWVzLycpLmNoaWxkKGNhdGVnb3J5TmFtZSkuY2hpbGQoJ2NhdGVnb3J5UG9zdHMnKS5vcmRlckJ5S2V5KCkuZW5kQXQoZW5kSWQpLmxpbWl0VG9MYXN0KHBvc3RzUGVyUGFnZSArIDEpXG4gICAgICAgICAgICAgICAgLm9uY2UoJ3ZhbHVlJywgKHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNuYXBzaG90KTtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlQb3N0cyA9IHNuYXBzaG90LnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2F0ZWdvcnlQb3N0c1tlbmRJZF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBwb3N0czogY2F0ZWdvcnlQb3N0cyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IGNhdGVnb3JpZXNEYXRhID0gbmV3IENhdGVnb3JpZXNEYXRhO1xuZXhwb3J0IGRlZmF1bHQgY2F0ZWdvcmllc0RhdGE7XG4iLCJpbXBvcnQgZGIgZnJvbSAnLi9kYXRhYmFzZSc7XG5pbXBvcnQgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UnO1xuXG5jbGFzcyBQb3N0c0RhdGEge1xuICAgIGdldFBvc3QocG9zdElkKSB7XG4gICAgICAgIHJldHVybiBkYi5yZWYoJ3Bvc3RzJykuY2hpbGQocG9zdElkKS5vbmNlKCd2YWx1ZScpXG4gICAgICAgICAgICAudGhlbigoc25hcHNob3QpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3N0ID0gc25hcHNob3QudmFsKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwb3N0KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZFBvc3QocG9zdCkge1xuICAgICAgICBjb25zdCB1cGxvYWRUYXNrID0gc3RvcmFnZS5jaGlsZChgcG9zdGltYWdlcy8ke3Bvc3QucG9zdFRpdGxlfS8ke3Bvc3QucG9zdEltYWdlLm5hbWV9YCkucHV0KHBvc3QucG9zdEltYWdlKTtcblxuICAgICAgICB1cGxvYWRUYXNrLm9uKCdzdGF0ZV9jaGFuZ2VkJyxcbiAgICAgICAgICAgIChzbmFwc2hvdCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KGVycm9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBzdG9yYWdlLmNoaWxkKGBwb3N0aW1hZ2VzLyR7cG9zdC5wb3N0VGl0bGV9LyR7cG9zdC5wb3N0SW1hZ2UubmFtZX1gKS5nZXREb3dubG9hZFVSTCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGltYWdlVXJsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Bvc3RLZXkgPSBkYi5yZWYoKS5jaGlsZCgncG9zdHMnKS5wdXNoKCkua2V5O1xuICAgICAgICAgICAgICAgICAgICBwb3N0LnBvc3RJZCA9bmV3UG9zdEtleTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzW2Bwb3N0cy8ke25ld1Bvc3RLZXl9YF0gPSBwb3N0O1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzW2BjYXRlZ29yaWVzLyR7cG9zdC5wb3N0Q2F0ZWdvcnl9L2NhdGVnb3J5UG9zdHMvJHtuZXdQb3N0S2V5fWBdID0gcG9zdDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGIucmVmKCkudXBkYXRlKHVwZGF0ZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWRkQ29tbWVudChjYXRlZ29yeU5hbWUsIHBvc3RJZCwgY29tbWVudCkge1xuICAgICAgICBsZXQgY29tbWVudHNOdW1iZXI7XG4gICAgICAgIGNvbnN0IG5ld0NvbW1lbnRLZXkgPSBkYi5yZWYoKS5jaGlsZCgnY29tbWVudHMnKS5wdXNoKCkua2V5O1xuICAgICAgICBjb25zdCB1cGRhdGVzID0ge307XG5cbiAgICAgICAgZGIucmVmKGBjYXRlZ29yaWVzLyR7Y2F0ZWdvcnlOYW1lfS9jYXRlZ29yeVBvc3RzLyR7cG9zdElkfWApXG4gICAgICAgICAgICAub25jZSgndmFsdWUnKVxuICAgICAgICAgICAgLnRoZW4oKHNuYXBzaG90KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc25hcHNob3QudmFsKCkpO1xuICAgICAgICAgICAgICAgIGNvbW1lbnRzTnVtYmVyID0gc25hcHNob3QudmFsKCkubnVtYmVyT2ZDb21tZW50cyArIDE7XG4gICAgICAgICAgICAgICAgdXBkYXRlc1tgcG9zdHMvJHtwb3N0SWR9L3Bvc3RDb21tZW50cy8ke25ld0NvbW1lbnRLZXl9YF0gPSBjb21tZW50O1xuICAgICAgICAgICAgICAgIHVwZGF0ZXNbYGNvbW1lbnRzLyR7bmV3Q29tbWVudEtleX1gXSA9IGNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgdXBkYXRlc1tgcG9zdHMvJHtwb3N0SWR9L251bWJlck9mQ29tbWVudHNgXSA9IGNvbW1lbnRzTnVtYmVyO1xuICAgICAgICAgICAgICAgIHVwZGF0ZXNbYGNhdGVnb3JpZXMvJHtjYXRlZ29yeU5hbWV9L2NhdGVnb3J5UG9zdHMvJHtwb3N0SWR9L251bWJlck9mQ29tbWVudHNgXSA9IGNvbW1lbnRzTnVtYmVyO1xuICAgICAgICAgICAgICAgIGRiLnJlZigpLnVwZGF0ZSh1cGRhdGVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgcG9zdERhdGEgPSBuZXcgUG9zdHNEYXRhO1xuZXhwb3J0IGRlZmF1bHQgcG9zdERhdGE7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhcklucHV0cygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgdGV4dGFyZWEnKVxuICAgICAgICAuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cbiIsImNvbnN0IHBvc3RzUGVyUGFnZSA9IDM7XG5jb25zdCBNT05USFMgPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXTtcbmNvbnN0IGZpcmViYXNlQ29uZmlnID0ge1xuICAgIGFwaUtleTogXCJBSXphU3lDWHAxR0tsZm9URjRlWTQ5dHgyaW5aU09yRTNwZWltTlFcIixcbiAgICBhdXRoRG9tYWluOiBcInBob3RvLWJsb2ctODU3MzkuZmlyZWJhc2VhcHAuY29tXCIsXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9waG90by1ibG9nLTg1NzM5LmZpcmViYXNlaW8uY29tXCIsXG4gICAgcHJvamVjdElkOiBcInBob3RvLWJsb2ctODU3MzlcIixcbiAgICBzdG9yYWdlQnVja2V0OiBcInBob3RvLWJsb2ctODU3MzkuYXBwc3BvdC5jb21cIixcbiAgICBtZXNzYWdpbmdTZW5kZXJJZDogXCI3MzU3ODYxNjg5MTNcIlxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcG9zdHNQZXJQYWdlLFxuICAgIE1PTlRIUyxcbiAgICBmaXJlYmFzZUNvbmZpZyxcbn07XG4iLCJpbXBvcnQgSGFuZGxlYmFycyBmcm9tICcuLi8uLi9saWIvaGFuZGxlYmFycy9ydW50aW1lJzsgZXhwb3J0IGRlZmF1bHRcbkhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgPG9wdGlvbiBzZWxlY3RlZCBkaXNhYmxlZD5zZWxlY3QgY2F0ZWdvcnk8L29wdGlvbj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXRlZ29yaWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDIsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICA8b3B0aW9uIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMShkZXB0aDAsIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoZGVwdGgwLCBkZXB0aDApKVxuICAgICsgXCI8L29wdGlvbj5cXG5cIjtcbn0sXCI0XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIgICAgPG9wdGlvbiBzZWxlY3RlZCBkaXNhYmxlZD5hZGQgY2F0ZWdvcnkgZmlyc3Q8L29wdGlvbj5cXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxzZWN0aW9uIGlkPVxcXCJhZGQtc2xpZGVcXFwiPlxcbiAgICA8aDIgY2xhc3M9XFxcImhlYWRpbmdcXFwiPkFkZCBuZXcgc2xpZGU8L2gyPlxcbiAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgaWQ9XFxcImlucHV0LXNsaWRlLXRpdGxlXFxcIiBwbGFjZWhvbGRlcj1cXFwiU2xpZGUgVGl0bGVcXFwiIHJlcXVpcmVkPlxcbiAgICA8dGV4dGFyZWEgbmFtZT1cXFwic2xpZGVfdGV4dFxcXCIgaWQ9XFxcImlucHV0LXNsaWRlLXRleHRcXFwiIGNvbHM9XFxcIjMwXFxcIiByb3dzPVxcXCIxMFxcXCIgIHBsYWNlaG9sZGVyPVxcXCJTbGlkZSBUZXh0XFxcIiByZXF1aXJlZD48L3RleHRhcmVhPlxcbiAgICA8aW5wdXQgdHlwZT1cXFwiZmlsZVxcXCIgbmFtZT1cXFwiaW5wdXRfc2xpZGVfaW1hZ2VcXFwiIGlkPVxcXCJpbnB1dC1zbGlkZS1pbWFnZVxcXCIgcmVxdWlyZWQ+XFxuICAgIDxidXR0b24gaWQ9XFxcInNsaWRlLWJ1dHRvblxcXCIgY2xhc3M9XFxcImFkbWluLWJ1dHRvblxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiBvbmNsaWNrPVxcXCJ3aW5kb3cubG9jYXRpb24uaGFzaD0nYWRtaW4vYWRkbmV3c2xpZGUnXFxcIj5BZGQgc2xpZGU8L2J1dHRvbj5cXG48L3NlY3Rpb24+XFxuPGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PC9kaXY+XFxuPHNlY3Rpb24gaWQ9XFxcImFkZC1jYXRlZ29yeVxcXCI+XFxuICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+QWRkIG5ldyBDYXRlZ29yeTwvaDI+XFxuICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJjYXRlZ29yeW5hbWVcXFwiIGlkPVxcXCJpbnB1dC1jYXRlZ29yeS1uYW1lXFxcIiBwbGFjZWhvbGRlcj1cXFwiQ2F0ZWdvcnkgbmFtZVxcXCIgcmVxdWlyZWQ+XFxuICAgIDx0ZXh0YXJlYSBuYW1lPVxcXCJjYXRlZ29yeV9kZXNjcmlwdGlvblxcXCIgaWQ9XFxcImlucHV0LWNhdGVnb3J5LWRlc2NyaXB0aW9uXFxcIiBjb2xzPVxcXCIzMFxcXCIgcm93cz1cXFwiMTBcXFwiICBwbGFjZWhvbGRlcj1cXFwiQ2F0ZWdvcnkgZGFzY3JpcHRpb25cXFwiIHJlcXVpcmVkPjwvdGV4dGFyZWE+XFxuICAgIDxidXR0b24gaWQ9XFxcImNhdGVnb3J5LWJ1dHRvblxcXCIgY2xhc3M9XFxcImFkbWluLWJ1dHRvblxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiBvbmNsaWNrPVxcXCJ3aW5kb3cubG9jYXRpb24uaGFzaD0nYWRtaW4vYWRkbmV3Y2F0ZWdvcnknXFxcIj5BZGQgY2F0ZWdvcnk8L2J1dHRvbj5cXG48L3NlY3Rpb24+XFxuPGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PC9kaXY+XFxuPHNlY3Rpb24gaWQ9XFxcImFkZC1wb3N0XFxcIj5cXG4gICAgPGgyIGNsYXNzPVxcXCJoZWFkaW5nXFxcIj5BZGQgbmV3IFBvc3Q8L2gyPlxcbiAgICA8c2VsZWN0IHR5cGU9XFxcInRleHRcXFwiIG5hbWU9XFxcInBvc3RjYXRlZ29yeVxcXCIgaWQ9XFxcImlucHV0LXBvc3QtY2F0ZWdvcnlcXFwiIHBsYWNlaG9sZGVyPVxcXCJQb3N0IGNhdGVnb3J5XFxcIiByZXF1aXJlZD5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXRlZ29yaWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg0LCBkYXRhLCAwKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9zZWxlY3Q+XFxuICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJwb3N0dGl0bGVcXFwiIGlkPVxcXCJpbnB1dC1wb3N0LXRpdGxlXFxcIiBwbGFjZWhvbGRlcj1cXFwiUG9zdCB0aXRsZVxcXCIgcmVxdWlyZWQ+XFxuICAgIDx0ZXh0YXJlYSBuYW1lPVxcXCJwb3N0dGV4dFxcXCIgaWQ9XFxcImlucHV0LXBvc3QtdGV4dFxcXCIgY29scz1cXFwiMzBcXFwiIHJvd3M9XFxcIjEwXFxcIiBwbGFjZWhvbGRlcj1cXFwiUG9zdCB0ZXh0XFxcIiByZXF1aXJlZD48L3RleHRhcmVhPiAgICAgXFxuICAgIDxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBuYW1lPVxcXCJpbnB1dF9wb3N0X2ltYWdlXFxcIiBpZD1cXFwiaW5wdXQtcG9zdC1pbWFnZVxcXCIgcmVxdWlyZWQ+XFxuICAgIDxidXR0b24gaWQ9XFxcInBvc3QtYnV0dG9uXFxcIiBjbGFzcz1cXFwiYWRtaW4tYnV0dG9uXFxcIiB0eXBlPVxcXCJzdWJtaXRcXFwiIG9uY2xpY2s9XFxcIndpbmRvdy5sb2NhdGlvbi5oYXNoPSdhZG1pbi9hZGRubmV3cG9zdCdcXFwiPkFkZCBwb3N0PC9idXR0b24+XFxuPC9zZWN0aW9uPlxcbjxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvZGl2PlxcbjxzZWN0aW9uIGlkPVxcXCJhZGQtbXVsdGltZWRpYVxcXCI+XFxuICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+QWRkIG5ldyBNdWx0aW1lZGlhPC9oMj5cXG4gICAgPHRleHRhcmVhIG5hbWU9XFxcInBvc3R0ZXh0XFxcIiBpZD1cXFwiaW5wdXQtbXVsdGltZWRpYS10ZXh0XFxcIiBjb2xzPVxcXCIzMFxcXCIgcm93cz1cXFwiMTBcXFwiIHBsYWNlaG9sZGVyPVxcXCJNdWx0aW1lZGlhIHRleHRcXFwiIHJlcXVpcmVkPjwvdGV4dGFyZWE+IFxcbiAgICA8aW5wdXQgdHlwZT1cXFwiZmlsZVxcXCIgbmFtZT1cXFwibXVsdGltZWRpYVxcXCIgaWQ9XFxcImlucHV0LW11bHRpbWVkaWEtaW1hZ2VcXFwiIHJlcXVpcmVkPlxcbiAgICA8YnV0dG9uIGlkPVxcXCJtdWx0aW1lZGlhLWJ1dHRvblxcXCIgY2xhc3M9XFxcImFkbWluLWJ1dHRvblxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiBvbmNsaWNrPVxcXCJ3aW5kb3cubG9jYXRpb24uaGFzaD0nYWRtaW4vYWRkbmV3bXVsdGltZWRpYSdcXFwiPkFkZCBtdWx0aW1lZGlhPC9idXR0b24+XFxuPC9zZWN0aW9uPlxcbjxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvZGl2PlxcbjxzZWN0aW9uIGlkPVxcXCJhZGQtc2xpZGVcXFwiPlxcbiAgICA8aDIgY2xhc3M9XFxcImhlYWRpbmdcXFwiPkFkZCBuZXcgQXJ0aWNsZTwvaDI+XFxuICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBpZD1cXFwiaW5wdXQtYXJ0aWNsZS10aXRsZVxcXCIgcGxhY2Vob2xkZXI9XFxcIkFydGljbGUgVGl0bGVcXFwiIHJlcXVpcmVkPlxcbiAgICA8dGV4dGFyZWEgbmFtZT1cXFwiYXJ0aWNsZV90ZXh0XFxcIiBpZD1cXFwiaW5wdXQtYXJ0aWNsZS10ZXh0XFxcIiBjb2xzPVxcXCIzMFxcXCIgcm93cz1cXFwiMTBcXFwiICBwbGFjZWhvbGRlcj1cXFwiQXJ0aWNsZSBUZXh0XFxcIiByZXF1aXJlZD48L3RleHRhcmVhPlxcbiAgICA8aW5wdXQgdHlwZT1cXFwiZmlsZVxcXCIgbmFtZT1cXFwiaW5wdXRfYXJ0aWNsZV9pbWFnZVxcXCIgaWQ9XFxcImlucHV0LWFydGljbGUtaW1hZ2VcXFwiIHJlcXVpcmVkPlxcbiAgICA8YnV0dG9uIGlkPVxcXCJzbGlkZS1idXR0b25cXFwiIGNsYXNzPVxcXCJhZG1pbi1idXR0b25cXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCIgb25jbGljaz1cXFwid2luZG93LmxvY2F0aW9uLmhhc2g9J2FkbWluL2FkZG5ld2FydGljbGUnXFxcIj5BZGQgYXJ0aWNsZTwvYnV0dG9uPlxcbjwvc2VjdGlvbj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pIiwiLyogZ2xvYmFsIGZpcmViYXNlLHJvdXRlciAqL1xuXG5pbXBvcnQgY2F0ZWdvcmllc0RhdGEgZnJvbSAnLi4vZGF0YS9jYXRlZ29yaWVzLmRhdGEnO1xuaW1wb3J0IHNsaWRlc0RhdGEgZnJvbSAnLi4vZGF0YS9zbGlkZXMuZGF0YSc7XG5pbXBvcnQgcG9zdHNEYXRhIGZyb20gJy4uL2RhdGEvcG9zdHMuZGF0YSc7XG5pbXBvcnQgbXVsdGltZWRpYURhdGEgZnJvbSAnLi4vZGF0YS9tdWx0aW1lZGlhLmRhdGEnO1xuaW1wb3J0IGFydGljbGVzRGF0YSBmcm9tICcuLi9kYXRhL2FydGljbGVzLmRhdGEnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4uL2pzL3RlbXBsYXRlcyc7XG5pbXBvcnQgY2xlYXJJbnB1dHMgZnJvbSAnLi4vanMvdXRpbHMvY2xlYXJJbnB1dHMnO1xuaW1wb3J0IHNldHRpbmdzIGZyb20gJy4uL2pzL3V0aWxzL3NldHRpbmdzJztcbmltcG9ydCBjb21waWxlZFRlbXBsYXRlIGZyb20gJy4uL3RlbXBsYXRlcy9wcmVjb21waWxlZC9hZG1pbi50ZW1wbGF0ZSc7XG5cbmNsYXNzIEFkbWluQ29udHJvbGxlciB7XG4gICAgc2hvd0FkbWluUGFnZSgpIHtcbiAgICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgY2F0ZWdvcmllc0RhdGEuZ2V0Q2F0ZWdvcnlOYW1lcygpLFxuICAgICAgICAgICAgLy8gdGVtcGxhdGUuY29tcGlsZVRlbXBsYXRlKCdhZG1pbicpLFxuICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIC50aGVuKChbY2F0ZWdvcmllc10pID0+IHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJykuaW5uZXJIVE1MID0gY29tcGlsZWRUZW1wbGF0ZShjYXRlZ29yaWVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZE5ld011bHRpbWVkaWEoKSB7XG4gICAgICAgIGNvbnN0IG11bHRpbWVkaWFJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1tdWx0aW1lZGlhLWltYWdlJykuZmlsZXNbMF07XG4gICAgICAgIGNvbnN0IG11bHRpbWVkaWFUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LW11bHRpbWVkaWEtdGV4dCcpLnZhbHVlO1xuXG4gICAgICAgIHJldHVybiBtdWx0aW1lZGlhRGF0YS5hZGRNdWx0aW1lZGlhKG11bHRpbWVkaWFJbWFnZSwgbXVsdGltZWRpYVRleHQpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnB1dHMoKTtcbiAgICAgICAgICAgICAgICBhbGVydCgnTmV3IG11bHRpbWVkaWEgYWRkZWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZE5ld0FydGljbGUoKSB7XG4gICAgICAgIGNvbnN0IGFydGljbGVJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1hcnRpY2xlLWltYWdlJykuZmlsZXNbMF07XG4gICAgICAgIGNvbnN0IGFydGljbGVUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1hcnRpY2xlLXRpdGxlJykudmFsdWU7XG4gICAgICAgIGNvbnN0IGFydGljbGVUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LWFydGljbGUtdGV4dCcpLnZhbHVlO1xuXG4gICAgICAgIHJldHVybiBhcnRpY2xlc0RhdGEuYWRkQXJ0aWNsZShhcnRpY2xlSW1hZ2UsIGFydGljbGVUaXRsZSwgYXJ0aWNsZVRleHQpXG4gICAgICAgICAgICAudGhlbigobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFySW5wdXRzKCk7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ05ldyBhcnRpY2xlIGFkZGVkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGROZXdTbGlkZSgpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1zbGlkZS1pbWFnZScpLmZpbGVzWzBdO1xuICAgICAgICBjb25zdCBzbGlkZVRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LXNsaWRlLXRpdGxlJykudmFsdWU7XG4gICAgICAgIGNvbnN0IHNsaWRlVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1zbGlkZS10ZXh0JykudmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHNsaWRlc0RhdGEuYWRkU2xpZGUoc2xpZGVJbWFnZSwgc2xpZGVUaXRsZSwgc2xpZGVUZXh0KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFySW5wdXRzKCk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zaG93QWRtaW5QYWdlKCk7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ05ldyBzbGlkZSBhZGRlZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWRkTmV3Q2F0ZWdvcnkoKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0ge1xuICAgICAgICAgICAgY2F0ZWdvcnlOYW1lOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtY2F0ZWdvcnktbmFtZScpLnZhbHVlLFxuICAgICAgICAgICAgY2F0ZWdvcnlEZXNjcmlwdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LWNhdGVnb3J5LWRlc2NyaXB0aW9uJykudmFsdWUsXG4gICAgICAgICAgICBudW1iZXJPZlBvc3RzOiAwLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBjYXRlZ29yaWVzRGF0YS5hZGRDYXRlZ29yeShjYXRlZ29yeSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93QWRtaW5QYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdOZXcgY2F0ZWdvcnkgYWRkZWQnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGROZXdQb3N0KCkge1xuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IHBvc3QgPSB7XG4gICAgICAgICAgICBwb3N0SW1hZ2U6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1wb3N0LWltYWdlJykuZmlsZXNbMF0sXG4gICAgICAgICAgICBwb3N0VGl0bGU6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1wb3N0LXRpdGxlJykudmFsdWUsXG4gICAgICAgICAgICBwb3N0VGV4dDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LXBvc3QtdGV4dCcpLnZhbHVlLFxuICAgICAgICAgICAgcG9zdENhdGVnb3J5OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtcG9zdC1jYXRlZ29yeScpLnZhbHVlLFxuICAgICAgICAgICAgdXNlcklkOiBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIudWlkLFxuICAgICAgICAgICAgcG9zdEF1dGhvcjogZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgcG9zdERhdGU6IHNldHRpbmdzLk1PTlRIU1t0b2RheS5nZXRNb250aCgpXSArICcgJyArIHRvZGF5LmdldERhdGUoKSArICcsICcgKyB0b2RheS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgbnVtYmVyT2ZDb21tZW50czogMCxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcG9zdHNEYXRhLmFkZFBvc3QocG9zdClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjbGVhcklucHV0cygpO1xuICAgICAgICAgICAgICAgIGFsZXJ0KCdOZXcgcG9zdCBhZGRlZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhZG1pbkNvbnRyb2xsZXIgPSBuZXcgQWRtaW5Db250cm9sbGVyO1xuZXhwb3J0IGRlZmF1bHQgYWRtaW5Db250cm9sbGVyO1xuIiwiaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnLi4vLi4vbGliL2hhbmRsZWJhcnMvcnVudGltZSc7IGV4cG9ydCBkZWZhdWx0XG5IYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxzZWN0aW9uIGlkPVxcXCJsb2dpbi11c2VyXFxcIj5cXG4gICAgPGgyIGNsYXNzPVxcXCJoZWFkaW5nXFxcIj5Mb2dpbiB1c2VyPC9oMj5cXG4gICAgPGlucHV0IHR5cGU9XFxcImVtYWlsXFxcIiBuYW1lPVxcXCJlbWFpbFxcXCIgaWQ9XFxcImxvZ2luLWVtYWlsXFxcIiBwbGFjZWhvbGRlcj1cXFwiRW1haWxcXFwiIHJlcXVpcmVkPlxcbiAgICA8aW5wdXQgdHlwZT1cXFwicGFzc3dvcmRcXFwiIG5hbWU9XFxcInBhc3N3b3JkXFxcIiBpZD1cXFwibG9naW4tcGFzc3dvcmRcXFwiIHBsYWNlaG9sZGVyPVxcXCJQYXNzd29yZFxcXCIgcmVxdWlyZWQ+XFxuICAgIDxidXR0b24gaWQ9XFxcImxvZ2luLWJ1dHRvblxcXCIgY2xhc3M9XFxcImFkbWluLWJ1dHRvblxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiBvbmNsaWNrPVxcXCJsb2dpblVzZXIoKVxcXCI+TG9naW48L2J1dHRvbj5cXG48L3NlY3Rpb24+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KSIsImltcG9ydCBIYW5kbGViYXJzIGZyb20gJy4uLy4uL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUnOyBleHBvcnQgZGVmYXVsdFxuSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8c2VjdGlvbiBpZD1cXFwicmVnaXN0ZXItdXNlclxcXCI+XFxuICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+UmVnaXN0ZXIgdXNlcjwvaDI+XFxuICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJ1c2VybmFtZVxcXCIgaWQ9XFxcImlucHV0LXVzZXJuYW1lXFxcIiBwbGFjZWhvbGRlcj1cXFwiVXNlcm5hbWVcXFwiIHJlcXVpcmVkPlxcbiAgICA8aW5wdXQgdHlwZT1cXFwiZW1haWxcXFwiIG5hbWU9XFxcImVtYWlsXFxcIiBpZD1cXFwiaW5wdXQtZW1haWxcXFwiIHBsYWNlaG9sZGVyPVxcXCJFbWFpbFxcXCIgcmVxdWlyZWQ+XFxuICAgIDxpbnB1dCB0eXBlPVxcXCJwYXNzd29yZFxcXCIgbmFtZT1cXFwicGFzc3dvcmRcXFwiIGlkPVxcXCJpbnB1dC1wYXNzd29yZFxcXCIgcGxhY2Vob2xkZXI9XFxcIlBhc3N3b3JkXFxcIiByZXF1aXJlZD5cXG4gICAgPGlucHV0IHR5cGU9XFxcImZpbGVcXFwiIG5hbWU9XFxcImlucHV0X3VzZXJfaW1hZ2VcXFwiIGlkPVxcXCJpbnB1dC11c2VyLWltYWdlXFxcIiByZXF1aXJlZD5cXG4gICAgPGJ1dHRvbiBpZD1cXFwidXNlci1idXR0b25cXFwiIGNsYXNzPVxcXCJhZG1pbi1idXR0b25cXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCIgb25jbGljaz1cXFwiYWRkTmV3VXNlcigpXFxcIj5SZWdpc3RlcjwvYnV0dG9uPlxcbjwvc2VjdGlvbj4gIFwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkiLCJpbXBvcnQgbG9naW5UZW1wbGF0ZSBmcm9tICcuLi90ZW1wbGF0ZXMvcHJlY29tcGlsZWQvbG9naW4udGVtcGxhdGUnO1xuaW1wb3J0IHNpZ251cFRlbXBsYXRlIGZyb20gJy4uL3RlbXBsYXRlcy9wcmVjb21waWxlZC9zaWdudXAudGVtcGxhdGUnO1xuY2xhc3MgQXV0aGVudGljYXRpb25Db250cm9sbGVyIHtcbiAgICBzaG93TG9naW5QYWdlKCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJykuaW5uZXJIVE1MID0gbG9naW5UZW1wbGF0ZSgpO1xuICAgIH1cblxuICAgIHNob3dTaWdudXBQYWdlKCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJykuaW5uZXJIVE1MID0gc2lnbnVwVGVtcGxhdGUoKTtcbiAgICB9XG5cbiAgICBhZGROZXdVc2VyKCkge1xuICAgICAgICBjb25zdCB1c2VySW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtdXNlci1pbWFnZScpLmZpbGVzWzBdO1xuICAgICAgICBjb25zdCB1c2VybmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC11c2VybmFtZScpLnZhbHVlO1xuICAgICAgICBjb25zdCBlbWFpbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1lbWFpbCcpLnZhbHVlO1xuICAgICAgICBjb25zdCBwYXNzd29yZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1wYXNzd29yZCcpLnZhbHVlO1xuXG4gICAgICAgIGZpcmViYXNlLmF1dGgoKS5jcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKVxuICAgICAgICAudGhlbigodXNlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXBsb2FkVGFzayA9IHN0b3JhZ2UuY2hpbGQoYHVzZXJpbWFnZXMvJHt1c2VybmFtZX0vJHt1c2VySW1hZ2UubmFtZX1gKS5wdXQodWFzZXJJbWFnZSk7XG4gICAgICAgICAgICB1cGxvYWRUYXNrLm9uKCdzdGF0ZV9jaGFuZ2VkJyxcbiAgICAgICAgICAgICAgICAoc25hcHNob3QpID0+IHtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgYWxlcnQoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2UuY2hpbGQoYHVzZXJpbWFnZXMvJHt1c2VybmFtZX0vJHt1c2VySW1hZ2UubmFtZX1gKS5nZXREb3dubG9hZFVSTCgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChpbWFnZVVybCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci51cGRhdGVQcm9maWxlKHsgZGlzcGxheU5hbWU6IHVzZXJuYW1lLCBwaG90b1VSTDogaW1hZ2VVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZXIubmF2aWdhdGUoJ2hvbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1JlZ2lzdGVyZWQgYW5kIGxvZ2VkIGluJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGFsZXJ0KGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2dpblVzZXIoKSB7XG4gICAgICAgIGNvbnN0IGVtYWlsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ2luLWVtYWlsJykudmFsdWU7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ2luLXBhc3N3b3JkJykudmFsdWU7XG5cbiAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGVtYWlsLCBwYXNzd29yZClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByb3V0ZXIubmF2aWdhdGUoJ2hvbWUnKVxuICAgICAgICAgICAgICAgIGFsZXJ0KCdMb2dnZWQgaW4hJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnQoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2dvdXRVc2VyKCkge1xuICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ1NpZ25lZCBvdXQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgYXV0aGVudGljYXRpb25Db250cm9sbGVyID0gbmV3IEF1dGhlbnRpY2F0aW9uQ29udHJvbGxlcjtcbmV4cG9ydCBkZWZhdWx0IGF1dGhlbnRpY2F0aW9uQ29udHJvbGxlcjtcblxuIiwiaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSAnLi4vLi4vbGliL2hhbmRsZWJhcnMvcnVudGltZSc7IGV4cG9ydCBkZWZhdWx0XG5IYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPGEgaHJlZj1cXFwiI2NhdGVnb3JpZXMvXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBvc3RDYXRlZ29yeSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdENhdGVnb3J5IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJwb3N0Q2F0ZWdvcnlcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiL1wiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0SWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBvc3RJZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicG9zdElkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+PGgyIGNsYXNzPVxcXCJoZWFkaW5nXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucG9zdFRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wb3N0VGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInBvc3RUaXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2gyPjwvYT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJkaXZpZGVyXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwicG9zdC1kZXRhaWxzXFxcIj5Qb3N0ZWQgYnk8c3Bhbj4gXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBvc3RBdXRob3IgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBvc3RBdXRob3IgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInBvc3RBdXRob3JcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9zcGFuPiBvbiA8c3Bhbj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucG9zdERhdGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBvc3REYXRlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJwb3N0RGF0ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCIgPC9zcGFuPmluIDxzcGFuPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0Q2F0ZWdvcnkgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBvc3RDYXRlZ29yeSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicG9zdENhdGVnb3J5XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj4gY2F0ZWdvcnkgfCA8c3Bhbj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubnVtYmVyT2ZDb21tZW50cyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubnVtYmVyT2ZDb21tZW50cyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibnVtYmVyT2ZDb21tZW50c1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCIgPC9zcGFuPmNvbW1lbnRzPC9wPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxzZWN0aW9uIGlkPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucG9zdElkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wb3N0SWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInBvc3RJZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJwb3N0XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9zdC1pbWFnZS13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcInBvc3QtaW1hZ2VcXFwiIHNyYz1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmltYWdlVXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pbWFnZVVybCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaW1hZ2VVcmxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBhbHQ9XFxcIlxcXCIvPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9zdC1pbWFnZS1zaGFkb3dcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcInBvc3QtdGV4dFxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBvc3RUZXh0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wb3N0VGV4dCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicG9zdFRleHRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRhdGEgJiYgZGF0YS5maXJzdCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNCwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oNiwgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwiNFwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICA8YnV0dG9uIGlkPVxcXCJjYXRlZ29yeS1wYWdlLWJ1dHRvbi1cIlxuICAgICsgYWxpYXMyKGFsaWFzMShkZXB0aDAsIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImNhdGVnb3J5LXBhZ2UtYnV0dG9uIGFjdGl2ZVxcXCIgb25jbGljaz1cXFwid2luZG93LmxvY2F0aW9uLmhyZWYgPSAnI2NhdGVnb3JpZXMvXCJcbiAgICArIGFsaWFzMigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBvc3RDYXRlZ29yeSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdENhdGVnb3J5IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwicG9zdENhdGVnb3J5XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIi9wYWdlL1wiXG4gICAgKyBhbGlhczIoYWxpYXMxKGRlcHRoMCwgZGVwdGgwKSlcbiAgICArIFwiJ1xcXCIgZGlzYWJsZWQ+XCJcbiAgICArIGFsaWFzMihhbGlhczEoZGVwdGgwLCBkZXB0aDApKVxuICAgICsgXCI8L2J1dHRvbj5cXG5cIjtcbn0sXCI2XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgIDxidXR0b24gaWQ9XFxcImNhdGVnb3J5LXBhZ2UtYnV0dG9uLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKGRlcHRoMCwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiY2F0ZWdvcnktcGFnZS1idXR0b25cXFwiIG9uY2xpY2s9XFxcIndpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyNjYXRlZ29yaWVzL1wiXG4gICAgKyBhbGlhczIoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0Q2F0ZWdvcnkgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBvc3RDYXRlZ29yeSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcInBvc3RDYXRlZ29yeVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCIvcGFnZS9cIlxuICAgICsgYWxpYXMyKGFsaWFzMShkZXB0aDAsIGRlcHRoMCkpXG4gICAgKyBcIidcXFwiPlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKGRlcHRoMCwgZGVwdGgwKSlcbiAgICArIFwiPC9idXR0b24+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjxkaXYgaWQ9XFxcImJyZWFkY3J1bWJzXFxcIj5cXG4gICAgPHA+PGEgaHJlZj1cXFwiI2hvbWVcXFwiPkhvbWUgPC9hPjxzcGFuIGNsYXNzPVxcXCJjYXRlZ29yeS1uYW1lXFxcIj4mcmFxdW87IFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5jYXRlZ29yeU5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNhdGVnb3J5TmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY2F0ZWdvcnlOYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj48L3NwYW4+PC9wPlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvZGl2PlxcbjxkaXYgaWQ9XFxcInF1b3RlXFxcIj5cXG4gICAgPGgxIGlkPVxcXCJjYXRlZ29yeS1uYW1lXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY2F0ZWdvcnlOYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXRlZ29yeU5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNhdGVnb3J5TmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2gxPlxcbiAgICA8cD5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY2F0ZWdvcnlEZXNjcmlwdGlvbiB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2F0ZWdvcnlEZXNjcmlwdGlvbiA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY2F0ZWdvcnlEZXNjcmlwdGlvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3A+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PC9kaXY+XFxuPGRpdiBpZD1cXFwiY29udGVudC13cmFwcGVyXFxcIj5cXG4gICAgPG1haW4gaWQ9XFxcInBvc3Qtd3JhcHBlclxcXCI+XFxuICAgICAgICA8ZGl2IGlkPVxcXCJwb3N0cy1zZWN0aW9uXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNhdGVnb3J5UG9zdHMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwicGFnaW5hdGlvblxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXRlZ29yeVBhZ2VzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L2Rpdj5cXG4gICAgPC9tYWluPlxcbiAgICA8YXNpZGUgaWQ9XFxcInJpZ2h0LXNpZGViYXJcXFwiPlxcbiAgICAgICAgPGFydGljbGUgY2xhc3M9XFxcImxpbmtzLXdpZGdldFxcXCI+XFxuICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJoZWFkaW5nXFxcIj5Gcm9tIHRoZSBibG9nPC9oMj5cXG4gICAgICAgICAgICA8dWw+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPkNvbnNlcXVhdCBpZCBhbmltIHN1bnQ8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+QXV0ZSBwcm9pZGVudCBkb2xvcmU8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+RXhlcmNpdGF0aW9uIGFtZXQ8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+VGVtcG9yIG1hZ25hIG51bGxhPC9hPjwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPlRlbXBvciBzdW50IGV4Y2VwdGV1cjwvYT48L2xpPlxcbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5Ob24gYWxpcXVpcCBudWxsYSB1dHI8L2E+PC9saT5cXG4gICAgICAgICAgICA8L3VsPlxcbiAgICAgICAgPC9hcnRpY2xlPlxcbiAgICAgICAgPGFydGljbGUgY2xhc3M9XFxcImxpbmtzLXdpZGdldFxcXCI+XFxuICAgICAgICAgICAgPGgyIGNsYXNzPVxcXCJoZWFkaW5nXFxcIj5BcmNoaXZlczwvaDI+XFxuICAgICAgICAgICAgPHVsPlxcbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5Db25zZXF1YXQgaWQgYW5pbSBzdW50PC9hPjwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPkF1dGUgcHJvaWRlbnQgZG9sb3JlPC9hPjwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPkV4ZXJjaXRhdGlvbiBhbWV0PC9hPjwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPlRlbXBvciBtYWduYSBudWxsYTwvYT48L2xpPlxcbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5UZW1wb3Igc3VudCBleGNlcHRldXI8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+Tm9uIGFsaXF1aXAgbnVsbGEgdXRyPC9hPjwvbGk+XFxuICAgICAgICAgICAgPC91bD5cXG4gICAgICAgIDwvYXJ0aWNsZT5cXG4gICAgICAgIDxhcnRpY2xlIGNsYXNzPVxcXCJsaW5rcy13aWRnZXRcXFwiPlxcbiAgICAgICAgICAgIDxoMiBjbGFzcz1cXFwiaGVhZGluZ1xcXCI+UmVjZW50IFBvc3RzPC9oMj5cXG4gICAgICAgICAgICA8dWw+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPkNvbnNlcXVhdCBpZCBhbmltIHN1bnQ8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+QXV0ZSBwcm9pZGVudCBkb2xvcmU8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+RXhlcmNpdGF0aW9uIGFtZXQ8L2E+PC9saT5cXG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+VGVtcG9yIG1hZ25hIG51bGxhPC9hPjwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPlRlbXBvciBzdW50IGV4Y2VwdGV1cjwvYT48L2xpPlxcbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj5Ob24gYWxpcXVpcCBudWxsYSB1dHI8L2E+PC9saT5cXG4gICAgICAgICAgICA8L3VsPlxcbiAgICAgICAgPC9hcnRpY2xlPlxcbiAgICA8L2FzaWRlPlxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkiLCJpbXBvcnQgSGFuZGxlYmFycyBmcm9tICcuLi8uLi9saWIvaGFuZGxlYmFycy9ydW50aW1lJzsgZXhwb3J0IGRlZmF1bHRcbkhhbmRsZWJhcnMudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgPGEgaHJlZj1cXFwiI2NhdGVnb3JpZXMvXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBvc3RDYXRlZ29yeSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdENhdGVnb3J5IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJwb3N0Q2F0ZWdvcnlcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiL1wiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0SWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBvc3RJZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicG9zdElkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+PGgyIGNsYXNzPVxcXCJoZWFkaW5nXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucG9zdFRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wb3N0VGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInBvc3RUaXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2gyPjwvYT5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PC9kaXY+XFxuICAgIDxwIGNsYXNzPVxcXCJwb3N0LWRldGFpbHNcXFwiPlBvc3RlZCBieTxzcGFuPiBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucG9zdEF1dGhvciB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdEF1dGhvciA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicG9zdEF1dGhvclwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+IG9uIDxzcGFuPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0RGF0ZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdERhdGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInBvc3REYXRlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIiA8L3NwYW4+aW4gPHNwYW4+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBvc3RDYXRlZ29yeSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdENhdGVnb3J5IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJwb3N0Q2F0ZWdvcnlcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9zcGFuPiBjYXRlZ29yeSB8IDxzcGFuPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5udW1iZXJPZkNvbW1lbnRzIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5udW1iZXJPZkNvbW1lbnRzIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJudW1iZXJPZkNvbW1lbnRzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIiA8L3NwYW4+Y29tbWVudHM8L3A+XFxuICAgIDxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPjwvZGl2PlxcbiAgICA8c2VjdGlvbiBpZD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBvc3RJZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdElkIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJwb3N0SWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiAgY2xhc3M9XFxcInBvc3RcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9zdC1pbWFnZS13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICA8aW1nIGNsYXNzPVxcXCJwb3N0LWltYWdlXFxcIiBzcmM9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbWFnZVVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1hZ2VVcmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImltYWdlVXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgYWx0PVxcXCJcXFwiLz5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwb3N0LWltYWdlLXNoYWRvd1xcXCI+PC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxwIGlkPVxcXCJwb3N0LXRleHRcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0VGV4dCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdFRleHQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInBvc3RUZXh0XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXG4gICAgPC9zZWN0aW9uPlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucG9zdHMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwidXNlRGF0YVwiOnRydWV9KSIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuLi9qcy90ZW1wbGF0ZXMnO1xuaW1wb3J0IGNhdGVnb3JpZXNEYXRhIGZyb20gJy4uL2RhdGEvY2F0ZWdvcmllcy5kYXRhJztcbmltcG9ydCBzZXR0aW5ncyBmcm9tICcuLi9qcy91dGlscy9zZXR0aW5ncyc7XG5pbXBvcnQgY2F0ZWdvcnlUZW1wbGF0ZSBmcm9tICcuLi90ZW1wbGF0ZXMvcHJlY29tcGlsZWQvY2F0ZWdvcnkudGVtcGxhdGUnO1xuaW1wb3J0IHBvc3RzU2VjdGlvblRlbXBsYXRlIGZyb20gJy4uL3RlbXBsYXRlcy9wcmVjb21waWxlZC9wb3N0cy1zZWN0aW9uLnRlbXBsYXRlJztcbmNsYXNzIENhdGVnb3JpZXNDb250cm9sbGVyIHtcbiAgICBzaG93Q2F0ZWdvcnlQYWdlKHBhcmFtcykge1xuICAgICAgICBjb25zdCBjYXRlZ29yeU5hbWUgPSBwYXJhbXMuY2F0ZWdvcnk7XG4gICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGNhdGVnb3JpZXNEYXRhLmdldENhdGVnb3J5KGNhdGVnb3J5TmFtZSwgc2V0dGluZ3MucG9zdHNQZXJQYWdlKSxcbiAgICAgICAgICAgIC8vIHRlbXBsYXRlLmNvbXBpbGVUZW1wbGF0ZSgnY2F0ZWdvcnknKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAudGhlbigoW2NhdGVnb3J5XSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNhdGVnb3J5KTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJykuaW5uZXJIVE1MID0gY2F0ZWdvcnlUZW1wbGF0ZShjYXRlZ29yeSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVQb3N0U2VjdGlvbihyZXF1ZXN0ZWRQYWdlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gK2RvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NhdGVnb3J5LXBhZ2UtYnV0dG9uIGFjdGl2ZScpWzBdLmlubmVySFRNTDtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhdGVnb3J5LW5hbWUnKS5pbm5lckhUTUw7XG4gICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGNhdGVnb3JpZXNEYXRhLmdldENhdGVnb3J5UG9zdHNQYWdlKGN1cnJlbnRQYWdlLCByZXF1ZXN0ZWRQYWdlLCBwb3N0c1BlclBhZ2UsIGNhdGVnb3J5TmFtZSksXG4gICAgICAgICAgICAvLyB0ZW1wbGF0ZS5jb21waWxlVGVtcGxhdGUoJ3Bvc3RzLXBhZ2UnKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAudGhlbigoW3Bvc3RzXSkgPT4ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3N0cy1zZWN0aW9uJykuaW5uZXJIVE1MID0gcG9zdHNTZWN0aW9uVGVtcGxhdGUocG9zdHMpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXRlZ29yeS1wYWdlLWJ1dHRvbi0nICsgY3VycmVudFBhZ2UpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXRlZ29yeS1wYWdlLWJ1dHRvbi0nICsgY3VycmVudFBhZ2UpLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhdGVnb3J5LXBhZ2UtYnV0dG9uLScgKyByZXF1ZXN0ZWRQYWdlKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2F0ZWdvcnktcGFnZS1idXR0b24tJyArIHJlcXVlc3RlZFBhZ2UpLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgY2F0ZWdvcnlDb250cm9sbGVyID0gbmV3IENhdGVnb3JpZXNDb250cm9sbGVyO1xuZXhwb3J0IGRlZmF1bHQgY2F0ZWdvcnlDb250cm9sbGVyO1xuIiwiLyogZ2xvYmFsIGZpcmViYXNlICovXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vanMvdGVtcGxhdGVzJztcbmltcG9ydCBwb3N0c0RhdGEgZnJvbSAnLi4vZGF0YS9wb3N0cy5kYXRhJztcbmltcG9ydCBNT05USFMgZnJvbSAnLi4vanMvdXRpbHMvc2V0dGluZ3MnO1xuXG5jbGFzcyBQb3N0c0NvbnRyb2xsZXIge1xuICAgIHNob3dQb3N0UGFnZShwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgcG9zdElkID0gcGFyYW1zLnBvc3Q7XG4gICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHBvc3RzRGF0YS5nZXRQb3N0KHBvc3RJZCksXG4gICAgICAgICAgICB0ZW1wbGF0ZS5jb21waWxlVGVtcGxhdGUoJ3Bvc3QnKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAudGhlbigoW3Bvc3QsIGNvbXBpbGVkVGVtcGxhdGVdKSA9PiB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpLmlubmVySFRNTCA9IGNvbXBpbGVkVGVtcGxhdGUocG9zdCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGROZXdDb21tZW50KHBhcnRpYWxVcmwpIHtcbiAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCB1cmlzID0gcGFydGlhbFVybC5zcGxpdCgnLycpO1xuICAgICAgICBjb25zdCBjYXRlZ29yeU5hbWUgPSB1cmlzWzBdO1xuICAgICAgICBjb25zdCBwb3N0SWQgPSB1cmlzWzFdO1xuICAgICAgICBjb25zdCBjb21tZW50ID0ge1xuICAgICAgICAgICAgY29tbWVudEF1dGhvcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LWNvbW1lbnQtdXNlcicpLnZhbHVlLFxuICAgICAgICAgICAgY29tbWVudEF1dGhvckVtYWlsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtY29tbWVudC1lbWFpbCcpLnZhbHVlLFxuICAgICAgICAgICAgY29tbWVudFRleHQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1jb21tZW50LXRleHQnKS52YWx1ZSxcbiAgICAgICAgICAgIGNvbW1lbnRBdXRob3JJbWFnZTogZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLnBob3RvVVJMLFxuICAgICAgICAgICAgY29tbWVudERhdGU6IE1PTlRIU1t0b2RheS5nZXRNb250aCgpXSArICcgJyArIHRvZGF5LmdldERhdGUoKSArICcsICcgKyB0b2RheS5nZXRGdWxsWWVhcigpLFxuICAgICAgICB9O1xuXG4gICAgICAgIHBvc3RzRGF0YS5hZGRDb21tZW50KGNhdGVnb3J5TmFtZSwgcG9zdElkLCBjb21tZW50KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHNob3dQb3N0UGFnZShwb3N0SWQpO1xuICAgICAgICAgICAgICAgIGFsZXJ0KCdOZXcgY29tbWVudCBhZGRlZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBwb3N0c0NvbnRyb2xsZXIgPSBuZXcgUG9zdHNDb250cm9sbGVyO1xuZXhwb3J0IGRlZmF1bHQgcG9zdHNDb250cm9sbGVyO1xuIiwiLyogZ2xvYmFsIGZpcmViYXNlLCBOYXZpZ28gKi9cbmltcG9ydCBob21lQ29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9ob21lLmNvbnRyb2xsZXInO1xuaW1wb3J0IGFkbWluQ29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9hZG1pbi5jb250cm9sbGVyJztcbmltcG9ydCBhdXRoZW50aWNhdGlvbkNvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvYXV0aGVudGljYXRpb24uY29udHJvbGxlcic7XG5pbXBvcnQgY2F0ZWdvcmllc0NvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvY2F0ZWdvcmllcy5jb250cm9sbGVyJztcbmltcG9ydCBwb3N0c0NvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvcG9zdHMuY29udHJvbGxlcic7XG5cblxuLy8gZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChzZXR0aW5ncy5maXJlYmFzZUNvbmZpZyk7XG5cbmNvbnNvbGUubG9nKCdhcHAgcnVubmluZycpO1xuXG4gIGNvbnN0IHJvdXRlciA9IG5ldyBOYXZpZ28obnVsbCwgdHJ1ZSwgJyMnKTtcblxuICByb3V0ZXIudXBkYXRlUGFnZUxpbmtzKCk7XG5cbiAgICByb3V0ZXIub24oe1xuICAgICAgJ2FkbWluJzogKCkgPT4gYWRtaW5Db250cm9sbGVyLnNob3dBZG1pblBhZ2UoKSxcbiAgICAgICdhZG1pbi9hZGRuZXdzbGlkZSc6ICgpID0+IGFkbWluQ29udHJvbGxlci5hZGROZXdTbGlkZSgpLFxuICAgICAgJ2FkbWluL2FkZG5ld3Bvc3QnOiAoKSA9PiBhZG1pbkNvbnRyb2xsZXIuYWRkTmV3UG9zdCgpLFxuICAgICAgJ2FkbWluL2FkZG5ld2NhdGVnb3J5JzogKCkgPT4gYWRtaW5Db250cm9sbGVyLmFkZE5ld0NhdGVnb3J5KCksXG4gICAgICAnYWRtaW4vYWRkbmV3bXVsdGltZWRpYSc6ICgpID0+IGFkbWluQ29udHJvbGxlci5hZGROZXdNdWx0aW1lZGlhKCksXG4gICAgICAnYWRtaW4vYWRkbmV3YXJ0aWNsZSc6ICgpID0+IGFkbWluQ29udHJvbGxlci5hZGROZXdNdWx0aW1lZGlhKCksXG4gICAgICAnbG9naW4nOiAoKSA9PiBhdXRoZW50aWNhdGlvbkNvbnRyb2xsZXIuc2hvd0xvZ2luUGFnZSgpLFxuICAgICAgJ3NpZ251cCc6ICgpID0+IGF1dGhlbnRpY2F0aW9uQ29udHJvbGxlci5zaG93U2lnbnVwUGFnZSgpLFxuICAgICAgJ2xvZ291dCc6ICgpID0+IGF1dGhlbnRpY2F0aW9uQ29udHJvbGxlci5sb2dvdXRVc2VyKCksXG4gICAgICAnaG9tZSc6ICgpID0+IGhvbWVDb250cm9sbGVyLnNob3dIb21lUGFnZSgpLFxuICAgICAgJ2NhdGVnb3JpZXMvOmNhdGVnb3J5JzogKHBhcmFtcykgPT4gY2F0ZWdvcmllc0NvbnRyb2xsZXIuc2hvd0NhdGVnb3J5UGFnZShwYXJhbXMpLFxuICAgICAgLy8gJ2NhdGVnb3JpZXMvOmNhdGVnb3J5L3BhZ2UvOnBhZ2UnOiAocGFyYW1zKSA9PiBjYXRlZ29yaWVzQ29udHJvbGxlci51cGRhdGVDYXRlZ29yeVBhZ2UocGFyYW1zKSxcbiAgICAgICdjYXRlZ29yaWVzLzpjYXRlZ29yeS86cG9zdCc6IChwYXJhbXMpID0+IHBvc3RzQ29udHJvbGxlci5zaG93UG9zdFBhZ2UoKSxcbiAgXG4gICAgICAnJzogKCkgPT4gcm91dGVyLm5hdmlnYXRlKCdob21lJyksXG4gICAgfSlcbiAgICAucmVzb2x2ZSgpO1xuIl0sIm5hbWVzIjpbImRiIiwiZmlyZWJhc2UiLCJkYXRhYmFzZSIsInN0b3JhZ2UiLCJyZWYiLCJTbGlkZXNEYXRhIiwic2xpZGVJbWFnZSIsInNsaWRlVGl0bGUiLCJzbGlkZVRleHQiLCJ1cGxvYWRUYXNrIiwiY2hpbGQiLCJuYW1lIiwicHV0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJvbiIsInNuYXBzaG90IiwiZXJyb3IiLCJsb2ciLCJnZXREb3dubG9hZFVSTCIsInRoZW4iLCJpbWFnZVVybCIsInB1c2giLCJzbGlkZXMiLCJvbmNlIiwiZm9yRWFjaCIsInNsaWRlIiwidmFsIiwic2xpZGVzRGF0YSIsIkFydGljbGVzRGF0YSIsImFydGljbGVzIiwiYXJ0aWNsZSIsImFydGljbGVJbWFnZSIsImFydGljbGVUaXRsZSIsImFydGljbGVUZXh0IiwiYXJ0aWNsZXNEYXRhIiwiTXVsdGltZWRpYWRhdGEiLCJtdWx0aW1lZGlhIiwibXVsdGltZWRpdW0iLCJtdWx0aW1lZGlhSW1hZ2UiLCJtdWx0aW1lZGlhVGV4dCIsIm11bHRpbWVkaWFEYXRhIiwiSGFuZGxlYmFycyIsInJlZ2lzdGVySGVscGVyIiwiaW5kZXgiLCJvcHRpb25zIiwiZm4iLCJpbnZlcnNlIiwiVGVtcGxhdGUiLCJjYWNoZU9iaiIsInRlbXBsYXRlTmFtZSIsImNvbXBpbGVkVGVtcGxhdGUiLCJoYXNPd25Qcm9wZXJ0eSIsImZldGNoIiwicmVzcG9uc2UiLCJ0ZXh0IiwiaHRtbCIsImNvbXBpbGUiLCJ0ZW1wbGF0ZSIsIl91dGlscyIsInJlcXVpcmUkJDAiLCJjb250YWluZXIiLCJkZXB0aDAiLCJoZWxwZXJzIiwicGFydGlhbHMiLCJkYXRhIiwic3RhY2sxIiwiY2FsbCIsIm51bGxDb250ZXh0IiwiZmlyc3QiLCJwcm9ncmFtIiwiaGVscGVyIiwiYWxpYXMxIiwiYWxpYXMyIiwiaGVscGVyTWlzc2luZyIsImFsaWFzMyIsImFsaWFzNCIsImVzY2FwZUV4cHJlc3Npb24iLCJpc1NtYWxsZXJUaGFuNyIsImVhY2giLCJub29wIiwiSG9tZUNvbnRyb2xlciIsImFsbCIsImdldFNsaWRlcyIsImdldEFydGljbGVzIiwiZ2V0TXVsdGltZWRpYSIsImhvbWVEYXRhIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJob21lQ29udHJvbGxlciIsIkNhdGVnb3JpZXNEYXRhIiwiY2F0ZWdvcnkiLCJjYXRlZ29yeU5hbWUiLCJleGlzdHMiLCJzZXQiLCJuYW1lcyIsImNhdGVnb3JpZXMiLCJwb3N0c1BlclBhZ2UiLCJjYXRlZ29yeVBvc3RzIiwibnVtYmVyT2ZQYWdlcyIsInBhZ2VzIiwib3JkZXJCeUtleSIsImxpbWl0VG9GaXJzdCIsIk1hdGgiLCJjZWlsIiwiaSIsImNhdGVnb3J5RGVzY3JpcHRpb24iLCJjYXRlZ29yeVBhZ2VzIiwiY3VycmVudFBhZ2UiLCJyZXF1ZXN0ZWRQYWdlIiwic3RhcnRJZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImlkIiwic3RhcnRBdCIsInBvc3RzIiwiZW5kSWQiLCJlbmRBdCIsImxpbWl0VG9MYXN0IiwiY2F0ZWdvcmllc0RhdGEiLCJQb3N0c0RhdGEiLCJwb3N0SWQiLCJwb3N0IiwicG9zdFRpdGxlIiwicG9zdEltYWdlIiwibmV3UG9zdEtleSIsImtleSIsInVwZGF0ZXMiLCJwb3N0Q2F0ZWdvcnkiLCJ1cGRhdGUiLCJjb21tZW50IiwiY29tbWVudHNOdW1iZXIiLCJuZXdDb21tZW50S2V5IiwibnVtYmVyT2ZDb21tZW50cyIsInBvc3REYXRhIiwiY2xlYXJJbnB1dHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXQiLCJ2YWx1ZSIsIk1PTlRIUyIsImZpcmViYXNlQ29uZmlnIiwibGFtYmRhIiwiQWRtaW5Db250cm9sbGVyIiwiZ2V0Q2F0ZWdvcnlOYW1lcyIsImZpbGVzIiwiYWRkTXVsdGltZWRpYSIsImFkZEFydGljbGUiLCJtZXNzYWdlIiwiYWRkU2xpZGUiLCJhZGRDYXRlZ29yeSIsInNob3dBZG1pblBhZ2UiLCJ0b2RheSIsIkRhdGUiLCJhdXRoIiwiY3VycmVudFVzZXIiLCJ1aWQiLCJkaXNwbGF5TmFtZSIsInNldHRpbmdzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0RnVsbFllYXIiLCJwb3N0c0RhdGEiLCJhZGRQb3N0IiwiYWRtaW5Db250cm9sbGVyIiwiQXV0aGVudGljYXRpb25Db250cm9sbGVyIiwibG9naW5UZW1wbGF0ZSIsInNpZ251cFRlbXBsYXRlIiwidXNlckltYWdlIiwidXNlcm5hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwiY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkIiwidXNlciIsInVhc2VySW1hZ2UiLCJ1cGRhdGVQcm9maWxlIiwicGhvdG9VUkwiLCJuYXZpZ2F0ZSIsImNhdGNoIiwic2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJzaWduT3V0IiwiYXV0aGVudGljYXRpb25Db250cm9sbGVyIiwicG9zdEF1dGhvciIsInBvc3REYXRlIiwicG9zdFRleHQiLCJDYXRlZ29yaWVzQ29udHJvbGxlciIsInBhcmFtcyIsImdldENhdGVnb3J5IiwiY2F0ZWdvcnlUZW1wbGF0ZSIsImdldENhdGVnb3J5UG9zdHNQYWdlIiwicG9zdHNTZWN0aW9uVGVtcGxhdGUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJkaXNhYmxlZCIsImFkZCIsImNhdGVnb3J5Q29udHJvbGxlciIsIlBvc3RzQ29udHJvbGxlciIsImdldFBvc3QiLCJjb21waWxlVGVtcGxhdGUiLCJwYXJ0aWFsVXJsIiwidXJpcyIsInNwbGl0IiwiYWRkQ29tbWVudCIsInBvc3RzQ29udHJvbGxlciIsImNvbnNvbGUiLCJyb3V0ZXIiLCJOYXZpZ28iLCJ1cGRhdGVQYWdlTGlua3MiLCJhZGROZXdTbGlkZSIsImFkZE5ld1Bvc3QiLCJhZGROZXdDYXRlZ29yeSIsImFkZE5ld011bHRpbWVkaWEiLCJzaG93TG9naW5QYWdlIiwic2hvd1NpZ251cFBhZ2UiLCJsb2dvdXRVc2VyIiwic2hvd0hvbWVQYWdlIiwiY2F0ZWdvcmllc0NvbnRyb2xsZXIiLCJzaG93Q2F0ZWdvcnlQYWdlIiwic2hvd1Bvc3RQYWdlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsSUFBTUEsS0FBS0MsU0FBU0MsUUFBVCxFQUFYOztBQ0RBLElBQU1DLFlBQVVGLFNBQVNFLE9BQVQsR0FBbUJDLEdBQW5CLEVBQWhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lDRU1DOzs7Ozs7O2lDQUNPQyxZQUFZQyxZQUFZQyxXQUFXO2dCQUNsQ0MsYUFBYU4sVUFBUU8sS0FBUixrQkFB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
