(function (Handlebars) {
'use strict';

Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;

/* global firebase */
var db = firebase.database();

var storage$1 = firebase.storage().ref();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var SlidesController = function () {
    function SlidesController() {
        classCallCheck(this, SlidesController);
    }

    createClass(SlidesController, [{
        key: 'addSlide',
        value: function addSlide(slideImage, slideTitle, slideText) {
            var uploadTask = storage$1.child('slideimages/' + slideImage.name).put(slideImage);

            return uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                alert(error);
            }, function () {
                storage$1.child('slideimages/' + slideImage.name).getDownloadURL().then(function (imageUrl) {
                    db.ref().child('slides/').push({
                        slideTitle: slideTitle,
                        slideText: slideText,
                        imageUrl: imageUrl
                    });
                });
            });
        }
    }, {
        key: 'getSlides',
        value: function getSlides() {
            var slides = [];
            return db.ref().child('slides').once('value', function (snapshot) {
                snapshot.forEach(function (slide) {
                    slides.push(slide.val());
                });
            }).then(function () {
                return Promise.resolve(slides);
            });
        }
    }]);
    return SlidesController;
}();

var slidesController = new SlidesController();

var ArticlesData = function () {
    function ArticlesData() {
        classCallCheck(this, ArticlesData);
    }

    createClass(ArticlesData, [{
        key: 'getArticles',
        value: function getArticles() {
            var articles = [];
            return db.ref().child('articles').once('value', function (snapshot) {
                snapshot.forEach(function (article) {
                    articles.push(article.val());
                });
            }).then(function () {
                return Promise.resolve(articles);
            });
        }
    }, {
        key: 'addArticle',
        value: function addArticle(articleImage, articleTitle, articleText) {
            var uploadTask = storage$1.child('articleimages/' + articleImage.name).put(articleImage);

            return uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                alert(error);
            }, function () {
                storage$1.child('articleimages/' + articleImage.name).getDownloadURL().then(function (imageUrl) {
                    db.ref().child('articles/').push({
                        articleTitle: articleTitle,
                        articleText: articleText,
                        imageUrl: imageUrl
                    });
                });
            });
        }
    }]);
    return ArticlesData;
}();

var articlesData = new ArticlesData();

var Multimediadata = function () {
    function Multimediadata() {
        classCallCheck(this, Multimediadata);
    }

    createClass(Multimediadata, [{
        key: 'getMultimedia',
        value: function getMultimedia() {
            var multimedia = [];
            return db.ref().child('multimedia').once('value', function (snapshot) {
                snapshot.forEach(function (multimedium) {
                    multimedia.push(multimedium.val());
                });
            }).then(function () {
                return Promise.resolve(multimedia);
            });
        }
    }, {
        key: 'addMultimedia',
        value: function addMultimedia(multimediaImage, multimediaText) {
            var uploadTask = storage$1.child('multimediaimages/' + multimediaImage.name).put(multimediaImage);

            return uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                alert(error);
            }, function () {
                storage$1.child('multimediaimages/' + multimediaImage.name).getDownloadURL().then(function (imageUrl) {
                    db.ref().child('multimedia/').push({
                        multimediaText: multimediaText,
                        imageUrl: imageUrl
                    });
                });
            });
        }
    }]);
    return Multimediadata;
}();

var multimediaData = new Multimediadata();

Handlebars.registerHelper('isSmallerThan7', function (index, options) {
    if (index < 7) {
        return options.fn(this);
    }
    return options.inverse(this);
});

var Template = function () {
    function Template() {
        classCallCheck(this, Template);

        this.cacheObj = {};
    }

    createClass(Template, [{
        key: 'compileTemplate',
        value: function compileTemplate(templateName) {
            var _this = this;

            var compiledTemplate = void 0;
            if (this.cacheObj.hasOwnProperty(templateName)) {
                return Promise.resolve(this.cacheObj[templateName]);
            }

            return fetch('../templates/' + templateName + '.handlebars').then(function (response) {
                response.text().then(function (html) {
                    compiledTemplate = Handlebars.compile(html);
                    _this.cacheObj[templateName] = compiledTemplate;
                });
            }).then(function () {
                return Promise.resolve(compiledTemplate);
            });
        }
    }]);
    return Template;
}();

var template = new Template();

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var utils = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.extend = extend;
  exports.indexOf = indexOf;
  exports.escapeExpression = escapeExpression;
  exports.isEmpty = isEmpty;
  exports.createFrame = createFrame;
  exports.blockParams = blockParams;
  exports.appendContextPath = appendContextPath;
  var escape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };

  var badChars = /[&<>"'`=]/g,
      possible = /[&<>"'`=]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  var toString = Object.prototype.toString;

  exports.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  /* eslint-disable func-style */
  var isFunction = function isFunction(value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    exports.isFunction = isFunction = function isFunction(value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  exports.isFunction = isFunction;

  /* eslint-enable func-style */

  /* istanbul ignore next */
  var isArray = Array.isArray || function (value) {
    return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? toString.call(value) === '[object Array]' : false;
  };

  exports.isArray = isArray;
  // Older IE versions do not directly support indexOf so we must implement our own, sadly.

  function indexOf(array, value) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === value) {
        return i;
      }
    }
    return -1;
  }

  function escapeExpression(string) {
    if (typeof string !== 'string') {
      // don't escape SafeStrings, since they're already safe
      if (string && string.toHTML) {
        return string.toHTML();
      } else if (string == null) {
        return '';
      } else if (!string) {
        return string + '';
      }

      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      string = '' + string;
    }

    if (!possible.test(string)) {
      return string;
    }
    return string.replace(badChars, escapeChar);
  }

  function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  function createFrame(object) {
    var frame = extend({}, object);
    frame._parent = object;
    return frame;
  }

  function blockParams(params, ids) {
    params.path = ids;
    return params;
  }

  function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }
});

var exception = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  function Exception(message, node) {
    var loc = node && node.loc,
        line = undefined,
        column = undefined;
    if (loc) {
      line = loc.start.line;
      column = loc.start.column;

      message += ' - ' + line + ':' + column;
    }

    var tmp = Error.prototype.constructor.call(this, message);

    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }

    /* istanbul ignore else */
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, Exception);
    }

    try {
      if (loc) {
        this.lineNumber = line;

        // Work around issue under safari where we can't directly set the column value
        /* istanbul ignore next */
        if (Object.defineProperty) {
          Object.defineProperty(this, 'column', {
            value: column,
            enumerable: true
          });
        } else {
          this.column = column;
        }
      }
    } catch (nop) {
      /* Ignore if the browser is very particular */
    }
  }

  Exception.prototype = new Error();

  exports['default'] = Exception;
  module.exports = exports['default'];
});

var blockHelperMissing = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('blockHelperMissing', function (context, options) {
      var inverse = options.inverse,
          fn = options.fn;

      if (context === true) {
        return fn(this);
      } else if (context === false || context == null) {
        return inverse(this);
      } else if (utils.isArray(context)) {
        if (context.length > 0) {
          if (options.ids) {
            options.ids = [options.name];
          }

          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        if (options.data && options.ids) {
          var data = utils.createFrame(options.data);
          data.contextPath = utils.appendContextPath(options.data.contextPath, options.name);
          options = { data: data };
        }

        return fn(context, options);
      }
    });
  };

  module.exports = exports['default'];
});

var each = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _exception2 = _interopRequireDefault(exception);

  exports['default'] = function (instance) {
    instance.registerHelper('each', function (context, options) {
      if (!options) {
        throw new _exception2['default']('Must pass iterator to #each');
      }

      var fn = options.fn,
          inverse = options.inverse,
          i = 0,
          ret = '',
          data = undefined,
          contextPath = undefined;

      if (options.data && options.ids) {
        contextPath = utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
      }

      if (utils.isFunction(context)) {
        context = context.call(this);
      }

      if (options.data) {
        data = utils.createFrame(options.data);
      }

      function execIteration(field, index, last) {
        if (data) {
          data.key = field;
          data.index = index;
          data.first = index === 0;
          data.last = !!last;

          if (contextPath) {
            data.contextPath = contextPath + field;
          }
        }

        ret = ret + fn(context[field], {
          data: data,
          blockParams: utils.blockParams([context[field], field], [contextPath + field, null])
        });
      }

      if (context && (typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object') {
        if (utils.isArray(context)) {
          for (var j = context.length; i < j; i++) {
            if (i in context) {
              execIteration(i, i, i === context.length - 1);
            }
          }
        } else {
          var priorKey = undefined;

          for (var key in context) {
            if (context.hasOwnProperty(key)) {
              // We're running the iterations one step out of sync so we can detect
              // the last iteration without have to scan the object twice and create
              // an itermediate keys array.
              if (priorKey !== undefined) {
                execIteration(priorKey, i - 1);
              }
              priorKey = key;
              i++;
            }
          }
          if (priorKey !== undefined) {
            execIteration(priorKey, i - 1, true);
          }
        }
      }

      if (i === 0) {
        ret = inverse(this);
      }

      return ret;
    });
  };

  module.exports = exports['default'];
});

var helperMissing = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _exception2 = _interopRequireDefault(exception);

  exports['default'] = function (instance) {
    instance.registerHelper('helperMissing', function () /* [args, ]options */{
      if (arguments.length === 1) {
        // A missing field in a {{foo}} construct.
        return undefined;
      } else {
        // Someone is actually trying to call something, blow up.
        throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
      }
    });
  };

  module.exports = exports['default'];
});

var _if = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('if', function (conditional, options) {
      if (utils.isFunction(conditional)) {
        conditional = conditional.call(this);
      }

      // Default behavior is to render the positive path if the value is truthy and not empty.
      // The `includeZero` option may be set to treat the condtional as purely not empty based on the
      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
      if (!options.hash.includeZero && !conditional || utils.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });

    instance.registerHelper('unless', function (conditional, options) {
      return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
    });
  };

  module.exports = exports['default'];
});

var log = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('log', function () /* message, options */{
      var args = [undefined],
          options = arguments[arguments.length - 1];
      for (var i = 0; i < arguments.length - 1; i++) {
        args.push(arguments[i]);
      }

      var level = 1;
      if (options.hash.level != null) {
        level = options.hash.level;
      } else if (options.data && options.data.level != null) {
        level = options.data.level;
      }
      args[0] = level;

      instance.log.apply(instance, args);
    });
  };

  module.exports = exports['default'];
});

var lookup = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('lookup', function (obj, field) {
      return obj && obj[field];
    });
  };

  module.exports = exports['default'];
});

var _with = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerHelper('with', function (context, options) {
      if (utils.isFunction(context)) {
        context = context.call(this);
      }

      var fn = options.fn;

      if (!utils.isEmpty(context)) {
        var data = options.data;
        if (options.data && options.ids) {
          data = utils.createFrame(options.data);
          data.contextPath = utils.appendContextPath(options.data.contextPath, options.ids[0]);
        }

        return fn(context, {
          data: data,
          blockParams: utils.blockParams([context], [data && data.contextPath])
        });
      } else {
        return options.inverse(this);
      }
    });
  };

  module.exports = exports['default'];
});

var helpers = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.registerDefaultHelpers = registerDefaultHelpers;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _helpersBlockHelperMissing2 = _interopRequireDefault(blockHelperMissing);

  var _helpersEach2 = _interopRequireDefault(each);

  var _helpersHelperMissing2 = _interopRequireDefault(helperMissing);

  var _helpersIf2 = _interopRequireDefault(_if);

  var _helpersLog2 = _interopRequireDefault(log);

  var _helpersLookup2 = _interopRequireDefault(lookup);

  var _helpersWith2 = _interopRequireDefault(_with);

  function registerDefaultHelpers(instance) {
    _helpersBlockHelperMissing2['default'](instance);
    _helpersEach2['default'](instance);
    _helpersHelperMissing2['default'](instance);
    _helpersIf2['default'](instance);
    _helpersLog2['default'](instance);
    _helpersLookup2['default'](instance);
    _helpersWith2['default'](instance);
  }
});

var inline = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (instance) {
    instance.registerDecorator('inline', function (fn, props, container, options) {
      var ret = fn;
      if (!props.partials) {
        props.partials = {};
        ret = function ret(context, options) {
          // Create a new partials stack frame prior to exec.
          var original = container.partials;
          container.partials = utils.extend({}, original, props.partials);
          var ret = fn(context, options);
          container.partials = original;
          return ret;
        };
      }

      props.partials[options.args[0]] = options.fn;

      return ret;
    });
  };

  module.exports = exports['default'];
});

var decorators = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.registerDefaultDecorators = registerDefaultDecorators;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _decoratorsInline2 = _interopRequireDefault(inline);

  function registerDefaultDecorators(instance) {
    _decoratorsInline2['default'](instance);
  }
});

var logger_1 = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;

  var logger = {
    methodMap: ['debug', 'info', 'warn', 'error'],
    level: 'info',

    // Maps a given level value to the `methodMap` indexes above.
    lookupLevel: function lookupLevel(level) {
      if (typeof level === 'string') {
        var levelMap = utils.indexOf(logger.methodMap, level.toLowerCase());
        if (levelMap >= 0) {
          level = levelMap;
        } else {
          level = parseInt(level, 10);
        }
      }

      return level;
    },

    // Can be overridden in the host environment
    log: function log(level) {
      level = logger.lookupLevel(level);

      if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
        var method = logger.methodMap[level];
        if (!console[method]) {
          // eslint-disable-line no-console
          method = 'log';
        }

        for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          message[_key - 1] = arguments[_key];
        }

        console[method].apply(console, message); // eslint-disable-line no-console
      }
    }
  };

  exports['default'] = logger;
  module.exports = exports['default'];
});

var base = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.HandlebarsEnvironment = HandlebarsEnvironment;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  var _exception2 = _interopRequireDefault(exception);

  var _logger2 = _interopRequireDefault(logger_1);

  var VERSION = '4.0.10';
  exports.VERSION = VERSION;
  var COMPILER_REVISION = 7;

  exports.COMPILER_REVISION = COMPILER_REVISION;
  var REVISION_CHANGES = {
    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    2: '== 1.0.0-rc.3',
    3: '== 1.0.0-rc.4',
    4: '== 1.x.x',
    5: '== 2.0.0-alpha.x',
    6: '>= 2.0.0-beta.1',
    7: '>= 4.0.0'
  };

  exports.REVISION_CHANGES = REVISION_CHANGES;
  var objectType = '[object Object]';

  function HandlebarsEnvironment(helpers$$1, partials, decorators$$1) {
    this.helpers = helpers$$1 || {};
    this.partials = partials || {};
    this.decorators = decorators$$1 || {};

    helpers.registerDefaultHelpers(this);
    decorators.registerDefaultDecorators(this);
  }

  HandlebarsEnvironment.prototype = {
    constructor: HandlebarsEnvironment,

    logger: _logger2['default'],
    log: _logger2['default'].log,

    registerHelper: function registerHelper(name, fn) {
      if (utils.toString.call(name) === objectType) {
        if (fn) {
          throw new _exception2['default']('Arg not supported with multiple helpers');
        }
        utils.extend(this.helpers, name);
      } else {
        this.helpers[name] = fn;
      }
    },
    unregisterHelper: function unregisterHelper(name) {
      delete this.helpers[name];
    },

    registerPartial: function registerPartial(name, partial) {
      if (utils.toString.call(name) === objectType) {
        utils.extend(this.partials, name);
      } else {
        if (typeof partial === 'undefined') {
          throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
        }
        this.partials[name] = partial;
      }
    },
    unregisterPartial: function unregisterPartial(name) {
      delete this.partials[name];
    },

    registerDecorator: function registerDecorator(name, fn) {
      if (utils.toString.call(name) === objectType) {
        if (fn) {
          throw new _exception2['default']('Arg not supported with multiple decorators');
        }
        utils.extend(this.decorators, name);
      } else {
        this.decorators[name] = fn;
      }
    },
    unregisterDecorator: function unregisterDecorator(name) {
      delete this.decorators[name];
    }
  };

  var log = _logger2['default'].log;

  exports.log = log;
  exports.createFrame = utils.createFrame;
  exports.logger = _logger2['default'];
});

var safeString = createCommonjsModule(function (module, exports) {
  // Build out our basic SafeString type
  'use strict';

  exports.__esModule = true;
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
    return '' + this.string;
  };

  exports['default'] = SafeString;
  module.exports = exports['default'];
});

var runtime$1 = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  exports.checkRevision = checkRevision;
  exports.template = template;
  exports.wrapProgram = wrapProgram;
  exports.resolvePartial = resolvePartial;
  exports.invokePartial = invokePartial;
  exports.noop = noop;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  // istanbul ignore next

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }newObj['default'] = obj;return newObj;
    }
  }

  var Utils = _interopRequireWildcard(utils);

  var _exception2 = _interopRequireDefault(exception);

  function checkRevision(compilerInfo) {
    var compilerRevision = compilerInfo && compilerInfo[0] || 1,
        currentRevision = base.COMPILER_REVISION;

    if (compilerRevision !== currentRevision) {
      if (compilerRevision < currentRevision) {
        var runtimeVersions = base.REVISION_CHANGES[currentRevision],
            compilerVersions = base.REVISION_CHANGES[compilerRevision];
        throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
      } else {
        // Use the embedded version info since the runtime doesn't know about this revision yet
        throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
      }
    }
  }

  function template(templateSpec, env) {
    /* istanbul ignore next */
    if (!env) {
      throw new _exception2['default']('No environment passed to template');
    }
    if (!templateSpec || !templateSpec.main) {
      throw new _exception2['default']('Unknown template object: ' + (typeof templateSpec === 'undefined' ? 'undefined' : _typeof(templateSpec)));
    }

    templateSpec.main.decorator = templateSpec.main_d;

    // Note: Using env.VM references rather than local var references throughout this section to allow
    // for external users to override these as psuedo-supported APIs.
    env.VM.checkRevision(templateSpec.compiler);

    function invokePartialWrapper(partial, context, options) {
      if (options.hash) {
        context = Utils.extend({}, context, options.hash);
        if (options.ids) {
          options.ids[0] = true;
        }
      }

      partial = env.VM.resolvePartial.call(this, partial, context, options);
      var result = env.VM.invokePartial.call(this, partial, context, options);

      if (result == null && env.compile) {
        options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
        result = options.partials[options.name](context, options);
      }
      if (result != null) {
        if (options.indent) {
          var lines = result.split('\n');
          for (var i = 0, l = lines.length; i < l; i++) {
            if (!lines[i] && i + 1 === l) {
              break;
            }

            lines[i] = options.indent + lines[i];
          }
          result = lines.join('\n');
        }
        return result;
      } else {
        throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
      }
    }

    // Just add water
    var container = {
      strict: function strict(obj, name) {
        if (!(name in obj)) {
          throw new _exception2['default']('"' + name + '" not defined in ' + obj);
        }
        return obj[name];
      },
      lookup: function lookup(depths, name) {
        var len = depths.length;
        for (var i = 0; i < len; i++) {
          if (depths[i] && depths[i][name] != null) {
            return depths[i][name];
          }
        }
      },
      lambda: function lambda(current, context) {
        return typeof current === 'function' ? current.call(context) : current;
      },

      escapeExpression: Utils.escapeExpression,
      invokePartial: invokePartialWrapper,

      fn: function fn(i) {
        var ret = templateSpec[i];
        ret.decorator = templateSpec[i + '_d'];
        return ret;
      },

      programs: [],
      program: function program(i, data, declaredBlockParams, blockParams, depths) {
        var programWrapper = this.programs[i],
            fn = this.fn(i);
        if (data || depths || blockParams || declaredBlockParams) {
          programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = wrapProgram(this, i, fn);
        }
        return programWrapper;
      },

      data: function data(value, depth) {
        while (value && depth--) {
          value = value._parent;
        }
        return value;
      },
      merge: function merge(param, common) {
        var obj = param || common;

        if (param && common && param !== common) {
          obj = Utils.extend({}, common, param);
        }

        return obj;
      },
      // An empty object to use as replacement for null-contexts
      nullContext: Object.seal({}),

      noop: env.VM.noop,
      compilerInfo: templateSpec.compiler
    };

    function ret(context) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var data = options.data;

      ret._setup(options);
      if (!options.partial && templateSpec.useData) {
        data = initData(context, data);
      }
      var depths = undefined,
          blockParams = templateSpec.useBlockParams ? [] : undefined;
      if (templateSpec.useDepths) {
        if (options.depths) {
          depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
        } else {
          depths = [context];
        }
      }

      function main(context /*, options*/) {
        return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
      }
      main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
      return main(context, options);
    }
    ret.isTop = true;

    ret._setup = function (options) {
      if (!options.partial) {
        container.helpers = container.merge(options.helpers, env.helpers);

        if (templateSpec.usePartial) {
          container.partials = container.merge(options.partials, env.partials);
        }
        if (templateSpec.usePartial || templateSpec.useDecorators) {
          container.decorators = container.merge(options.decorators, env.decorators);
        }
      } else {
        container.helpers = options.helpers;
        container.partials = options.partials;
        container.decorators = options.decorators;
      }
    };

    ret._child = function (i, data, blockParams, depths) {
      if (templateSpec.useBlockParams && !blockParams) {
        throw new _exception2['default']('must pass block params');
      }
      if (templateSpec.useDepths && !depths) {
        throw new _exception2['default']('must pass parent depths');
      }

      return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
    };
    return ret;
  }

  function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
    function prog(context) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var currentDepths = depths;
      if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
        currentDepths = [context].concat(depths);
      }

      return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
    }

    prog = executeDecorators(fn, prog, container, depths, data, blockParams);

    prog.program = i;
    prog.depth = depths ? depths.length : 0;
    prog.blockParams = declaredBlockParams || 0;
    return prog;
  }

  function resolvePartial(partial, context, options) {
    if (!partial) {
      if (options.name === '@partial-block') {
        partial = options.data['partial-block'];
      } else {
        partial = options.partials[options.name];
      }
    } else if (!partial.call && !options.name) {
      // This is a dynamic partial that returned a string
      options.name = partial;
      partial = options.partials[partial];
    }
    return partial;
  }

  function invokePartial(partial, context, options) {
    // Use the current closure context to save the partial-block if this partial
    var currentPartialBlock = options.data && options.data['partial-block'];
    options.partial = true;
    if (options.ids) {
      options.data.contextPath = options.ids[0] || options.data.contextPath;
    }

    var partialBlock = undefined;
    if (options.fn && options.fn !== noop) {
      (function () {
        options.data = base.createFrame(options.data);
        // Wrapper function to get access to currentPartialBlock from the closure
        var fn = options.fn;
        partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
          var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          // Restore the partial-block from the closure for the execution of the block
          // i.e. the part inside the block of the partial call.
          options.data = base.createFrame(options.data);
          options.data['partial-block'] = currentPartialBlock;
          return fn(context, options);
        };
        if (fn.partials) {
          options.partials = Utils.extend({}, options.partials, fn.partials);
        }
      })();
    }

    if (partial === undefined && partialBlock) {
      partial = partialBlock;
    }

    if (partial === undefined) {
      throw new _exception2['default']('The partial ' + options.name + ' could not be found');
    } else if (partial instanceof Function) {
      return partial(context, options);
    }
  }

  function noop() {
    return '';
  }

  function initData(context, data) {
    if (!data || !('root' in data)) {
      data = data ? base.createFrame(data) : {};
      data.root = context;
    }
    return data;
  }

  function executeDecorators(fn, prog, container, depths, data, blockParams) {
    if (fn.decorator) {
      var props = {};
      prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
      Utils.extend(prog, props);
    }
    return prog;
  }
});

var noConflict = createCommonjsModule(function (module, exports) {
  /* global window */
  'use strict';

  exports.__esModule = true;

  exports['default'] = function (Handlebars$$1) {
    /* istanbul ignore next */
    var root = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : window,
        $Handlebars = root.Handlebars;
    /* istanbul ignore next */
    Handlebars$$1.noConflict = function () {
      if (root.Handlebars === Handlebars$$1) {
        root.Handlebars = $Handlebars;
      }
      return Handlebars$$1;
    };
  };

  module.exports = exports['default'];
});

var handlebars_runtime = createCommonjsModule(function (module, exports) {
  'use strict';

  exports.__esModule = true;
  // istanbul ignore next

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
  }

  // istanbul ignore next

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }newObj['default'] = obj;return newObj;
    }
  }

  var base$$1 = _interopRequireWildcard(base);

  // Each of these augment the Handlebars object. No need to setup here.
  // (This is done to easily share code between commonjs and browse envs)


  var _handlebarsSafeString2 = _interopRequireDefault(safeString);

  var _handlebarsException2 = _interopRequireDefault(exception);

  var Utils = _interopRequireWildcard(utils);

  var runtime = _interopRequireWildcard(runtime$1);

  var _handlebarsNoConflict2 = _interopRequireDefault(noConflict);

  // For compatibility and usage outside of module systems, make the Handlebars object a namespace
  function create() {
    var hb = new base$$1.HandlebarsEnvironment();

    Utils.extend(hb, base$$1);
    hb.SafeString = _handlebarsSafeString2['default'];
    hb.Exception = _handlebarsException2['default'];
    hb.Utils = Utils;
    hb.escapeExpression = Utils.escapeExpression;

    hb.VM = runtime;
    hb.template = function (spec) {
      return runtime.template(spec, hb);
    };

    return hb;
  }

  var inst = create();
  inst.create = create;

  _handlebarsNoConflict2['default'](inst);

  inst['default'] = inst;

  exports['default'] = inst;
  module.exports = exports['default'];
});

// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
var runtime = handlebars_runtime['default'];

var compiledTemplate = runtime.template({ "1": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, data && data.first, { "name": "if", "hash": {}, "fn": container.program(2, data, 0), "inverse": container.program(4, data, 0), "data": data })) != null ? stack1 : "";
  }, "2": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"slider-text-field-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-text-field visible\">\n            <h2 class=\"heading\">" + alias4((helper = (helper = helpers.slideTitle || (depth0 != null ? depth0.slideTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideTitle", "hash": {}, "data": data }) : helper)) + "</h2>\n            <p class=\"exerpt\">" + alias4((helper = (helper = helpers.slideText || (depth0 != null ? depth0.slideText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideText", "hash": {}, "data": data }) : helper)) + "</p>\n            <a href=\"javascript:void(0)\">Read more</a>                        \n        </div>\n        <img id=\"slider-image-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-image visible\" src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"slider image\">\n";
  }, "4": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"slider-text-field-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-text-field hidden\">\n            <h2 class=\"heading\">" + alias4((helper = (helper = helpers.slideTitle || (depth0 != null ? depth0.slideTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideTitle", "hash": {}, "data": data }) : helper)) + "</h2>\n            <p class=\"exerpt\">" + alias4((helper = (helper = helpers.slideText || (depth0 != null ? depth0.slideText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "slideText", "hash": {}, "data": data }) : helper)) + "</p>\n            <a href=\"javascript:void(0)\">Read more</a>                        \n        </div>\n        <img id=\"slider-image-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"slider-image hidden\" src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"slider image\">\n";
  }, "6": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, data && data.first, { "name": "if", "hash": {}, "fn": container.program(7, data, 0), "inverse": container.program(9, data, 0), "data": data })) != null ? stack1 : "";
  }, "7": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"control-bottom-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"control-bottom active\" onclick=\"slideSliderImages(" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + ")\"></div>\n";
  }, "9": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <div id=\"control-bottom-" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + "\" class=\"control-bottom\" onclick=\"slideSliderImages(" + alias4((helper = (helper = helpers.index || data && data.index) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "index", "hash": {}, "data": data }) : helper)) + ")\"></div>\n";
  }, "11": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "        <article class=\"article-exerpt\">\n            <h2 class=\"heading\">" + alias4((helper = (helper = helpers.articleTitle || (depth0 != null ? depth0.articleTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "articleTitle", "hash": {}, "data": data }) : helper)) + "</h2>\n            <div class=\"image-wrapper\">\n                <img src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"\"/>\n            </div>\n            <p class=\"exerpt\">" + alias4((helper = (helper = helpers.articleText || (depth0 != null ? depth0.articleText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "articleText", "hash": {}, "data": data }) : helper)) + "</p>\n        </article>\n";
  }, "13": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = (helpers.isSmallerThan7 || depth0 && depth0.isSmallerThan7 || helpers.helperMissing).call(depth0 != null ? depth0 : container.nullContext || {}, data && data.index, { "name": "isSmallerThan7", "hash": {}, "fn": container.program(14, data, 0), "inverse": container.program(16, data, 0), "data": data })) != null ? stack1 : "";
  }, "14": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "                <div class=\"media-item tooltip visible\"><span class=\"tooltip-text\">\n                    " + alias4((helper = (helper = helpers.multimediaText || (depth0 != null ? depth0.multimediaText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "multimediaText", "hash": {}, "data": data }) : helper)) + "</span>\n                    <img src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"Multimedia image\"/>\n                </div>\n";
  }, "16": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "                <div class=\"media-item tooltip hidden\"><span class=\"tooltip-text\">\n                    " + alias4((helper = (helper = helpers.multimediaText || (depth0 != null ? depth0.multimediaText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "multimediaText", "hash": {}, "data": data }) : helper)) + "</span>\n                    <img src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"Multimedia image\"/>\n                </div>\n";
  }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
    var stack1,
        alias1 = depth0 != null ? depth0 : container.nullContext || {};

    return "<div id=\"slider\">\n    <div class=\"shadow-top\"></div>\n    <div id=\"slider-controls-left\" onclick=\"slideDirection(-1)\" ><i class=\"fa fa-angle-left fa-2x\" aria-hidden=\"true\"></i></div>\n    <div id=\"slider-images\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.slides : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </div>\n    <div id=\"slider-controls-right\" onclick=\"slideDirection(1)\" ><i class=\"fa fa-angle-right fa-2x\" aria-hidden=\"true\"></i></div>\n    <div class=\"shadow-bottom\"></div>\n    <div id=\"slider-controls-bottom\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.slides : depth0, { "name": "each", "hash": {}, "fn": container.program(6, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </div>\n</div>\n<div class=\"divider\"></div>\n<div id=\"quote\">\n    <h1>\"Chameleon is an extremely versatile theme with a miriad of options and styles\"</h1>\n    <p>Et anim esse elit est officia nulla culpa ex id ipsum dolore proident velit.</p>\n</div>\n<div class=\"divider\"></div>\n<main id=\"main-home\">\n    <section id=\"articles\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.articles : depth0, { "name": "each", "hash": {}, "fn": container.program(11, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </section>\n    <section id=\"media\">\n        <article id=\"links\">\n            <h2 class=\"heading\">From the blog</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n        <article id=\"multi-media\">\n            <h2 class=\"heading\">Multi-media</h2>\n            <div id=\"media-wrapper\">\n                <div id=\"media-controls-left\" onclick=\"slideMultimediaImages('left')\"><i class=\"fa fa-angle-left fa-lg\" aria-hidden=\"true\"></i></div>\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.multimedia : depth0, { "name": "each", "hash": {}, "fn": container.program(13, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "                <div id=\"media-controls-right\" onclick=\"slideMultimediaImages('right')\"><i class=\"fa fa-angle-right fa-lg\" aria-hidden=\"true\"></i></div>\n            </div>\n        </article>\n    </section>\n</main>\n";
  }, "useData": true });

// console.log(compiledTemplate);
runtime.registerHelper('isSmallerThan7', function (index, options) {
    if (index < 7) {
        return options.fn(this);
    }
    return options.inverse(this);
});

var HomeControler = function () {
    function HomeControler() {
        classCallCheck(this, HomeControler);
    }

    createClass(HomeControler, [{
        key: 'showHomePage',
        value: function showHomePage() {
            Promise.all([slidesController.getSlides(), articlesData.getArticles(), multimediaData.getMultimedia()]
            // template.compileTemplate('home'),
            ).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 3),
                    slides = _ref2[0],
                    articles = _ref2[1],
                    multimedia = _ref2[2];

                var homeData = {
                    slides: slides,
                    articles: articles,
                    multimedia: multimedia
                };
                return Promise.resolve(compiledTemplate(homeData)).then(function (html) {
                    document.getElementById('container').innerHTML = html;
                    // const script = document.createElement('script');
                    // script.type = 'text/javascript';
                    // script.src = '../js/utils/mainSlider.js';
                    // document.body.appendChild(script);
                });
            });
        }
    }]);
    return HomeControler;
}();

var homeController = new HomeControler();

var CategoriesData = function () {
    function CategoriesData() {
        classCallCheck(this, CategoriesData);
    }

    createClass(CategoriesData, [{
        key: 'addCategory',
        value: function addCategory(category) {
            return db.ref().child('categories/' + category.categoryName).once('value').then(function (snapshot) {
                if (snapshot.exists()) {
                    alert('Category already exists!');
                } else {
                    db.ref('categories/').child(category.categoryName).set({ category: category });
                }
            });
        }
    }, {
        key: 'getCategoryNames',
        value: function getCategoryNames() {
            var names = [];
            return db.ref().child('categories').once('value', function (snapshot) {
                snapshot.forEach(function (category) {
                    names.push(category.val().categoryName);
                });
            }).then(function () {
                return Promise.resolve({ categories: names });
            });
        }
    }, {
        key: 'getCategory',
        value: function getCategory(categoryName, postsPerPage) {
            var categoryPosts = void 0;
            var numberOfPages = void 0;
            var pages = [];
            db.ref('categories/').child(categoryName).child('categoryPosts').orderByKey().limitToFirst(postsPerPage).once('value').then(function (snapshot) {
                categoryPosts = snapshot.val();
            });
            db.ref('categories/' + categoryName).child('numberOfPosts').once('value').then(function (snapshot) {
                numberOfPages = Math.ceil(snapshot.val() / postsPerPage);
                for (var i = 1; i <= numberOfPages; i += 1) {
                    pages.push(i);
                }
            });

            return db.ref('categories/' + categoryName).child('categoryDescription').once('value').then(function (snapshot) {
                var category = {};
                category.categoryName = categoryName;
                category.categoryDescription = snapshot.val();
                category.categoryPosts = categoryPosts;
                category.categoryPages = pages;
                return Promise.resolve(category);
            });
        }
    }, {
        key: 'getCategoryPostsPage',
        value: function getCategoryPostsPage(currentPage, requestedPage, postsPerPage, categoryName) {
            var categoryPosts = void 0;
            if (requestedPage > currentPage) {
                var startId = document.getElementsByClassName('post')[postsPerPage - 1].id;
                return db.ref('categories/').child(categoryName).child('categoryPosts').orderByKey().startAt(startId).limitToFirst(postsPerPage + 1).once('value', function (snapshot) {
                    console.log(snapshot);
                    categoryPosts = snapshot.val();
                    delete categoryPosts[startId];
                }).then(function () {
                    return Promise.resolve({ posts: categoryPosts });
                });
            }
            var endId = document.getElementsByClassName('post')[0].id;
            return db.ref('categories/').child(categoryName).child('categoryPosts').orderByKey().endAt(endId).limitToLast(postsPerPage + 1).once('value', function (snapshot) {
                console.log(snapshot);
                categoryPosts = snapshot.val();
                delete categoryPosts[endId];
            }).then(function () {
                return Promise.resolve({ posts: categoryPosts });
            });
        }
    }]);
    return CategoriesData;
}();

var categoriesData = new CategoriesData();

var PostsData = function () {
    function PostsData() {
        classCallCheck(this, PostsData);
    }

    createClass(PostsData, [{
        key: 'getPost',
        value: function getPost(postId) {
            return db.ref('posts').child(postId).once('value').then(function (snapshot) {
                var post = snapshot.val();
                return Promise.resolve(post);
            });
        }
    }, {
        key: 'addPost',
        value: function addPost(post) {
            var uploadTask = storage$1.child('postimages/' + post.postTitle + '/' + post.postImage.name).put(post.postImage);

            uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                alert(error);
            }, function () {
                storage$1.child('postimages/' + post.postTitle + '/' + post.postImage.name).getDownloadURL().then(function (imageUrl) {
                    var newPostKey = db.ref().child('posts').push().key;
                    post.postId = newPostKey;
                    var updates = {};
                    updates['posts/' + newPostKey] = post;
                    updates['categories/' + post.postCategory + '/categoryPosts/' + newPostKey] = post;

                    return db.ref().update(updates);
                });
            });
        }
    }, {
        key: 'addComment',
        value: function addComment(categoryName, postId, comment) {
            var commentsNumber = void 0;
            var newCommentKey = db.ref().child('comments').push().key;
            var updates = {};

            db.ref('categories/' + categoryName + '/categoryPosts/' + postId).once('value').then(function (snapshot) {
                console.log(snapshot.val());
                commentsNumber = snapshot.val().numberOfComments + 1;
                updates['posts/' + postId + '/postComments/' + newCommentKey] = comment;
                updates['comments/' + newCommentKey] = comment;
                updates['posts/' + postId + '/numberOfComments'] = commentsNumber;
                updates['categories/' + categoryName + '/categoryPosts/' + postId + '/numberOfComments'] = commentsNumber;
                db.ref().update(updates);
            });
        }
    }]);
    return PostsData;
}();

var postData = new PostsData();

function clearInputs() {
    document.querySelectorAll('input, textarea').forEach(function (input) {
        if (input.value !== '') {
            input.value = '';
        }
    });
}

var postsPerPage$1 = 3;
var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var firebaseConfig = {
    apiKey: "AIzaSyCXp1GKlfoTF4eY49tx2inZSOrE3peimNQ",
    authDomain: "photo-blog-85739.firebaseapp.com",
    databaseURL: "https://photo-blog-85739.firebaseio.com",
    projectId: "photo-blog-85739",
    storageBucket: "photo-blog-85739.appspot.com",
    messagingSenderId: "735786168913"
};

var MONTHS$1 = {
    postsPerPage: postsPerPage$1,
    MONTHS: MONTHS,
    firebaseConfig: firebaseConfig
};

var compiledTemplate$1 = runtime.template({ "1": function _(container, depth0, helpers, partials, data) {
        var stack1;

        return "    <option selected disabled>select category</option>\n" + ((stack1 = helpers.each.call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? depth0.categories : depth0, { "name": "each", "hash": {}, "fn": container.program(2, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "");
    }, "2": function _(container, depth0, helpers, partials, data) {
        var alias1 = container.lambda,
            alias2 = container.escapeExpression;

        return "    <option value=\"" + alias2(alias1(depth0, depth0)) + "\">" + alias2(alias1(depth0, depth0)) + "</option>\n";
    }, "4": function _(container, depth0, helpers, partials, data) {
        return "    <option selected disabled>add category first</option>\n";
    }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
        var stack1;

        return "<section id=\"add-slide\">\n    <h2>Add new slide</h2>\n    <input type=\"text\" id=\"input-slide-title\" placeholder=\"Slide Title\" required>\n    <textarea name=\"slide_text\" id=\"input-slide-text\" cols=\"30\" rows=\"10\"  placeholder=\"Slide Text\" required></textarea>\n    <input type=\"file\" name=\"input_slide_image\" id=\"input-slide-image\" required>\n    <button id=\"slide-button\" type=\"submit\" onclick=\"addNewSlide()\">Add slide</button>\n</section>\n<section id=\"add-category\">\n    <h2>Add new Category</h2>\n    <input type=\"text\" name=\"categoryname\" id=\"input-category-name\" placeholder=\"Category name\" required>\n    <textarea name=\"category_description\" id=\"input-category-description\" cols=\"30\" rows=\"10\"  placeholder=\"Category dascription\" required></textarea>\n    <button id=\"category-button\" type=\"submit\" onclick=\"addNewCategory()\">Add category</button>\n</section>\n<section id=\"add-post\">\n    <h2>Add new Post</h2>\n    <select type=\"text\" name=\"postcategory\" id=\"input-post-category\" placeholder=\"Post category\" required>\n" + ((stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, depth0 != null ? depth0.categories : depth0, { "name": "if", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.program(4, data, 0), "data": data })) != null ? stack1 : "") + "    </select>\n    <input type=\"text\" name=\"posttitle\" id=\"input-post-title\" placeholder=\"Post title\" required>\n    <textarea name=\"posttext\" id=\"input-post-text\" cols=\"30\" rows=\"10\" placeholder=\"Post text\" required></textarea>     \n    <input type=\"file\" name=\"input_post_image\" id=\"input-post-image\" required>\n    <button id=\"post-button\" type=\"submit\" onclick=\"addNewPost()\">Add post</button>\n</section>\n<section id=\"add-multimedia\">\n    <h2>Add new Multimedia</h2>\n    <textarea name=\"posttext\" id=\"input-multimedia-text\" cols=\"30\" rows=\"10\" placeholder=\"Multimedia text\" required></textarea> \n    <input type=\"file\" name=\"multimedia\" id=\"input-multimedia-image\" required>\n    <button id=\"multimedia-button\" type=\"submit\" onclick=\"addNewMultimedia()\">Add multimedia</button>\n</section>\n<section id=\"add-slide\">\n    <h2>Add new Article</h2>\n    <input type=\"text\" id=\"input-article-title\" placeholder=\"Article Title\" required>\n    <textarea name=\"article_text\" id=\"input-article-text\" cols=\"30\" rows=\"10\"  placeholder=\"Article Text\" required></textarea>\n    <input type=\"file\" name=\"input_article_image\" id=\"input-article-image\" required>\n    <button id=\"slide-button\" type=\"submit\" onclick=\"addNewArticle()\">Add article</button>\n</section>";
    }, "useData": true });

/* global firebase,router */

var AdminController = function () {
    function AdminController() {
        classCallCheck(this, AdminController);
    }

    createClass(AdminController, [{
        key: 'showAdminPage',
        value: function showAdminPage() {
            Promise.all([categoriesData.getCategoryNames()]
            // template.compileTemplate('admin'),
            ).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 1),
                    categories = _ref2[0];

                document.getElementById('container').innerHTML = compiledTemplate$1(categories);
            });
        }
    }, {
        key: 'addNewMultimedia',
        value: function addNewMultimedia() {
            var multimediaImage = document.getElementById('input-multimedia-image').files[0];
            var multimediaText = document.getElementById('input-multimedia-text').value;

            multimediaData.addMultimedia(multimediaImage, multimediaText).then(function () {
                clearInputs();
                alert('New multimedia added');
            });
        }
    }, {
        key: 'addNewArticle',
        value: function addNewArticle() {
            var articleImage = document.getElementById('input-article-image').files[0];
            var articleTitle = document.getElementById('input-article-title').value;
            var articleText = document.getElementById('input-article-text').value;

            articlesData.addArticle(articleImage, articleTitle, articleText).then(function () {
                clearInputs();
                alert('New article added');
            });
        }
    }, {
        key: 'addNewSlide',
        value: function addNewSlide() {
            var slideImage = document.getElementById('input-slide-image').files[0];
            var slideTitle = document.getElementById('input-slide-title').value;
            var slideText = document.getElementById('input-slide-text').value;

            slidesController.addSlide(slideImage, slideTitle, slideText).then(function () {
                clearInputs();
                alert('New slide added');
            });
        }
    }, {
        key: 'addNewCategory',
        value: function addNewCategory() {
            var category = {
                categoryName: document.getElementById('input-category-name').value,
                categoryDescription: document.getElementById('input-category-description').value,
                numberOfPosts: 0
            };

            categoriesData.addCategory(category).then(function () {
                // router.navigate('admin/addcategory');
                alert('New category added');
            });
        }
    }, {
        key: 'addNewPost',
        value: function addNewPost() {
            var today = new Date();
            var post = {
                postImage: document.getElementById('input-post-image').files[0],
                postTitle: document.getElementById('input-post-title').value,
                postText: document.getElementById('input-post-text').value,
                postCategory: document.getElementById('input-post-category').value,
                userId: firebase.auth().currentUser.uid,
                postAuthor: firebase.auth().currentUser.displayName,
                postDate: MONTHS$1.MONTHS[today.getMonth()] + ' ' + today.getDate() + ', ' + today.getFullYear(),
                numberOfComments: 0
            };

            postData.addPost(post).then(function () {
                clearInputs();
                alert('New post added');
            });
        }
    }]);
    return AdminController;
}();

var adminController = new AdminController();

var loginTemplate = runtime.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
        return "<section id=\"login-user\">\n    <h2>Login user</h2>\n    <input type=\"email\" name=\"email\" id=\"login-email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" id=\"login-password\" placeholder=\"Password\" required>\n    <button id=\"login-button\" type=\"submit\" onclick=\"loginUser()\">Login</button>\n</section>";
    }, "useData": true });

var signupTemplate = runtime.template({ "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
        return "<section id=\"register-user\">\n    <h2>Register user</h2>\n    <input type=\"text\" name=\"username\" id=\"input-username\" placeholder=\"Username\" required>\n    <input type=\"email\" name=\"email\" id=\"input-email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" id=\"input-password\" placeholder=\"Password\" required>\n    <input type=\"file\" name=\"input_user_image\" id=\"input-user-image\" required>\n    <button id=\"user-button\" type=\"submit\" onclick=\"addNewUser()\">Register</button>\n</section>  ";
    }, "useData": true });

var AuthenticationController = function () {
    function AuthenticationController() {
        classCallCheck(this, AuthenticationController);
    }

    createClass(AuthenticationController, [{
        key: 'showLoginPage',
        value: function showLoginPage() {
            document.getElementById('container').innerHTML = loginTemplate();
        }
    }, {
        key: 'showSignupPage',
        value: function showSignupPage() {
            document.getElementById('container').innerHTML = signupTemplate();
        }
    }, {
        key: 'addNewUser',
        value: function addNewUser() {
            var userImage = document.getElementById('input-user-image').files[0];
            var username = document.getElementById('input-username').value;
            var email = document.getElementById('input-email').value;
            var password = document.getElementById('input-password').value;

            firebase.auth().createUserWithEmailAndPassword(email, password).then(function (user) {
                var uploadTask = storage.child('userimages/' + username + '/' + userImage.name).put(uaserImage);
                uploadTask.on('state_changed', function (snapshot) {}, function (error) {
                    alert(error);
                }, function () {
                    storage.child('userimages/' + username + '/' + userImage.name).getDownloadURL().then(function (imageUrl) {
                        user.updateProfile({ displayName: username, photoURL: imageUrl });
                    });
                }).then(function () {
                    router.navigate('home');
                    alert('Registered and loged in');
                });
            }).catch(function (error) {
                alert(error.message);
            });
        }
    }, {
        key: 'loginUser',
        value: function loginUser() {
            var email = document.getElementById('login-email').value;
            var password = document.getElementById('login-password').value;

            firebase.auth().signInWithEmailAndPassword(email, password).then(function () {
                router.navigate('home');
                alert('Logged in!');
            }).catch(function (error) {
                alert(error.message);
            });
        }
    }, {
        key: 'logoutUser',
        value: function logoutUser() {
            firebase.auth().signOut().then(function () {
                alert('Signed out');
            });
        }
    }]);
    return AuthenticationController;
}();

var authenticationController = new AuthenticationController();

var categoryPageTemplate = runtime.template({ "1": function _(container, depth0, helpers, partials, data) {
    var helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "            <a href=\"#categories/" + alias4((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "/" + alias4((helper = (helper = helpers.postId || (depth0 != null ? depth0.postId : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postId", "hash": {}, "data": data }) : helper)) + "\"><h2 class=\"heading\">" + alias4((helper = (helper = helpers.postTitle || (depth0 != null ? depth0.postTitle : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postTitle", "hash": {}, "data": data }) : helper)) + "</h2></a>\n            <div class=\"divider\"></div>\n            <p class=\"post-details\">Posted by<span> " + alias4((helper = (helper = helpers.postAuthor || (depth0 != null ? depth0.postAuthor : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postAuthor", "hash": {}, "data": data }) : helper)) + "</span> on <span>" + alias4((helper = (helper = helpers.postDate || (depth0 != null ? depth0.postDate : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postDate", "hash": {}, "data": data }) : helper)) + " </span>in <span>" + alias4((helper = (helper = helpers.postCategory || (depth0 != null ? depth0.postCategory : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postCategory", "hash": {}, "data": data }) : helper)) + "</span> category | <span>" + alias4((helper = (helper = helpers.numberOfComments || (depth0 != null ? depth0.numberOfComments : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "numberOfComments", "hash": {}, "data": data }) : helper)) + " </span>comments</p>\n            <div class=\"divider\"></div>\n            <section id=\"" + alias4((helper = (helper = helpers.postId || (depth0 != null ? depth0.postId : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postId", "hash": {}, "data": data }) : helper)) + "\" class=\"post\">\n                <div class=\"post-image-wrapper\">\n                    <img class=\"post-image\" src=\"" + alias4((helper = (helper = helpers.imageUrl || (depth0 != null ? depth0.imageUrl : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "imageUrl", "hash": {}, "data": data }) : helper)) + "\" alt=\"\"/>\n                    <div class=\"post-image-shadow\"></div>\n                </div>\n                <p id=\"post-text\">" + alias4((helper = (helper = helpers.postText || (depth0 != null ? depth0.postText : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "postText", "hash": {}, "data": data }) : helper)) + "</p>\n            </section>\n";
  }, "3": function _(container, depth0, helpers, partials, data) {
    var stack1;

    return (stack1 = helpers["if"].call(depth0 != null ? depth0 : container.nullContext || {}, data && data.first, { "name": "if", "hash": {}, "fn": container.program(4, data, 0), "inverse": container.program(6, data, 0), "data": data })) != null ? stack1 : "";
  }, "4": function _(container, depth0, helpers, partials, data) {
    var alias1 = container.lambda,
        alias2 = container.escapeExpression;

    return "            <button id=\"category-page-button-" + alias2(alias1(depth0, depth0)) + "\" class=\"category-page-button active\" onclick=\"showCategoryPostsPage(" + alias2(alias1(depth0, depth0)) + ")\" disabled>" + alias2(alias1(depth0, depth0)) + "</button>\n";
  }, "6": function _(container, depth0, helpers, partials, data) {
    var alias1 = container.lambda,
        alias2 = container.escapeExpression;

    return "            <button id=\"category-page-button-" + alias2(alias1(depth0, depth0)) + "\" class=\"category-page-button\" onclick=\"showCategoryPostsPage(" + alias2(alias1(depth0, depth0)) + ")\">" + alias2(alias1(depth0, depth0)) + "</button>\n";
  }, "compiler": [7, ">= 4.0.0"], "main": function main(container, depth0, helpers, partials, data) {
    var stack1,
        helper,
        alias1 = depth0 != null ? depth0 : container.nullContext || {},
        alias2 = helpers.helperMissing,
        alias3 = "function",
        alias4 = container.escapeExpression;

    return "<div id=\"breadcrumbs\">\n    <p><a href=\"#home\">Home </a><span class=\"category-name\">&raquo; " + alias4((helper = (helper = helpers.categoryName || (depth0 != null ? depth0.categoryName : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "categoryName", "hash": {}, "data": data }) : helper)) + "</span></span></p>\n</div>\n<div class=\"divider\"></div>\n<div id=\"quote\">\n    <h1 id=\"category-name\">" + alias4((helper = (helper = helpers.categoryName || (depth0 != null ? depth0.categoryName : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "categoryName", "hash": {}, "data": data }) : helper)) + "</h1>\n    <p>" + alias4((helper = (helper = helpers.categoryDescription || (depth0 != null ? depth0.categoryDescription : depth0)) != null ? helper : alias2, (typeof helper === "undefined" ? "undefined" : _typeof(helper)) === alias3 ? helper.call(alias1, { "name": "categoryDescription", "hash": {}, "data": data }) : helper)) + "</p>\n</div>\n<div class=\"divider\"></div>\n<div id=\"content-wrapper\">\n    <main id=\"post-wrapper\">\n        <div id=\"posts-page\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.categoryPosts : depth0, { "name": "each", "hash": {}, "fn": container.program(1, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "        </div>\n    <div id=\"pagination\">\n" + ((stack1 = helpers.each.call(alias1, depth0 != null ? depth0.categoryPages : depth0, { "name": "each", "hash": {}, "fn": container.program(3, data, 0), "inverse": container.noop, "data": data })) != null ? stack1 : "") + "    </div>\n    </main>\n    <aside id=\"right-sidebar\">\n        <article class=\"links-widget\">\n            <h2 class=\"heading\">From the blog</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n        <article class=\"links-widget\">\n            <h2 class=\"heading\">Archives</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n        <article class=\"links-widget\">\n            <h2 class=\"heading\">Recent Posts</h2>\n            <ul>\n                <li><a href=\"javascript:void(0)\">Consequat id anim sunt</a></li>\n                <li><a href=\"javascript:void(0)\">Aute proident dolore</a></li>\n                <li><a href=\"javascript:void(0)\">Exercitation amet</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor magna nulla</a></li>\n                <li><a href=\"javascript:void(0)\">Tempor sunt excepteur</a></li>\n                <li><a href=\"javascript:void(0)\">Non aliquip nulla utr</a></li>\n            </ul>\n        </article>\n    </aside>\n</div>";
  }, "useData": true });

var CategoriesController = function () {
    function CategoriesController() {
        classCallCheck(this, CategoriesController);
    }

    createClass(CategoriesController, [{
        key: 'showCategoryPage',
        value: function showCategoryPage(params) {
            var categoryName = params.category;
            Promise.all([categoriesData.getCategory(categoryName, MONTHS$1.postsPerPage)]
            // template.compileTemplate('category'),
            ).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 1),
                    category = _ref2[0];

                console.log(category);
                document.getElementById('container').innerHTML = categoryPageTemplate(category);
            });
        }
    }, {
        key: 'updateCategoryPage',
        value: function updateCategoryPage(requestedPage) {
            var currentPage = +document.getElementsByClassName('category-page-button active')[0].innerHTML;
            var categoryName = document.getElementById('category-name').innerHTML;
            Promise.all([categoriesData.getCategoryPostsPage(currentPage, requestedPage, postsPerPage, categoryName)]
            // template.compileTemplate('posts-page'),
            ).then(function (_ref3) {
                var _ref4 = slicedToArray(_ref3, 1),
                    posts = _ref4[0];

                document.getElementById('posts-page').innerHTML = categoryPageTemplate(posts);
                document.getElementById('category-page-button-' + currentPage).classList.remove('active');
                document.getElementById('category-page-button-' + currentPage).disabled = false;
                document.getElementById('category-page-button-' + requestedPage).classList.add('active');
                document.getElementById('category-page-button-' + requestedPage).disabled = true;
            });
        }
    }]);
    return CategoriesController;
}();

var categoryController = new CategoriesController();

/* global firebase */
var PostsController = function () {
    function PostsController() {
        classCallCheck(this, PostsController);
    }

    createClass(PostsController, [{
        key: 'showPostPage',
        value: function showPostPage(params) {
            var postId = params.post;
            Promise.all([postData.getPost(postId), template.compileTemplate('post')]).then(function (_ref) {
                var _ref2 = slicedToArray(_ref, 2),
                    post = _ref2[0],
                    compiledTemplate = _ref2[1];

                document.getElementById('container').innerHTML = compiledTemplate(post);
            });
        }
    }, {
        key: 'addNewComment',
        value: function addNewComment(partialUrl) {
            var today = new Date();
            var uris = partialUrl.split('/');
            var categoryName = uris[0];
            var postId = uris[1];
            var comment = {
                commentAuthor: document.getElementById('input-comment-user').value,
                commentAuthorEmail: document.getElementById('input-comment-email').value,
                commentText: document.getElementById('input-comment-text').value,
                commentAuthorImage: firebase.auth().currentUser.photoURL,
                commentDate: MONTHS$1[today.getMonth()] + ' ' + today.getDate() + ', ' + today.getFullYear()
            };

            postData.addComment(categoryName, postId, comment).then(function () {
                // showPostPage(postId);
                alert('New comment added');
            });
        }
    }]);
    return PostsController;
}();

var postsController = new PostsController();

/* global firebase, Navigo */
// firebase.initializeApp(settings.firebaseConfig);

console.log('app running');

var router$1 = new Navigo(null, true, '#!');

router$1.updatePageLinks();

router$1.on({
  'admin': function admin() {
    return adminController.showAdminPage();
  },
  'admin/addslide': function adminAddslide() {
    return adminController.addNewSlide();
  },
  'admin/addnewpost': function adminAddnewpost() {
    return adminController.addNewPost();
  },
  'admin/addnewgategory': function adminAddnewgategory() {
    return adminController.addNewCategory();
  },
  'admin/addnewmultimedia': function adminAddnewmultimedia() {
    return adminController.addNewMultimedia();
  },
  'admin/addnewarticle': function adminAddnewarticle() {
    return adminController.addNewMultimedia();
  },
  'login': function login() {
    return authenticationController.showLoginPage();
  },
  'signup': function signup() {
    return authenticationController.showSignupPage();
  },
  'logout': function logout() {
    return authenticationController.logoutUser();
  },
  'home': function home() {
    return homeController.showHomePage();
  },
  'categories/:category': function categoriesCategory(params) {
    return categoryController.showCategoryPage(params);
  },
  'categories/:category/page/:page': function categoriesCategoryPagePage(params) {
    return categoryController.updateCategoryPage(params);
  },
  'categories/:category/:post': function categoriesCategoryPost(params) {
    return postsController.showPostPage();
  },

  '': function _() {
    return router$1.navigate('home');
  }
}).resolve();

}(Handlebars));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
